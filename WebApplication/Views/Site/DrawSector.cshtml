@using SWI.Libraries.AirView.Entities
@model IEnumerable<AV_Sector>
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>DrawSector</title>
    @Scripts.Render("~/AdminLTE/plugins/jquery/js")
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyAdDzJ4ggDZu4WAguesEjYlVEl1Y80YYDI&sensor=false&libraries=geometry&bogusParam=.js"></script>
    <script>
        $("document").ready(function () {
            @*var Colors = [];
            @foreach (var item in Model)
            {
                string rgb = ViewBag.SectorColors.SectorColorsRGB(item.Sector);
                @: Colors.push('@rgb');
            }*@

            var Latitude = '@Model.First().Latitude';
            var Longitude = '@Model.First().Longitude';


            var AzmuthData = [
           @foreach (var item in Model)
            {
                double start = item.Azimuth - (item.BeamWidth / 2);
                double End= item.Azimuth + (item.BeamWidth / 2);
                if (End==360)
                {
                    End=0;
                }
                else if(End>360)
                {
                    double tmpEnd = End - 360;
                    if (tmpEnd >= 0 && tmpEnd <=1)
                    {
                        End = 1;
                    }
                    else
                    {
                        End = Convert.ToInt32(End - 360);
                    }
                }

                @:[@start, @End, ''],

            }
        ];

            var   gm = google.maps,
            centerPt = new gm.LatLng(Latitude, Longitude);

            console.log(centerPt);
            Azmiuth(AzmuthData, centerPt, 50);

            function Azmiuth(Angles, CenterPoint, Radius) {
                //  debugger;
                // 0 = start angle
                // 1 = end angle
                // 2 = color
                if (Radius == undefined) {
                    Radius = 100;
                }

                polys = [],
                i = 0,
                radiusMeters = Radius;

                for (; i < Angles.length; i++) {
                    var path = getArcPath(CenterPoint, radiusMeters, Angles[i][0], Angles[i][1]);
                    for (var i = 0; i < path.length; i++) {
                        $('#latlng').append(path[i].lat() + ',' + path[i].lng()+'|');
                        //console.log(path[i].lat());
                        //console.log(path[i].lng());
                      
                    }
                   
                    //path.unshift(CenterPoint);
                    //path.push(CenterPoint);
                    //var poly = new google.maps.Polygon({
                    //    path: path,
                    //    map: map,
                    //    fillColor: Angles[i][2],
                    //    fillOpacity: 1,

                    //});
                    //polys.push(poly);
                }
            }

            function getArcPath(center, radiusMeters, startAngle, endAngle, direction) {
                var point, previous,
                    atEnd = false,
                    points = Array(),
                    a = startAngle;
                while (true) {
                    point = google.maps.geometry.spherical.computeOffset(center, radiusMeters, a);
                    points.push(point);
                    if (a == endAngle) {
                        break;
                    }
                    a++;
                    if (a > 360) {
                        a = 1;
                    }
                }
                if (direction == 'counterclockwise') {
                    points = points.reverse();
                }
                return points;
            }
        });
    </script>
</head>
<body>
    <div id="latlng"> 

    </div>
</body>
</html>
