@using SWI.Libraries.Security.Entities
@using SWI.Libraries.AirView.Entities
@using SWI.Libraries.AD.Entities
@model Sec_User
        <style>
            .error{
	display: none;
	margin-left: 15px;
}		

.error_show{
	color: #B94A48;
	margin-left: 15px;
}
        </style>
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutClient.cshtml";
    List<AD_DefinationTypes> DefinationType = ViewBag.DefinationTypes as List<AD_DefinationTypes>;
    List<Sec_Permission> permissions = ViewBag.Permissions as List<Sec_Permission>;
    List<AD_Defination> regions = ViewBag.Region as List<AD_Defination>;

}
@helper GetTreeView(List<Sec_Permission> Per, Int64 ParentId)
{

foreach (var item in Per.Where(m => m.ParentId.Equals(ParentId)))
{
    var subItems = Per.Where(m => m.ParentId.Equals(item.Id)).Count();
        <li Id="@item.Id" class="control">
            @item.Title
            @if (subItems > 0)
            {
                <ul>
                    @GetTreeView(Per, item.Id)
                </ul>
            }
        </li>
}
}



@helper GetTreeView2(List<AD_Defination> reg, Int64 PDefinationId)
{

foreach (var item in reg.Where(m => m.PDefinationId.Equals(PDefinationId)))
{
    var subItems = reg.Where(m => m.PDefinationId.Equals(item.DefinationId)).Count();
        <li Id="@item.DefinationId" class="control">
            @item.DefinationName
            @if (subItems > 0)
            {
                <ul>
                    @GetTreeView2(reg, item.DefinationId)
                </ul>
            }
        </li>
}
}

@helper GetTreeView3(List<AD_DefinationTypes> dt, Int64 PDefinationTypeId)
{
foreach (var item in dt.Where(m => m.PDefinationTypeId == PDefinationTypeId))
{
    var subItems = dt.Where(m => m.PDefinationTypeId == item.DefinationTypeId).Count();
        <li Id="@item.DefinationTypeId" class="control">
            @item.DefinationType
            @if (subItems > 0)
            {
                <ul>
                    @GetTreeView3(dt, item.DefinationTypeId)
                </ul>
                var subsbitems = dt.Where(m => m.PDefinationTypeId == item.DefinationTypeId).ToList();
                if (subsbitems.Count > 0)
                {
                    foreach (var ssb in subsbitems)
                    {
                        <ul>
                            @GetTreeView3(dt, ssb.DefinationTypeId)
                        </ul>
                    }
                }
            }
</li>
}
}


<!-- Google Font -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
<div class="row">
    <div class="col-md-3">
        <!-- Profile Image -->
        <div class="box box-primary">
            <div class="box-body box-profile">
                <img class="profile-user-img img-responsive img-circle" src="@ViewBag.User.Picture" alt="User profile picture">
                <h3 class="profile-username text-center">@ViewBag.User.Title &nbsp; @ViewBag.User.FirstName &nbsp; @ViewBag.User.LastName</h3>
                <p class="text-muted text-center">@ViewBag.User.Designation</p>
                <ul class="list-group list-group-unbordered">
                    <li class="list-group-item">
                        <b>Username</b> <a class="pull-right">@ViewBag.User.UserName</a>
                    </li>
                    <li class="list-group-item">
                        <b>Role</b> <a class="pull-right">@ViewBag.User.RoleName</a>
                    </li>
                    <li class="list-group-item">
                        <b>Email</b> <a class="pull-right">@ViewBag.User.Email</a>
                    </li>
                    <li class="list-group-item">
                        <b>Contact</b> <a class="pull-right">@ViewBag.User.Contact</a>
                    </li>
                    <li class="list-group-item">
                        <b>Address</b> <a class="pull-right">@ViewBag.User.Address</a>
                    </li>
                    <li class="list-group-item">
                        <b>Report To</b> <a class="pull-right">@ViewBag.User.ReportTo</a>
                    </li>
                    <li class="list-group-item" style="margin-top:10px;border:0px !important">

                        @if (ViewBag.IsAdmin == true)
                        {
                            <a href="/User/All" class="btn btn-primary btn-sm pull-right">Return to Users</a>
                        }
                        &nbsp;
                        @if (ViewBag.Team == true)
                        {
                            <a style="margin-right:5px" href="/User/Hierarchy/ID=@Convert.ToString(ViewBag.UserId)" class="btn btn-success btn-sm pull-right">My Team</a>
                        }
                        @if (ViewBag.IsManager == true && ViewBag.Hide2 == false)
                        {
                            <a href="/User/New" style="margin-right:5px" class="btn btn-success btn-sm pull-right">Add Team Member</a>
                        }
                    </li>

                </ul>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
        <!-- About Me Box -->
        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title"></h3>
            </div>
            <!-- /.box-header -->
            <div class="box-body">

                <strong><i class="fa fa-list margin-r-5"></i>Scopes</strong>
                <p>
                    @foreach (var item in ViewBag.UserScopes)
                    {
                        <span class="label label-success">@item.DefinationName</span>
                    }
                </p>
                <hr>
                <strong><i class="fa fa-list margin-r-5"></i> Markets</strong>
                <p>
                    @foreach (var item in ViewBag.UserCities)
                    {
                        <span class="label label-info" style="margin-top:5px !important">@item.CityName</span>
                    }
                </p>
                <hr>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
        <!-- /.box -->
    </div>
    <!-- /.col -->
    <div class="col-md-9">
        @if (ViewBag.Hide2 == false)
        {
            <div class="nav-tabs-custom">
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#Profile" data-toggle="tab">Profile</a></li>
                    <li><a href="#Password" data-toggle="tab">Change Password</a></li>
                    @if (ViewBag.Hide == false)
                {
                        <li><a href="#Project" data-toggle="tab">Projects</a></li>
                        <li><a href="#Region" data-toggle="tab">Regions</a></li>
                        <li><a href="#Scope" data-toggle="tab">Scopes</a></li>
                        <li><a href="#Client" data-toggle="tab">Clients</a></li>
                        <li><a href="#DefinationTypes" data-toggle="tab">Defination Types</a></li>
                        <li><a href="#Permission" data-toggle="tab">Permissions</a></li>
                  
                        <li><a href="#DateRight" data-toggle="tab">Date Rights</a></li>
                        @*<li><a href="#UERight" data-toggle="tab">UE Rights</a></li>*@
                    }
                </ul>
                <div class="tab-content">
                    <div class="active tab-pane" id="Profile">
                        @using (Html.BeginForm("", "", new { back = ViewBag.tit }, FormMethod.Post, new { id = "frm-User", enctype = "multipart/form-data" }))
                        {
                            <div class="box box-solid">
                                <div class="box-header with-border" style="background-color:#3c8dbc">
                                    @*<h3 class="box-title" style="color:white">@ViewBag.tit User Profile</h3>*@
                                    <div class="pull-right" style="margin-right:5px">
                                        <div @*class="col-md-offset-2 col-md-10"*@>
                                            <input type="submit" value="Save" id="ResourceSubmit" class="btn btn-success btn-flat" />
                                            <a href="#" onclick="window.history.back();return false" class="btn btn-danger btn-flat">Cancel</a>
                                        </div>

                                    </div>
                                </div>
                                <!-- /.box-header -->
                                <div class="box-body">
                                    <div class="row">
                                        <div class="col-sm-12 form-row">


                                            @*@Html.AntiForgeryToken()*@
                                            @Html.HiddenFor(m => m.UserId) @*/Siddique/*@
                                            <div>
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                <div class="row">
                                                    <div class="col-md-3">

                                                        <div class="form-group">
                                                            @Html.Label("Title", htmlAttributes: new { @class = "control-label", data_required = "yes" })
                                                            @Html.DropDownListFor(m => m.Title, new SelectList(ViewBag.Titles, "Value", "Text",Model.Title), new { @class = "form-control", name = "Title", data_name = "Title", id = "Title" })


                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">

                                                        <div class="form-group">
                                                            @Html.Label("First Name *", htmlAttributes: new { @class = "control-label" })

                                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            @Html.Label("Last Name *", htmlAttributes: new { @class = "control-label" })
                                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            @Html.Label("Gender *", htmlAttributes: new { @class = "control-label" })
                                                            <div class="input-group">
                                                                <div class="input-group-addon">
                                                                    <i class="fa fa-user"></i>
                                                                </div>
                                                                @Html.DropDownListFor(m => m.Gender, new List<SelectListItem>{
                                                                       new SelectListItem{ Text="Male", Value="Male"},
                                                                       new SelectListItem{ Text="Female", Value="Female"}
                                                                    }, "--- Select ---", new { @class = "form-control", name = "Gender", data_name = "Gender", id = "Gender" })
                                                                
                                                            </div>
                                                            <span id="gender_error" class="error"> This value is required</span>

                                                        </div>
                                                    </div>
                                                    @if (ViewBag.Hide == false)
                                                    {
                                                        <div class="col-md-3">
                                                            <div class="form-group">
                                                                @Html.Label("Company *", htmlAttributes: new { @class = "control-label" })
                                                                @Html.DropDownListFor(m => m.CompanyId, ViewBag.Clients2 as List<SelectListItem>, new { @class = "form-control select", @id = "CompanyId", @name = "CompanyId", required = "required"})
                                                                <span id="company_error" class="error"> This value is required</span>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="col-md-3">
                                                            <div class="form-group">
                                                                @Html.Label("Company *", htmlAttributes: new { @class = "control-label" })
                                                                @Html.DropDownListFor(m => m.CompanyId, ViewBag.Clients2 as List<SelectListItem>, new { @class = "form-control select", @id = "CompanyId", @name = "CompanyId", required = "required", @data_parsley_min = "1", @data_parsley_required_message = "You must enter at least one Detail.", @disabled = "disabled" })
                                                                <span id="company_error" class="error"> This value is required</span>
                                                            </div>
                                                        </div>
                                                    }
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            @Html.Label("Designation", htmlAttributes: new { @class = "control-label" })
                                                            <div class="">
                                                                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control", @name = "Designation", @data_parsley_required = "false" } })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            <label for="HiringDate" class="control-label">Hiring Date</label>
                                                            <div class="input-group">
                                                                <div class="input-group-addon">
                                                                    <i class="fa fa-calendar"></i>
                                                                </div>
                                                                <input data-required="no" type="text" value="@DateTime.Now.ToString("MM/dd/yyyy")" tabindex="4" class="form-control UserLiveDate" style="" id="HiringDate" name="HiringDate" data-name="HiringDate">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="control-label">Profile Picture</label>
                                                        @*<div class="col-md-12">
                                                                @if (Model == null)
                                                                {
                                                                    <div id="imagePreview"></div>

                                                                }
                                                                else
                                                                {
                                                                    <div class="form-control" id="imagePreview"><img src="@Model.Picture" height="65" width="65" /></div>
                                                                }
                                                            </div>*@
                                                        <div class="input-group">
                                                            <div class="input-group-addon">
                                                                <i class="fa fa-image"></i>
                                                            </div>
                                                            <input id="uploadFile" type="file" accept="image/*" name="image" class="img form-control" />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    @if (ViewBag.Hide == false)
                                                    {
                                                        <div class="col-md-3">
                                                            <div class="form-group">
                                                                @Html.Label("Email *", htmlAttributes: new { @class = "control-label" })
                                                                <div>
                                                                    @*<div class="input-group-addon">
                                                                            <i class="fa fa-envelope"></i>
                                                                        </div>*@
                                                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = "required", data_parsley_type = "email" } })
                                                                </div>
                                                                <span id="EmailMsg" style="color: #B94A48 "></span>
                                                                @Html.ValidationMessageFor(m => m.Email)
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="col-md-3">
                                                            <div class="form-group">
                                                                @Html.Label("Email *", htmlAttributes: new { @class = "control-label" })
                                                                <div>
                                                                    @*<div class="input-group-addon">
                                                                            <i class="fa fa-envelope"></i>
                                                                        </div>*@
                                                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = "required", data_parsley_type = "email", @disabled = "disabled" } })
                                                                </div>
                                                                <span id="EmailMsg" style="color: #B94A48 "></span>
                                                                @Html.ValidationMessageFor(m => m.Email)
                                                            </div>
                                                        </div>
                                                    }
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Contact, htmlAttributes: new { @class = "control-label" })
                                                            <div>
                                                                @*<div class="input-group-addon">
                                                                        <i class="fa fa-phone"></i>
                                                                    </div>*@
                                                                @Html.EditorFor(model => model.Contact, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">

                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                                                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", required = "required" })

                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-3">

                                                        <div class="form-group">
                                                            <div class="form-group">
                                                                @Html.Label("Latitude", htmlAttributes: new { @class = "control-label" })
                                                                <div class="input-group">
                                                                    <div class="input-group-addon">
                                                                        <i class="fa fa-map-pin"></i>
                                                                    </div>
                                                                    @Html.EditorFor(model => model.homeLatitude, new { htmlAttributes = new { @class = "form-control" } })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            @Html.Label("Longitude", htmlAttributes: new { @class = "control-label" })
                                                            <div class="input-group">
                                                                <div class="input-group-addon">
                                                                    <i class="fa fa-map-pin"></i>
                                                                </div>
                                                                @Html.EditorFor(model => model.homeLongitude, new { htmlAttributes = new { @class = "form-control" } })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3"></div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-3">
                                                        @if (ViewBag.Hide == false)
                                                        {
                                                            @Html.Label("User Name *", htmlAttributes: new { @class = "control-label" })
                                                            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                                            @Html.ValidationMessageFor(m => m.UserName)
                                                            <span id="UserNameMsg" style="color: #B94A48 "></span>
                                                        }
                                                    </div>

                                                    @*@if (Model == null)
                                                                   {
                                                        <!--Password-->
                                                                       <div class="col-md-3">

                                                                           <div class="form-group ">
                                                                               @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                                                                               @Html.PasswordFor(model => model.Password, new { @class = "form-control", required = "required", @id = "Password" })
                                                                           </div>
                                                                       </div>
                                                        <!--Confirm Password-->
                                                                       <div class="col-md-3">
                                                                           <div class="form-group">
                                                                               @Html.Label("Confirm Password", htmlAttributes: new { @class = "control-label" })
                                                                               @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", required = "required", data_parsley_equalto = "#Password", parsley_error_message = "Confirm Password not match" })<!-- data_required_message = "Confirm Password not match" -->
                                                                           </div>
                                                                       </div>
                                                                   }*@
                                                </div>

                                                <div style="margin-top:10px" class="row">
                                                    <div class="col-md-3">
                                                        @if (ViewBag.Hide == false)
                                                        {
                                                            <div class="form-group">
                                                                @Html.Label("User Role *", htmlAttributes: new { @class = "control-label" })
                                                                @Html.DropDownListFor(m => m.RoleId, ViewBag.Roles as List<SelectListItem>, new { @class = "form-control select", required = "required" })
                                                            </div>
                                                        }
                                                    </div>
                                                    <div class="col-md-3">
                                                        @if (ViewBag.Hide == false)
                                                        {
                                                            <div class="form-group">
                                                                @Html.Label("Report To", htmlAttributes: new { @class = "control-label" })
                                                                @Html.DropDownListFor(m => m.ReportToId, new SelectList( ViewBag.Reports,"Value","Text", Model.ReportToId), new { @class = "form-control select", id = "ReportToId", required = "required", data_name = "ReportToId", data_row = "r0", style = "", name = "ReportToId" })
                                                            </div>
                                                        }
                                                    </div>
                                                    @*<div class="col-md-3">
                                                            <div class="form-group">
                                                                @Html.Label("Color", htmlAttributes: new { @class = "control-label" })
                                                                <input type="color" id="Color" name="Color" class="form-control" value="">
                                                            </div>
                                                        </div>*@
                                                </div>

                                            </div>

                                        </div>
                                    </div>
                                </div>
                                <!-- /.box-body -->
                            </div>
                        }
                    </div>
                    <div class="tab-pane" id="Password">
                        @using (Html.BeginForm("UpdatePassword", "User", FormMethod.Post, new { id = "frm-password", enctype = "multipart/form-data" }))
                        {
                            <div class="box-header with-border" style="background-color:#3c8dbc">
                                <div class="pull-right" style="margin-right:5px">
                                    <div @*class="col-md-offset-2 col-md-10"*@>
                                        <button type="reset" id="btn-reset" class="btn btn-default">Reset</button>

                                        <button type="submit" class="btn btn-success">Save</button>
                                    </div>

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="alert alert-success alert-dismissible" id="msg">
                                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                                        <div id="pan-msg"></div>
                                    </div>


                                    <div class="box-body">
                                        <div class="row">
                                            <div class="col-sm-12 form-row">
                                                @Html.HiddenFor(m => m.UserId) 
                                                @Html.AntiForgeryToken()
                                                <div class="form-horizontal">
                                                    <!--Password-->
                                                    <div class="form-group ">
                                                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-10">
                                                            @Html.Password("Password", null, new { @class = "form-control", required = "required", @id = "Password1" })
                                                        </div>
                                                    </div>
                                                    <!--Confirm Password-->
                                                    <div class="form-group">
                                                        @Html.Label("Confirm Password", htmlAttributes: new { @class = "control-label col-md-2" })
                                                        <div class="col-md-10">
                                                            @Html.Password("ConfirmPassword", null, new { @class = "form-control", required = "required", data_parsley_equalto = "#Password1" })<!-- data_required_message = "Confirm Password not match" -->
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>

                            </div>
                        }
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="Project">

                        <div class="row">
                            <div class="col-sm-12">
                                <div id="pan-Scopes">
                                    @if (ViewBag.Projects != null)
                                    {

                                        <ol> <input style="margin-left:-15px !important;" type="checkbox" id="PAll" />&nbsp; Select All</ol>

                                        <div id="tree-Projects" style="margin-top:4px;">

                                            <ul id="tree-Projects-data">

                                                @foreach (var item in ViewBag.Projects)
                                                {
                                                    <li Id="@item.ProjectId"> @item.ProjectName</li>
                                                }
                                            </ul>
                                        </div>
                                    }

                                </div>

                            </div>

                        </div>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="Region">

                        <div class="row">

                            <div class="col-sm-12">
                                <div id="pan-Region">
                                    <ol><input style="margin-top:2px !important;margin-left:-15px !important;" type="checkbox" id="RAll" />&nbsp; Select All  </ol>
                                    <div id="region-tree" style="margin-top:-20px !important;">
                                        <ul>
                                            @if (ViewBag.Region != null)
                                            {
                                                foreach (var item in ViewBag.Region)
                                                {
                                                    <li Id="r-@item.DefinationId">

                                                        @item.DefinationName

                                                        @{
                                                            var subItems = (ViewBag.Cities as ICollection<AD_Defination>).Where(m => m.PDefinationId.Equals(item.DefinationId)).ToList();
                                                            if (subItems.Count > 0)
                                                            {
                                                                <ul>
                                                                    @foreach (var sub in subItems)
                                                                    {
                                                                        <li Id="sub-@sub.DefinationId">@sub.DefinationName</li>
                                                                    }

                                                                </ul>
                                                            }
                                                        }

                                                    </li>
                                                                }
                                                            }
                                        </ul>
                                        <input type="text" style="visibility:hidden" id="txt-selectedRegion" />
                                    </div>


                                    <!---- Region  -->
                                    @*<div id="region-tree" style="margin-top:-20px !important;">
                                        <ul>
                                            @if (regions != null)
                                            {
                                                @GetTreeView2(regions, regions.OrderBy(m => m.PDefinationId).FirstOrDefault().PDefinationId)
                                            }
                                        </ul>
                                        <input type="text" style="visibility:hidden" id="txt-selectedRegion" />
                                    </div>*@
                                    <!---- Region End  -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="Scope">
                        <div class="row">
                            <div class="col-sm-12">
                                <div id="pan-Scopes">
                                    @if (ViewBag.Scopes != null)
                                    {
                                        <ol><input style="margin-left:-15px !important;" type="checkbox" id="SAll" />&nbsp; Select All  </ol>
                                        <div id="tree-Scopes" style="margin-top:4px;">
                                            <ul id="tree-Scopes-data">

                                                @foreach (var item in ViewBag.Scopes)
                                                {
                                                    <li Id="@item.DefinationId"> @item.DefinationName</li>
                                                }
                                            </ul>
                                        </div>
                                    }

                                </div>

                            </div>
                        </div>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="Client">
                        <div class="row">
                            <div class="col-sm-12">
                                <div id="pan-client">
                                    @if (ViewBag.Clients != null)
                                    {

                                        <ol><input style="margin-left:-15px !important;" type="checkbox" id="CAll" />&nbsp; Select All  </ol>

                                        <div id="tree-client" style="margin-top:4px;">
                                            <ul id="tree-client-data">

                                                @foreach (var Client in ViewBag.Clients)
                                                {
                                                    <li Id="@Client.ClientId"> @Client.ClientName</li>
                                                }
                                            </ul>
                                        </div>
                                    }

                                </div>

                            </div>
                        </div>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="Permission">
                        @*<div class="box-header with-border" style="background-color:#3c8dbc">
                            <div class="pull-right" style="margin-right:5px">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="button" id="btn-save" value="Save" class="btn btn-success pull-right" />
                                </div>

                            </div>
                        </div>
                        <div class="row">

                            <div class="col-sm-12">
                                <div>
                                    <div id="permission-tree">
                                        <ul>
                                            @if (permissions != null && permissions.Count() > 0)
                                            {
                                                @GetTreeView(permissions, permissions.OrderBy(m => m.Id).FirstOrDefault().ParentId)
                                            }
                                        </ul>
                                        <input type="text" style="visibility:hidden" id="txt-selected" />
                                    </div>

                                </div>
                            </div>
                        </div>*@

                        <section class="panel panel-default">
                            <header class="panel-heading font-bold flex">
                                
                                <ul class="nav nav-tabs">
                                    <li class="active"><a href="#modules" data-toggle="tab">Modules</a></li>
                                    <li><a href="#notifications" data-toggle="tab">Alerts</a></li>
                                </ul>
                            </header>

                            <div class="panel-body">
                                <div class="tab-content">
                                    <div class="tab-pane fade in active" id="modules">
                                        <div class="row">

                                            <div class="col-sm-12">
                                                <div>
                                                    <div id="permission-tree">
                                                        <ul>
                                                            @if (permissions != null && permissions.Count() > 0)
                                                            {
                                                                @GetTreeView(permissions, permissions.OrderBy(m => m.Id).FirstOrDefault().ParentId)
                                                            }
                                                        </ul>
                                                        <input type="text" style="visibility:hidden;position:absolute; z-index:-1;" id="txt-selected" />
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel-footer">
                                            <button  id="btn-save" class="btn btn-info">Save</button>
                                        </div>

                                    </div>
                                    <div class="tab-pane fade" id="notifications">
                                        <div class="notifications-settings-screen">
                                            <ul class="nav flex" id="NotificationNav">

                                            </ul>
                                            <div class="tab-content" id="TabBody">

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>



                    </div>



                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="DefinationTypes">
                      
                        <div class="row">

                            <div class="col-sm-12">
                                <div id="pan-DefinationType">
                                    <ol><input style="margin-top:2px !important;margin-left:-15px !important;" type="checkbox" id="DAll" />&nbsp; Select All  </ol>
                                    <div id="DefinationType-tree" style="margin-top:-20px !important;">
                                       <ul>
                                           @if (DefinationType != null && DefinationType.Count() > 0)
                                           {
                                               @GetTreeView3(DefinationType, DefinationType.OrderBy(m => m.DefinationTypeId).FirstOrDefault().PDefinationTypeId)
                                              
                                           }
                                       </ul>
                                     
                                        <input type="text" style="visibility:hidden" id="txt-selectedDefinationType" />
                                    </div>


                                    <!---- Region  -->
                                    @*<div id="region-tree" style="margin-top:-20px !important;">
                            <ul>
                                @if (regions != null)
                                {
                                    @GetTreeView2(regions, regions.OrderBy(m => m.PDefinationId).FirstOrDefault().PDefinationId)
                                }
                            </ul>
                            <input type="text" style="visibility:hidden" id="txt-selectedRegion" />
                        </div>*@
                                    <!---- Region End  -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="DateRight">
                        @using (Html.BeginForm("New", "DateRight", FormMethod.Post, new { Id = "frm-date-rights" }))
                        {
                            <div class="box-header with-border" style="background-color:#3c8dbc;margin-bottom:15px">
                                <div class="pull-right" style="margin-right:5px;">
                                    <div @*class="col-md-offset-2 col-md-10"*@>
                                        <input type="reset" value="Reset" class="btn btn-default" />
                                        <input type="submit" value="Save" class="btn btn-success" />
                                    </div>

                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-12">


                                    <div class="form-horizontal">
                                        <div class="form-group">
                                            @Html.Label("Days Forward", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.HiddenFor(m => m.UserId, new { Value = ViewBag.UserId })
                                                @Html.EditorFor(model => model.DaysForward, new { htmlAttributes = new { @class = "form-control", Required = "Required", data_parsley_type = "number" } })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.Label("DaysBack", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.TextBoxFor(model => model.DaysBack, null, new { @class = "form-control", Required = "Required", data_parsley_type = "number" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            @Html.Label("IsActive", htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-10">
                                                @Html.CheckBoxFor(model => model.IsActive)
                                            </div>
                                        </div>


                                    </div>


                                </div>
                            </div>
                        }
                    </div>
                    @*<div class="tab-pane" id="UERight">
                        @using (Html.BeginForm("", "", FormMethod.Post, new { Id = "frm-ue-rights" }))
                        {
                           
                        }
                    </div>*@
                </div>
                <!-- /.tab-content -->
            </div>
                                                            }
        <!-- /.nav-tabs-custom -->
    </div>
    <!-- /.col -->
</div>
<input type="hidden" id="PIds" value="@ViewBag.PIds" />
<input type="hidden" id="DIds" value="@ViewBag.DIds" />

@section scripts{
    <script src="~/Content/js/Plugins/notify/js/notify.js"></script>
    <link href="~/Content/js/Plugins/notify/css/notify.css" rel="stylesheet" />
    @*<script src="~/AdminLTE/bootstrap/js/twitter-bootstrap.min-3.0.0.js"></script>*@
    <script src="~/Content/js/Plugins/validation/parsley.min.js"></script>
    @Scripts.Render("~/AdminLTE/plugins/datepicker/js")
    <script src="~/Content/js/user-details.js"></script>
    <script>
        $(function () {
            $('#frm-date-rights').parsley();
        });
    </script>
    <script src="~/Content/js/Plugins/AjaxLoading/loading.js"></script>
    <script src="~/AdminLTE/plugins/select2/js/select2.js"></script>
    <script>
        $(function () {
            $('#frm-User').parsley();
            $('#RoleId').val('@ViewBag.RoleId');

            $('#UserName').blur(function () {
                IsExist('#UserName', 'byUserName', $(this).val());
            });

            $('#Email').blur(function () {
                IsExist('#Email', 'byEmail', $(this).val());
            });

            function IsExist(selector,filter, value) {
                $.ajax({
                    url: '/User/IsExist?filter=' + filter + '&value=' + value,
                    success: function (res) {
                        if (res == 'True') {
                            $(selector + 'Msg').text('Already Exist ' + value)
                            $(selector ).val('');
                        } else {
                            $(selector+'Msg').text('')
                        }
                    },
                    error:function(err){
                        alert(err.statusText);
                    }
                });
            }

            $("#uploadFile").on("change", function()
            {
                var files = !!this.files ? this.files : [];
                if (!files.length || !window.FileReader) return; // no file selected, or no FileReader support

                if (/^image/.test( files[0].type)){ // only image file
                    var reader = new FileReader(); // instance of the FileReader
                    reader.readAsDataURL(files[0]); // read the local file

                    reader.onloadend = function () { // set image data as background of div
                        $("#imagePreview").empty();
                        $("#imagePreview").css("background-image", "url("+this.result+")");
                    }
                }
            });
        });
        //Reset
        function Reset(){
            var Users =  @Html.Raw(Json.Encode(ViewBag.ReportTo));
            var Id = '@ViewBag.Id';
            $('form').get(0).reset();
            $("#CompanyId").val(Id);
            // $("#CompanyId").attr("disabled", true);
        }
        ///add if id exist
        var Users =  @Html.Raw(Json.Encode(ViewBag.ReportTo));
        var Id = '@ViewBag.Id';
        //if (Id != 0) {
        //    $("#CompanyId").val(Id);
        //    //  $("#CompanyId").attr("disabled", true);
        //    $('#ReportToId').empty();
        //    $('#ReportToId').append(' <option  value="0">-Report To-</option></select>');
        //    $.each(Users, function (i,item) {

        //        if (item.CompanyId.toString() == Id) {
        //            $('#ReportToId').append(' <option value=' + item.Id + '>' + item.FirstName+" "+item.LastName + '</option></select>');
        //        }
        //    });
        //}
        //else{
        //    $('#ReportToId').empty();
        //    $('#ReportToId').append(' <option  value="0">-Report To-</option></select>');
        //}
        $('#CompanyId').on('change', function() {
            if(!(this.value=="0")){
                $("#company_error").removeClass("error_show").addClass("error");
                return true;
            }
            else{
                $("#company_error").removeClass("error").addClass("error_show");
                return false;
            }
        });
        $('#Gender').on('change', function() {
            if(!(this.value=="")){
                $("#gender_error").removeClass("error_show").addClass("error");
                return true;
            }
            else{
                $("#gender_error").removeClass("error").addClass("error_show");
                return false;
            }
        });
        ///submit form
        $(document).on('submit', '#frm-User', function (evt) {
            if($("#CompanyId").val()=="0" ){
                $("#company_error").removeClass("error").addClass("error_show");
                return false;
            }
            else{
                $("#company_error").removeClass("error_show").addClass("error");
            }
            if($("#Gender").val()=="" ){
                $("#gender_error").removeClass("error").addClass("error_show");
                return false;
            }
            else{
                $("#gender_error").removeClass("error_show").addClass("error");
            }
            var hit = 0;
            if (hit == 1) {
                $('#save input').each(function () {
                    var textBox = $.trim($(this).val())
                    var required = $(this).attr('data_required');
                    console.log($(this).attr('data_name'));
                    if (required != 'no' || required != undefined) {
                        if (textBox == "") {
                            $(this).addClass('required');
                            hit = 1;
                            $.notify('Enter Required Fields', { type: 'danger', color: "#ffffff", background: "#D44950", blur: 0.6, delay: 0, });
                            return false;
                        } else {
                            $(this).removeClass('required');
                        }
                    }
                });

            }
            var formData = new FormData();
            //var totalFiles = document.getElementById("file").files.length;
            //for (var i = 0; i < totalFiles; i++) {
            //    var file = document.getElementById("uploadFile").files[i];

            //    formData.append("file", file);
            //}


            //$("#tbl-def tr").each(function (i) {
            //    i = i - 1;
            //    $("input", this).each(function (j) {
            //        var name = $(this).attr('data-name');
            //        $(this).attr('name', '[' + i + '].' + name);
            //    });

            //    $("select", this).each(function (j) {
            //        var name = $(this).attr('data-name');
            //        $(this).attr('name', '[' + i + '].' + name);
            //    });
            //});

            //$("#tbl-clnt tr").each(function (i) {
            //    i = i - 1;
            //    $("input", this).each(function (j) {
            //        var name = $(this).attr('data-name');
            //        $(this).attr('name', '[' + i + '].' + name);
            //    });

            //    $("select", this).each(function (j) {
            //        var name = $(this).attr('data-name');
            //        $(this).attr('name', '[' + i + '].' + name);
            //    });
            //});
            if (hit == 0) {
                //var data = $(this).serialize();
                // formData = $(this).serialize();
                evt.preventDefault();
                // $("#CompanyId").attr("disabled", false);
                var formData = new FormData($(this)[0]);
                $.ajax({
                    url: '/User/New',
                    type: 'POST',
                    data: formData,
                    async: false,
                    cache: false,
                    contentType: false,
                    enctype: 'multipart/form-data',
                    processData: false,
                    success: function (res) {

                        if (res.Status == 'success') {

                            $.notify(res.Message, { type: res.Status, color: "#ffffff", background: "#20D67B", blur: 0.6, delay: 0, });
                            $('form')[0].reset();
                            $("#CompanyId").val(Id);
                            //    $("#CompanyId").attr("disabled", true);
                            location.reload();
                        } else {
                            $.notify(res.Message, { type: res.Status, color: "#ffffff", background: "#D44950", blur: 0.6, delay: 0, });

                        }
                    },
                    error: function (err) {
                        $.notify(err.Message, { type: res.Status, color: "#ffffff", background: "#D44950", blur: 0.6 });
                    }
                });
                // $('form').get(0).reset();
                return false;
            }
            return false;
        });
        ///onchange Company Id in case of no company Id
        $("#CompanyId").on("change", function () {
            var value = $('#CompanyId').val();
            $('#ReportToId').empty();
            $('#ReportToId').append(' <option  value="0">-Report To-</option></select>');
            $.each(Users, function (i,item) {
                if (item.CompanyId.toString()==value) {
                    $('#ReportToId').append(' <option value=' + item.Id + '>' + item.FirstName+" "+item.LastName+ '</option></select>');
                }
            });
        });
    </script>
}
@section style{
    <link href="~/Content/js/Plugins/validation/parsley.css" rel="stylesheet" />
    <style>
        #imagePreview {
            width: 65px;
            height: 65px;
            background-position: center center;
            background-size: cover;
            -webkit-box-shadow: 0 0 1px 1px rgba(0, 0, 0, .3);
            display: inline-block;
        }
    </style>
}
<link href="~/Content/box.css" rel="stylesheet" />
<link href="~/Content/js/Plugins/MultiselectBootstrap/css/bootstrap-multiselect.css" rel="stylesheet" />
<link href="~/AdminLTE/plugins/jquery-ui/jquery-ui.css" rel="stylesheet" />
@Styles.Render("~/AdminLTE/plugins/datepicker/css")

@*///permissions*@

<script src="~/Content/js/Plugins/treeView/ui.custom.js"></script>
<script src="~/Content/js/Plugins/treeView/dynatree.js"></script>
<script>
    $(function () {
        var arr = [];
        var Cients = [];
        var SelectedCities = [];
        var SelectedScopes = [];
        var SelectedProjects = [];
        var SelectedDefinationTypes = [];
        //  $('#pan-client').hide();
        //  $('#pan-Region').hide();

        $("#permission-tree").dynatree({
            checkbox: true,
            // selectMode: 3, // 1:single, 2:multi, 3:multi-hier
            onSelect: function (flag, node) {

                if (node.data.title == 'AirView') {
                    //if (node.bSelected) {
                    //    $('#pan-client').show();
                    //    $('#pan-Region').show();

                    //} else {

                    //    $('#pan-client').hide();
                    //    $('#pan-Region').hide();
                    //}
                }
                var selectedNodes = node.tree.getSelectedNodes();
                var selectedKeys = $.map(selectedNodes, function (node) {
                    return node.data.key;
                });
                arr = selectedKeys;
            }
        });


        //// clients list to tree
        $("#tree-client").dynatree({
            checkbox: true,

            onSelect: function (flag, node) {
                // get selected Clients
                var selectedNodes = node.tree.getSelectedNodes();
                var selectedKeys = $.map(selectedNodes, function (node) {
                    return node.data.key;
                });
                Cients = selectedKeys;
                //console.log(Cients);
            }
        });
        // Region list to tree
        // Region list to tree
        $('#region-tree').dynatree({
            checkbox: true,
            selectMode: 3,
            onSelect: function (flag, node) {
                debugger;
                // get selected Clients
                var selectedNodes = node.tree.getSelectedNodes();
                var selectedKeys = $.map(selectedNodes, function (node) {
                    return node.data.key;
                });
                SelectedCities = selectedKeys;
                console.log(SelectedCities);
            }
        });
        $('#DefinationType-tree').dynatree({
            checkbox: true,
            selectMode: 3,
            onSelect: function (flag, node) {
                // get selected Clients
                var selectedNodes = node.tree.getSelectedNodes();
                var selectedKeys = $.map(selectedNodes, function (node) {
                    return node.data.key;
                });
                SelectedDefinationTypes = selectedKeys;
                console.log(SelectedDefinationTypes);
            }
        });


        $('#tree-Scopes').dynatree({
            checkbox: true,
            onSelect: function (flag, node) {
                // get selected Clients
                var selectedNodes = node.tree.getSelectedNodes();
                var selectedKeys = $.map(selectedNodes, function (node) {
                    return node.data.key;
                });
                SelectedScopes = selectedKeys;
            }
        });

        $('#tree-Projects').dynatree({
            checkbox: true,
            onSelect: function (flag, node) {
                // get selected Clients
                var selectedNodes = node.tree.getSelectedNodes();
                var selectedKeys = $.map(selectedNodes, function (node) {
                    return node.data.key;
                });
                SelectedProjects = selectedKeys;
            }
        });
        $("#PAll").click(function() {

            var Check=this.checked;
            if(Check == true) {
                @foreach (var item in ViewBag.Projects)
                {
                    @:$("#tree-Projects").dynatree("getTree").selectKey('@item.ProjectId');
                                                                                                                                                                }
            }
            else{
                $("#tree-Projects").dynatree("getRoot").visit(function(node){
                    node.select(false);
                });
                //$("#tree-Projects input:checkbox").each(function () {
                //    //$(this).prop('checked', this.check);
                //});
            }
        });
        $("#RAll").click(function() {
            debugger
            var Check=this.checked;
            if(Check == true) {
                @foreach (var city in ViewBag.Region)
                {
                  @:$("#region-tree").dynatree("getTree").selectKey('r-@city.DefinationId');
                                                 }
            }
            else{

            }
        });
        $("#DAll").click(function() {
            debugger
            var Check=this.checked;
            if(Check == true) {
                @foreach (var dt in ViewBag.DefinationTypes)
                {
                    @:$("#DefinationType-tree").dynatree("getTree").selectKey('@dt.DefinationTypeId');
                                }
            }
            else{

            }
        });
        $("#SAll").click(function() {

            var Check=this.checked;
            if(Check == true) {
                @foreach (var item in ViewBag.Scopes)
                {
                    @:$("#tree-Scopes").dynatree("getTree").selectKey('@item.DefinationId');
                                                                                                                                                                                                }
            }
            else{

            }
        });
        $("#CAll").click(function() {

            var Check=this.checked;
            if(Check == true) {
                @foreach (var item in ViewBag.Clients)
                {
                 @:$("#tree-client").dynatree("getTree").selectKey('@item.ClientId');
                                                                                                                                                                                                }
            }
            else{

            }
        });
        $("#PERAll").click(function() {


            var Check=this.checked;
            if(Check == true) {
                var Role = $('#PIds').val().split(',');
                var i;
                for (i = 0; i < Role.length; ++i) {

                    $("#permission-tree").dynatree("getTree").selectKey(Role[i]);
                }
            }
            else{

            }
        });
        @if (ViewBag.UserScopes != null)
            {
                foreach (var item in ViewBag.UserScopes)
                {
                    @:$("#tree-Scopes").dynatree("getTree").selectKey('@item.DefinationId');
                                                                                                                        }

            }



        //  for select permissions
        var Role = $('#PIds').val().split(',');
        var i;
        for (i = 0; i < Role.length; ++i) {

            $("#permission-tree").dynatree("getTree").selectKey(Role[i]);
        }
        var definations = $('#DIds').val().split(',');
        var i;
        for (i = 0; i < definations.length; ++i) {

            $("#DefinationType-tree").dynatree("getTree").selectKey(definations[i]);
        }
        // for select Clients
        @if (ViewBag.UserClients!=null)
            {
                foreach (var item in ViewBag.UserClients)
                {
                 @:$("#tree-client").dynatree("getTree").selectKey('@item.ClientId');
                                                                                                                        }

            }

        // for select Projects
        @if (ViewBag.UserProjects != null)
            {
                foreach (var item in ViewBag.UserProjects)
                {
                    @:$("#tree-Projects").dynatree("getTree").selectKey('@item.ProjectId');
                                                                                                                        }

            }



        // for select Cities
           @*@if (ViewBag.DefinationTypes != null)
           {
               foreach (var dt in ViewBag.DefinationTypes)
               {

                   @:$("#DefinationTypes-tree").dynatree("getTree").selectKey('r-@dt.DefinationTypeId');
               }
               foreach (var dt in ViewBag.DefinationTypes)
               {

                   @:$("#DefinationTypes-tree").dynatree("getTree").selectKey('sub-@dt.DefinationTypeId');
               }
           }*@

        @if (ViewBag.UserCities != null)
            {
                foreach (var city in ViewBag.UserCities)
                {

                    @:$("#region-tree").dynatree("getTree").selectKey('r-@city.CityId');
                        }
     foreach (var city in ViewBag.UserCities)
                {

                    @:$("#region-tree").dynatree("getTree").selectKey('sub-@city.CityId');
                                }
            }



        // btn save
        $('#btn-save').click(function () {
            if (Cients.length == 0) {
                Cients.push(0);
            }
            $.ajax({
                url: '/permission/Byuser',
                data: { UserId: '@ViewBag.UId', PermissionIds: arr, Clients: Cients, cities: SelectedCities, Scopes: SelectedScopes, Projects: SelectedProjects ,DefinationType:SelectedDefinationTypes},
                type: 'post',
                success: function (res) {
                    window.location.reload();
                    //if(res){
                    //    $.notify('Save Successfully', { type: 'success', color: "#ffffff", background: "#009900", blur: 0.6, delay: 3000, });
                    //}
                    //else{
                    //    $.notify('Not Save', { type: 'danger', color: "#ffffff", background: "#D44950", blur: 0.6, delay: 3000, });
                    //}
                }
            });

        });

    });
</script>
<link href="~/Content/js/Plugins/treeView/skin/ui.dynatree.css" rel="stylesheet" />



<script>
    $(document).ready(function () {
        $('#Title').val(@ViewBag.UserTitle);
        // Custom Accordions
        $(document).on("click", ".acc-title", function () {
            $(this).next('.acc-body').slideToggle();
            //$(this).parents('.acc-box').siblings('.acc-box').find('.acc-body').slideUp();
        });

        // Enable Disable Checkbox Of Table On Main Checkbox Checked
        $("body").on("change", ".inbox-notification input", function () {
            if ($(this).prop('checked') == true) {
                $(this).parents('tr').find('.stop-actions').addClass('enable');
            }
            if ($(this).prop('checked') == false) {
                $(this).parents('tr').find('.stop-actions').removeClass('enable');
                $(this).parents('tr').find('input').eq(1).prop('checked', false);
                $(this).parents('tr').find('input').eq(2).prop('checked', false);
            }
        });

        /* == Render GETAlertRoleConfiguration == */
        $.ajax({
            url: "/swi/GETUserAlertConfiguration",
            type: "POST",
            data: JSON.stringify({ "KeyCode": "", "UserId": @ViewBag.UId}),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {

                /* = get unique names for the category = */
                var GetJson = JSON.stringify(result);
                var jsonOut = {};


                result.forEach(function (e, i) {

                    if (e.ParentId == 0) {
                        jsonOut[e.AlertCategoryName] = jsonOut[e.AlertCategoryName] || [];
                        jsonOut[e.AlertCategoryName].push(e);
                    }

                });
                //console.log(jsonOut);
                /* = build parent child relation for the category = */
                $.each(jsonOut, function (index, value) {
                    result.forEach(function (e, i) {
                        if(value[0].AlertCategoryId == e.ParentId)
                        {
                            jsonOut[value[0].AlertCategoryName] = jsonOut[value[0].AlertCategoryName] || [];
                            jsonOut[value[0].AlertCategoryName].push(e);
                        }

                    });
                });

                /* == render unique categories as the nav of notification == */
                var Parentkeys = Object.keys(jsonOut);
                var TempHTML = "";
                Parentkeys.forEach(function (Name, i) {

                    //console.log('Name:' + Name);
                    if (i != 0) {
                        /* == render accordions body dynamically == */
                        var jsonAccordion = {};
                        $.each(jsonOut[Name], function (index, value) {

                            jsonAccordion[value.AlertCategoryName] = jsonAccordion[value.AlertCategoryName] || [];
                            jsonAccordion[value.AlertCategoryName].push(value);

                        });
                        var AccordionBody = "";

                        $.each(jsonAccordion, function (index, value) {
                            {

                                var TableBody = "";

                                for (var x = 0; x < value.length; x++) {

                                    if(value[x].RoleId){
                                        TableBody += '<tr data-notification-config="' + value[x].AlertConfigId + '">' +
                                                        '<td class="inbox-notification switcher">' +
                                                            '<label class="switch">' +
                                                                '<input type="checkbox">' +
                                                                '<span class="slider round"></span>' +
                                                            '</label>' +
                                                        '</td>' +
                                                        '<td>  ' + value[x].Name + ' </td>' +
                                                        '<td class="stop-actions"><input type="checkbox" /></td>' +
                                                        '<td class="stop-actions"><input type="checkbox" /></td>' +
                                                    '</tr>';
                                    }

                                }



                                if(value[0].AlertConfigId!=0 || value[0].RoleId!=0){
                                    AccordionBody +=
                               '<div class="acc-box">' +
                                   '<div class="acc-title"><h4>' + value[0].AlertCategoryName.split(' ')[0] + '</h4></div>' +
                                   '<div class="acc-body" style="display: block;">' +
                                       '<table class="table table-bordered table-hover fancy-table table-striped">' +
                                           '<thead>' +
                                               '<tr>' +
                                                   '<th style="width:150px"></th>' +
                                                   '<th>Notification</th>' +
                                                   '<th style="width:300px">Push</th>' +
                                                   '<th style="width:250px">Email</th>' +
                                               '</tr>' +
                                           '</thead>' +
                                           '<tbody>' +
                                              TableBody +
                                           '</tbody>' +
                                       '</table>' +
                                   '</div>' +
                               '</div>';
                                }
                            }
                        });

                        /* == Check that there is no 0 for RoleId == */
                        $.each(jsonOut[Name], function (index, value) {

                            if(value.RoleId!=0){
                                TempHTML += '<li class=""><a href="#Notify' + Name.replace(/ /g, "_") + '" data-toggle="tab">' + Name + '</a></li>';
                                return false;
                            }

                        });

                        /* == render tab body dynamically == */
                        var TabBody = "";
                        TabBody += '<div class="tab-pane fade in" id="Notify' + Name.replace(/ /g, "_") + '">' +
                            '<div class="accordions">' +
                          AccordionBody+
                            '</div>' +
                            '<div class="panel-footer">' +
                                '<button class="btn btn-info SaveNotification">Save ' + Name + ' Alerts</button>' +
                            '</div>' +
                        '</div>';

                        $('#TabBody').append(TabBody);

                    } else {


                        /* == render accordions body dynamically == */
                        var jsonAccordion = {};
                        $.each(jsonOut[Name], function (index, value) {

                            jsonAccordion[value.AlertCategoryName] = jsonAccordion[value.AlertCategoryName] || [];
                            jsonAccordion[value.AlertCategoryName].push(value);

                        });

                        var AccordionBody = "";
                        $.each(jsonAccordion, function (index, value) {
                            {
                                var TableBody = "";

                                for (var x = 0; x < value.length; x++) {
                                    if(value[x].RoleId){
                                        TableBody += '<tr data-notification-config="' + value[x].AlertConfigId + '">' +
                                                        '<td class="inbox-notification switcher">' +
                                                            '<label class="switch">' +
                                                                '<input type="checkbox">' +
                                                                '<span class="slider round"></span>' +
                                                            '</label>' +
                                                        '</td>' +
                                                        '<td>  ' + value[x].Name + ' </td>' +
                                                        '<td class="stop-actions"><input type="checkbox" /></td>' +
                                                        '<td class="stop-actions"><input type="checkbox" /></td>' +
                                                    '</tr>';
                                    }
                                }

                                if(value[0].AlertConfigId!=0 || value[0].RoleId!=0){
                                    AccordionBody +=
                               '<div class="acc-box">' +
                                   '<div class="acc-title"><h4>' + value[0].AlertCategoryName.split(' ')[0] + '</h4></div>' +
                                   '<div class="acc-body" style="display: block;">' +
                                       '<table class="table table-bordered table-hover fancy-table table-striped">' +
                                           '<thead>' +
                                               '<tr>' +
                                                   '<th style="width:150px"></th>' +
                                                   '<th>Notification</th>' +
                                                   '<th style="width:300px">Push</th>' +
                                                   '<th style="width:250px">Email</th>' +
                                               '</tr>' +
                                           '</thead>' +
                                           '<tbody>' +
                                              TableBody +
                                           '</tbody>' +
                                       '</table>' +
                                   '</div>' +
                               '</div>';
                                }

                            }
                        });

                        var Status = "";
                        /* == Check that there is no 0 for RoleId == */
                        $.each(jsonOut[Name], function (index, value) {

                            if(value.RoleId!=0){
                                TempHTML += '<li class="active"><a href="#Notify' + Name.replace(/ /g, "_") + '" data-toggle="tab">' + Name + '</a></li>';
                                Status = "active";
                                return false;
                            }

                        });

                        /* == render tab body dynamically == */
                        var TabBody = "";
                        TabBody += '<div class="tab-pane fade in '+Status+'" id="Notify' + Name.replace(/ /g, "_") + '">' +
                            '<div class="accordions">' +
                            AccordionBody+
                            '</div>' +
                            '<div class="panel-footer">' +
                                '<button class="btn btn-info SaveNotification">Save ' + Name + ' Alerts</button>' +
                            '</div>' +
                        '</div>';

                        $('#TabBody').append(TabBody);
                    }

                    $('#NotificationNav').html(TempHTML);

                });

                /* == IF no permission is granted == */
                if(TempHTML==''){
                    TempHTML += '<li class="active"> Permission Not Available </li>';
                    $('#NotificationNav').html(TempHTML);
                }

                /* == Checked the subscribed checkbox == */
                result.forEach(function (e, i) {

                    if(e.AlertConfigId!=0){
                        if(e.IsSubscribed){
                            $('tr[data-notification-config='+e.AlertConfigId+']').find('input').eq(0).prop("checked", true);
                            $('tr[data-notification-config='+e.AlertConfigId+']').find('td').eq(2).addClass('enable');
                            $('tr[data-notification-config='+e.AlertConfigId+']').find('td').eq(3).addClass('enable');
                        }

                        if(e.IsPushAlertRequired){
                            $('tr[data-notification-config='+e.AlertConfigId+']').find('input').eq(1).prop("checked", true);
                        }

                        if(e.IsEmailAlertRequired){
                            $('tr[data-notification-config='+e.AlertConfigId+']').find('input').eq(2).prop("checked", true);
                        }
                    }



                });

                //$('.acc-body').slideToggle();
            }


        });

        $(document).on('click', '.SaveNotification', function () {
            //active panel $('.tab-pane.fade.in.active').eq(1).find('tr[data-notification-config]')
            var ConfigLength = $('.tab-pane.fade.in.active').eq(1).find('tr[data-notification-config]').length;
            var ModelArray = [];
            for (var x = 0; x < ConfigLength; x++) {
                var ConfigId = $('.tab-pane.fade.in.active').eq(1).find('tr[data-notification-config]').eq(x).attr('data-notification-config');
                var IsSubscribeValue = $('.tab-pane.fade.in.active').eq(1).find('tr[data-notification-config]').eq(x).find('input').eq(0).is(":checked");
                var IsPushValue = $('.tab-pane.fade.in.active').eq(1).find('tr[data-notification-config]').eq(x).find('input').eq(1).is(":checked");
                var IsEmailValue = $('.tab-pane.fade.in.active').eq(1).find('tr[data-notification-config]').eq(x).find('input').eq(2).is(":checked");

                var Model = {
                    AlertConfigId: ConfigId,
                    IsSubscribed: IsSubscribeValue,
                    IsPushAlertRequired: IsPushValue,
                    IsEmailAlertRequired: IsEmailValue,
                    UserId: @ViewBag.UId,
                };

                ModelArray.push(Model);
            }
            //console.log('----ModelArray');
            console.log(ModelArray);
            //process model via AJAX

            $.ajax({
                url: window.location.origin + '/swi/POSTUserAlertConfiguration',
                type: "POST",
                data: JSON.stringify(ModelArray),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    if(result.Status == "true"){
                        swal("", result.Message, "success");
                    }
                    else{
                        swal("", "Error Occured!", "error");
                    }

                }
            });


        });
    });
</script>