@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_SmartAdmin.cshtml";
    var ProjectId = ViewBag.Id;
    string CookiesIdentifier = ViewBag.UserId + "_" + ViewBag.Id;
    var Entity = TempData["ProjectEntity"] as AirView.DBLayer.Security.Entities.Sec_UserProjects;
    TempData.Keep("ProjectEntity");
}

@*<link href="https://adminlte.io/themes/AdminLTE/bower_components/bootstrap-daterangepicker/daterangepicker.css" rel="stylesheet" />*@
<link href="~/Content/js/Plugins/MultiselectBootstrap/css/bootstrap-multiselect.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/3.4.5/select2.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.8.5/css/selectize.default.css">
<link href="~/Content/js/Plugins/validation/parsley.css" rel="stylesheet" />
<link rel="stylesheet" href="https://angular-ui.github.io/ui-select/dist/select.css">
<link href="https://www.jqueryscript.net/css/jquerysctipttop.css" rel="stylesheet" type="text/css">
<link href="~/Areas/Project/Content/Project/groupMultiSelect.css" rel="stylesheet" />
<link href="~/Areas/Project/Content/Project/Style.css" rel="stylesheet" />
<script src="~/Content/js/Plugins/AjaxLoading/loading.js"></script>
<link href="~/Areas/Project/Content/skin/skin/ui.dynatree.css" rel="stylesheet" />
<link rel="stylesheet" href="~/Areas/Project/Content/stylesR/daterangepicker.css">
<link href="~/Areas/Project/Content/Drop-Down-Combo-Tree/style.css" rel="stylesheet" />
<link href="https://cdn.rawgit.com/Eonasdan/bootstrap-datetimepicker/e8bddc60e73c1ec2475f827be36e1957af72e2ea/build/css/bootstrap-datetimepicker.css" rel="stylesheet" />

@*<link rel="stylesheet" href="~/Areas/Project/Content/stylesR/multidatepicker.css">*@
<link href="~/AdminLTE/plugins/sweetalert/sweetalert.css" rel="stylesheet" />
<script src="~/AdminLTE/plugins/sweetalert/sweetalert.js"></script>

<script src="~/Content/js/ui-bootstrap-tpls-0.13.0.js"></script>

<script src="~/Areas/Project/Content/ScriptR/vendor.js"></script>
<script src="~/Areas/Project/Content/ScriptR/multidaterangepicker.js"></script>
<script src="~/AdminLTE/plugins/datatables/js/jquery.dataTables.js"></script>
<script src="~/SmartAdmin/js/plugin/datatables/dataTables.colVis.min.js"></script>
<script src="~/SmartAdmin/js/plugin/datatables/dataTables.tableTools.min.js"></script>
<script src="~/SmartAdmin/js/plugin/datatables/dataTables.bootstrap.min.js"></script>
<script src="~/SmartAdmin/js/plugin/datatable-responsive/datatables.responsive.min.js"></script>
<script>
    var dt = $("#workLogHisotryTable").dataTable({
        "columnDefs": [
                   { "width": "78px", "targets": 0 },
                        { "width": "442px", "targets": 2 }
        ]
    }).api();
    var UserSerachValue = "";
</script>
<style>
    table#MapViewInfoWindow {
        border-collapse: collapse;
    }

    table#MapViewInfoWindow {
        border: 1px solid black;
    }

    .MVInfo {
        border: 1px solid black;
    }

    .MVInfoPadding {
        padding: 5px;
    }

    .sweet-alert {
        z-index: 100000000000;
    }

    option:checked {
        display: none;
    }

    .comboTreeWrapper {
        position: relative;
        text-align: left !important;
        width: 150px;
    }

    div.comboTreeDropDownContainer {
        z-index: 1;
    }

    .calendar .calendar-table {
        height: 250px;
        width: 250px;
    }

    .options {
        z-index: 2 !important;
    }

    .fc-content {
        margin-top: -12px;
    }

    span#sizing-addon2 {
        display: table-cell;
        height: 30px;
        padding: 5px 10px;
    }

    .input-group-sm {
        display: table;
    }

    .modal-body {
        position: relative;
        padding: 5px 20px 20px !important;
    }

    [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x- ng-cloak {
        display: none !important;
    }

    .daterangepicker {
        z-index: 10000000001 !important;
    }


    /*.multiselect-selected-text {
            font-size: 10px !important;
        }

        .multiselect {
            width: 100px;
        }*/
    /*.dd-item > button {
            margin-top: 16px !important;
        }*/
    .dd-item > button {
        /*margin: 0;*/
        margin-left: 15px;
        font-size: 24px;
        height: 24px;
        margin-top: 15px !important;
    }

    #regionviewchart > .canvasjs-chart-container > .canvasjs-chart-canvas {
        width: 100%;
    }

    .canvasjs-chart-container {
        width: 100%;
    }

    #legend {
        font-family: Arial, sans-serif;
        background: #fff;
        padding: 10px;
        right: 10px;
        top: 50%;
        position: absolute;
        border: 3px solid #000;
        transform: translateY(-50%);
        max-height: 270px;
        max-width: 170px;
        overflow: auto;
        z-index: 200;
        /*2000000000000*/
    }

    /*.map-filters {
        position: absolute;
        left: 0;
        top: 8px;
        bottom: auto !important;
        width: calc(100% - 40px);
        z-index: 200;
    }*/

    #legend3 {
        font-family: Arial, sans-serif;
        background: #fff;
        padding: 10px;
        margin: 10px;
        border: 3px solid #000;
    }

    #legend h3 {
        margin-top: 0;
    }

    #legend img {
        vertical-align: middle;
    }

    .chart-heading {
        margin-top: 0;
        float: left;
        max-width: 50%;
        margin-bottom: 10px;
        position: relative;
        z-index: 1;
    }

        .chart-heading h4 {
            float: left;
            background: #57889c !important;
            height: auto;
            font-size: 12px;
            font-weight: 600;
            border: 0;
            border-radius: 4px;
            overflow: hidden;
        }

            .chart-heading h4:last-child {
                margin: 0;
            }

            .chart-heading h4 span {
                float: left;
                height: auto;
                background: none !important;
                border: 0;
                padding: 3px 10px;
                color: #FFF;
                font-weight: 500;
            }

                .chart-heading h4 span:last-child {
                    border: 0;
                    background: rgba(0,0,0,0.2) !important;
                }

    #legend img {
        vertical-align: middle;
    }


    .modal {
        z-index: 999000000000000 !important;
    }


    .header-btns {
        float: left;
        margin-left: 15px;
    }

        .header-btns > a {
            float: left;
            line-height: 1;
            padding: 6px 10px;
            margin-top: 2px;
        }

        .header-btns > form {
            float: left;
            margin-left: 5px;
        }

            .header-btns > form button {
                color: #333;
                padding: 6px 10px;
                font-family: arial;
                margin-top: 2px;
                margin-left: 5px;
                border: 0;
                float: left;
                border-radius: 2px;
                line-height: 1;
            }

                .header-btns > form button i {
                    float: left;
                    margin-right: 5px;
                }
    /*-----------------------------------*/

    a.collapse-widget {
        float: right;
        width: 22px;
        height: 34px;
        text-align: center;
        line-height: 34px;
        margin-top: -1px;
        color: #FFF;
        margin-right: 5px;
    }

    .filters-dropdown-wrapper {
        float: left;
        position: relative;
    }

        .filters-dropdown-wrapper a.btn.dropdown-shown {
            color: #37a5dc;
        }

    .filters-dropdown {
        position: absolute;
        right: 0;
        top: 100%;
        z-index: 2;
        background: #f9fdff;
        padding: 10px;
        margin-top: 2px;
        min-width: 200px;
        visibility: hidden;
        opacity: 0;
        -webkit-box-shadow: 0 0 20px rgba(0,0,0,0.1);
        -moz-box-shadow: 0 0 20px rgba(0,0,0,0.1);
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
        -webkit-border-radius: 0 0 5px 5px;
        -moz-border-radius: 0 0 5px 5px;
        border-radius: 0 0 5px 5px;
        -webkit-transform: scale(0.7);
        -moz-transform: scale(0.7);
        transform: scale(0.7);
        -webkit-transition: all 0.2s linear;
        -moz-transition: all 0.2s linear;
        transition: all 0.2s linear;
    }

        .filters-dropdown.left {
            right: auto;
            left: 0;
        }

        .filters-dropdown.active {
            visibility: visible;
            opacity: 1;
            -webkit-transform: scale(1);
            -moz-transform: scale(1);
            transform: scale(1);
        }

    .filters-dropdown-wrapper a.btn {
        float: left;
        padding: 4px 5px;
        background: none;
        border: 0;
        color: #4c4f53;
        font-weight: 500;
        font-size: 16px;
        box-shadow: none;
    }

    .filters-dropdown > div {
        float: left;
        width: 100%;
        margin: 0 0 10px !important;
    }

    .filters-dropdown span.multiselect-native-select, .filters-dropdown span.multiselect-native-select .btn-group {
        width: 100% !important;
    }

    .filters-dropdown button {
        width: 100%;
        margin: 0;
    }

    .filters-dropdown .select, .filters-dropdown .groupMultiSelect {
        width: 100% !important;
        text-align: center;
    }

        .filters-dropdown .groupMultiSelect .group-selection {
            width: 100%;
            padding: 0 10px;
            box-sizing: border-box;
            line-height: 1;
            margin: 0 !important;
            text-align: center;
        }

    .filters-dropdown .example {
        width: 100% !important;
    }


    body .dataTables_wrapper table.childstages {
        margin: 5px auto !important;
        border: 1px solid #ddd !important;
        width: calc(100% - 10px);
    }

    .text-dropdown {
        float: left;
        margin-left: 5px;
        position: relative;
    }

    .map-filters .filters-dropdown-wrapper a.btn {
        background: #fff;
    }

    span.dynatree-icon {
        display: none;
    }

    table.dataTable td, table.dataTable th {
        vertical-align: middle;
    }

    .dt-toolbar, .dt-toolbar-footer {
        background: none;
    }

    .dt-toolbar {
        padding: 0;
        margin: -3px 0 0;
    }

    div.ColVis {
        margin-bottom: 5px !important;
    }

    .table > tbody > tr > td, .table > tbody > tr > th, .table > tfoot > tr > td, .table > tfoot > tr > th, .table > thead > tr > td, .table > thead > tr > th {
        vertical-align: middle;
    }

        .table > tbody > tr > td:last-child {
            white-space: nowrap;
        }

    .table-bottom {
        display: flex;
        align-items: center;
        padding-top: 7px;
    }

        .table-bottom .simple-pagination {
            margin: 0;
            margin-left: auto;
            padding: 0;
        }

    .simple-pagination li a, .simple-pagination li span {
        box-shadow: none !important;
    }

    .box-body .simple-pagination li a {
        background: #FFF;
        color: #3a3633;
        border-color: #ddd;
    }

        .box-body .simple-pagination li a span {
            background: #974545;
        }

    .simple-pagination li span.current {
        background: #e7e7e7;
    }

    #TaskEntryHistory .table td span {
        display: table;
        font-size: 11px;
        color: #979797;
    }
    .error{
        border:1px solid red !important;
    }
</style>
<script src="~/Content/js/Plugins/AjaxLoading/loading.js"></script>

<section id="widget-grid" class="ng-cloak" ng-app="DashboardApp" ng-controller="DashboardCtrl">
    <input type="hidden" id="ProjectIdLogs" value="@TempData["ProjectId"]" />
    <div class="alert alert-success alert-dismissable" id="SuccessMessage" style="display:none;">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <b>Success!</b> <p id="SuccessText">Save successfully.</p>
    </div>
    <span data-UserId="@ViewBag.UserId" hidden id="UserId"></span>

    <div class="row">


        <!-- Dashboard Popup Satart-->

        <div class="modal custom-modal  fade" id="IssueModal">
            <div class="modal-dialog" style="min-width:90%;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> <label id="Issuelbl"> </label><label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                            ×
                        </button>
                    </div>
                    <div class="modal-body">
                        @Html.Action("New", "Issue", new { area = "Project" })
                    </div>
                </div>
            </div>
        </div>



        <div class="modal custom-modal  fade" id="AttachmentModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> <label> Task Attachments</label> <label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                            ×
                        </button>
                    </div>
                    <div id="ProjectAttachmentTableBody">
                        @Html.Action("projectattachment", "dashboard", new { area = "project", ProjectId = @ProjectId })
                    </div>

                </div>
            </div>
        </div>

        <div class="modal custom-modal  fade" id="IssueStatusModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> <label> Change Status </label> <label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                            ×
                        </button>
                    </div>
                    <div class="modal-body">
                        @Html.Action("ChangeIssueStatus", "Issue", new { area = "Project" })
                    </div>
                </div>
            </div>
        </div>

        <div class="modal  custom-modal fade" id="SiteStatus">
            <div class="modal-dialog modal-lg" style="width: 80%">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <label> Update @ViewBag.EntityTitle Status</label>
                            <label class="labelFacode"></label>
                        </h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    </div>
                    <div class="modal-body">

                        @Html.Partial("~/Areas/Project/Views/ProjectSite/_SiteStatus.cshtml")
                    </div>
                </div>
            </div>
        </div>

        <div class="modal custom-modal  fade" id="LogModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><label>Work Log </label><label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                            ×
                        </button>
                    </div>
                    <div class="modal-body">
                        <ul class="nav nav-tabs" id="WorkLogTabArea">
                            <li class="active"><a data-toggle="tab" href="#WorkLogForm">Task Worklogs</a></li>
                            <li><a data-toggle="tab" href="#WorLogHistory">History</a></li>
                        </ul>
                        <div class="tab-content" style="margin-top:5px !important">
                            <div id="WorkLogForm" class="tab-pane fade in active">
                                <form class="smart-form" ng-submit="SaveLog()" role="form" name="Logform" style="margin-top:20px;" id="saveLogForm" autocomplete="off">
                                    <div class="row">
                                        <div class="form-group col-md-12">
                                            <section id="select-day">
                                                <label class="label">Log Date <span style="color: red">*</span></label>
                                                @*<div class="input">
                                                        <input type="text" class="worklogdate logdate weeklydisabled"  ng-model="LogDate" required aria-describedby="sizing-addon2">
                                                    </div>*@
                                                <div class="btn-group current-week">
                                                </div>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-xs btn-default pickdate" data-date-end-date="0d">Pick Day(s)</button>

                                                </div>
                                            </section>
                                        </div>
                                        <div class="form-group col-md-12">
                                            <section>
                                                <label class="label">Work Hour (s) <span style="color: red">*</span></label>
                                                @* <div class="input">
                                                    <i class="icon-prepend fa fa-clock-o"></i>
                                                    <input maxlength="4" min="1" type="number"  ng-model="LogHours" required aria-describedby="sizing-addon2">
                                                    </div>*@

                                                <div class="dated-input">
                                                </div>
                                            </section>
                                        </div>
                                    </div>
                                    <div class="form-group" id="work-desc">
                                        @*<section>
                                                <div class="textarea">
                                                    <textarea rows="3" maxlength="300" ng-model="Description" placeholder="Description" class="form-control ng-pristine ng-untouched ng-valid ng-empty" style="height:134px;"></textarea>
                                                </div>
                                            </section>*@
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn custom-btn2" data-dismiss="modal" style="float:right;">
                                            Cancel
                                        </button>
                                        <input type="submit" class="btn  custom-btn1" value="Save" style="float:right;margin-right:10px;" />
                                    </div>
                                </form>
                            </div>
                            <div id="WorLogHistory" class="tab-pane fade">
                                <table id="workLogHisotryTable" class="table table-bordered table-striped">
                                    <thead>

                                        <tr>
                                            <th style="width: 17%">Log Date</th>
                                            <th style="width: 8%">Log Hours</th>
                                            <th style="width: 62%">Comment</th>
                                            <th>Is Aproved?</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>

                                </table>
                                @*<div class="pull-right" ng-show="WorkLogList.length" style="margin-top:-25px !important;margin-bottom:-30px">
                                        <pagination ng-model="_currentPage"
                                                    total-items="WorkLogList.length"
                                                    max-size="_maxSize"
                                                    boundary-links="true">
                                        </pagination>
                                    </div>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal custom-modal  fade" id="FormModal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><label> Task Data Entry </label><label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                            ×
                        </button>
                    </div>
                    <div class="modal-body">

                        <ul class="nav nav-tabs" id="TaskEntryTabArea">
                            <li class="active"><a data-toggle="tab" href="#TaskEntryForm">Data Entry</a></li>
                            <li><a data-toggle="tab" href="#TaskEntryHistory">History</a></li>
                        </ul>
                        <div class="tab-content" style="margin-top:5px !important">
                            <div id="TaskEntryForm" class="tab-pane fade in active">
                                <form class="form-inline" id="frmTaskEntry" action="#!" role="form">
                                    <div id="CustomForm">
                                    </div>

                                    <div class="modal-footer">
                                        <input type="submit" value="Save" class="btn custom-btn1" />
                                    </div>
                                </form>
                            </div>
                            <div id="TaskEntryHistory" class="tab-pane fade">
                                <table class="table table-bordered table-striped">
                                    <thead>

                                        <tr>
                                            <th>Creation Date</th>
                                            @*<th >Revision</th>*@
                                            <th ng-repeat="x in TaskEntriesTitles" style="width:1%">{{x.Title}}</th>

                                        </tr>
                                    </thead>
                                    <tbody>

                                        <tr ng-repeat="x in Filtered_TaskEntries">
                                            <td style="width: 17%">
                                                @*<input type="hidden" ng-model="x.WLogId" />*@
                                                {{x.CreatedOn.replace('/Date(','').replace(')/','') | date : "dd MMM, yyyy" }}
                                            </td>
                                            @*<td style="width: 8%">{{x.Revision}}</td>*@
                                            <td style="width:1%" ng-repeat="rev in x.CurrentRevision">{{rev.FormValue}}&nbsp;<span ng-if="rev.Comments != null && rev.Comments !=''">{{rev.Comments}}</span> </td>
                                            @*<td>{{x.IsApproved}}</td>*@
                                        </tr>
                                    </tbody>
                                </table>
                                <div class="pull-right" ng-show="TaskEntries.length" @*style="margin-top:-25px !important;margin-bottom:-30px"*@>
                                    <pagination ng-model="_currentPageTask"
                                                total-items="TaskEntries.length"
                                                max-size="_maxSizeTask"
                                                boundary-links="true">
                                    </pagination>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*<div class="modal fade" id="WorkLogResourcesModal">
                <div class="modal-dialog" style="min-width:90%;">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#4c4f53;color:white!important">
                            <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                                ×
                            </button>
                            <h5 class="modal-title" style="color:white;margin-top: 5px;font-size:16px;">
                                <label> Work Logs</label>
                            </h5>
                        </div>
                        <div class="modal-body">
                            @Html.Action("ManageWorkLogs", "Dashboard", new { area = "Project" })
                        </div>
                    </div>
                </div>
            </div>*@





        <!-- Dashboard Popup End-->


        <form class="form-inline" role="form">

            <div class="modal custom-modal fade" id="PlanningModal">
                <div class="modal-dialog modal-lg" style="width:70%">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title"> <label> Task Planning </label><label class="labelFacode"></label></h5>
                            <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                                ×
                            </button>
                        </div>
                        <div class="modal-body" style="height:auto">
                            @Html.Action("PlanningNew", "Task", new { area = "Project" })
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <div class="modal custom-modal fade" id="ChangeStatus">
            <div class="modal-dialog" style="width:67%;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> <label> Change Status</label><label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                            ×
                        </button>
                    </div>
                    <div class="modal-body" style="height:auto">
                        @Html.Partial("~/Areas/Project/Views/Dashboard/_StatusChange.cshtml")
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid" style="margin-left:-15px;">
        <div ng-repeat="x in BookmarkTasks">
            <div class="row" ng-if="x.Tasks.length"></div>
            <div class="row" ng-if="x.Tasks.length">
                <!-- ./col -->
                <div class="col-sm-2" style="margin-left:-10px;">
                    <!-- small box -->
                    <div class="small-box StatusShadow" style="color: white; background-color: {{x.Color}}; font-weight: bold;">
                        <div class="inner">
                            <h3>{{x.ActualSites}}</h3>

                            <p>{{x.Task}}</p>
                        </div>
                    </div>
                </div>
                <div class="col-sm-2" ng-repeat="y in x.Tasks" style="margin-left:-10px;">
                    <!-- small box -->
                    <div class="small-box StatusShadow" style="color: white; background-color: {{y.Color}}; font-weight: bold;">
                        <div class="inner">
                            <h3>{{y.ActualSites}}</h3>

                            <p>{{y.Task}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <div ng-if="!(x.Tasks.length)">
                <!-- ./col -->
                <div class="col-sm-2" style="margin-left:-10px;">
                    <!-- small box -->
                    <div class="small-box StatusShadow" style="color: white; background-color: {{x.Color}}; font-weight: bold;">
                        <div class="inner">
                            <h3>{{x.ActualSites}}</h3>

                            <p>{{x.Task}}</p>
                        </div>
                    </div>
                </div>
                <div class="col-sm-2" ng-repeat="y in x.Tasks" style="margin-left:-10px;">
                    <!-- small box -->
                    <div class="small-box StatusShadow" style="color: white; background-color: {{y.Color}}; font-weight: bold;">
                        <div class="inner">
                            <h3>{{y.ActualSites}}</h3>

                            <p>{{y.Task}}</p>
                        </div>
                    </div>
                </div>
            </div>
            <!-- ./col -->
        </div>
    </div>
    @*<div class="container-fluid" id="BookMarkList" style="margin-left:-22px;margin-bottom:6px;">
            <div ng-repeat="x in BookmarkTasks" class="w3-responsive">
                    <div class="col-md-2" style="text-align:left;border-left:1.5px solid #999696;border-top:1.5px solid #999696;border-bottom:1.5px solid #999696;height:74px;background:{{x.Color}};margin-left:10px;width:154px;" ng-if="x.Tasks.length>0">

                        <strong style="font-size:25px;color:#fff">{{x.ActualSites}}</strong><br />
                        <i style="color:#fff;font-size:14px;font-weight:bold;">{{x.Task}}</i>
                    </div>
                    <div class="col-md-1" ng-repeat="y in x.Tasks" style="border-right:1.5px solid #999696;border-top:1.5px solid #999696;border-bottom:1.5px solid #999696;text-align:left;height:74px;width:88px;;background:{{y.Color}};" ng-if="x.Tasks.length>0">
                        <strong style="font-size:25px;color:#fff">{{y.ActualSites}}</strong><br />
                        <i style="color:#fff;font-size:12px;font-weight:bold;">{{y.Task}}</i>
                    </div>
           </div>
        </div>*@

    @*<div class="container-fluid" id="BookMarkList" style="margin-left:-22px;margin-bottom:6px;">
            <div ng-repeat="x in BookmarkTasks" class="w3-responsive">
                    <div class="col-md-2" style="text-align:left;border-left:1.5px solid #999696;border-top:1.5px solid #999696;border-bottom:1.5px solid #999696;height:74px;background:{{x.Color}};margin-left:10px;width:154px;" ng-if="x.Tasks.length>0">

                        <strong style="font-size:25px;color:#fff">{{x.ActualSites}}</strong><br />
                        <i style="color:#fff;font-size:14px;font-weight:bold;">{{x.Task}}</i>
                    </div>
                    <div class="col-md-1" ng-repeat="y in x.Tasks" style="border-right:1.5px solid #999696;border-top:1.5px solid #999696;border-bottom:1.5px solid #999696;text-align:left;height:74px;width:88px;;background:{{y.Color}};" ng-if="x.Tasks.length>0">
                        <strong style="font-size:25px;color:#fff">{{y.ActualSites}}</strong><br />
                        <i style="color:#fff;font-size:12px;font-weight:bold;">{{y.Task}}</i>
                    </div>
           </div>
        </div>*@

    <div class="modal custom-modal  fade" id="TodoModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> <label> New Todo Task</label></h5>
                    <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                        ×
                    </button>
                </div>
                <div class="modal-body" style="height: 100%;">
                    <form name="NewToDoForm">
                        <input type="hidden" value="@ProjectId" id="TodoProjectId" />
                        <div ng-bind-html="Alert" class="AlertArea"></div>
                        <div class="form-group">
                            <label>Title <span class="text-danger">*</span></label>
                            <input type="text" ng-model="Todo.ToDoTitle" name="ToDoTitle" class="form-control" maxlength="100" required />
                            <p ng-show="NewToDoForm.ToDoTitle.$valid == false && submitted == true" class="text-danger">Enter a Title.</p>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlTextarea1">Description <span class="text-danger">*</span></label>
                            <textarea required class="form-control" ng-model="Todo.Description" name="Description" rows="3" maxlength="500"></textarea>
                            <p ng-show="NewToDoForm.Description.$valid == false && submitted == true" class="text-danger">Enter a Description.</p>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-6">
                                <label>Status <span class="text-danger">*</span></label>
                                <select name="Status" ng-model="Todo.Status" class="form-control" required>
                                    <option value="">Select Status</option>
                                    <option value="Crititcal">Crititcal</option>
                                    <option value="Important">Important</option>
                                    <option value="Completed">Completed</option>
                                </select>
                                <p ng-show="NewToDoForm.Status.$valid == false && submitted == true" class="text-danger">Select Status.</p>
                            </div>
                            <div class="col-md-6">
                                <label>Type <span class="text-danger">*</span></label>
                                <select ng-model="Todo.Type" name="Type" class="form-control" required>
                                    <option value="">Select Type</option>
                                    <option value="Meeting">Meeting</option>
                                    <option value="Reminder">Reminder</option>
                                    <option value="Appointment">Appointment</option>
                                </select>
                                <p ng-show="NewToDoForm.Type.$valid == false && submitted == true" class="text-danger">Select Type.</p>
                            </div>
                            <div class="clearfix"></div>
                            <div class="col-md-6" style="margin-top: 10px;">
                                <label>Date Time <span class="text-danger">*</span></label>
                                <div class='input-group date' id='datepicker'>
                                    <input type='text' class="form-control" ng-model="Todo.ToDoDateTime" name="ToDoDateTime" id="datepickerInput" required />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                <p ng-show="NewToDoForm.ToDoDateTime.$valid == false && submitted == true" class="text-danger">Select Date Time</p>
                            </div>
                            <div class="clearfix"></div>
                            <div style="margin-top: 10px;">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>@Entity.Title</label>
                                        <select ng-change="GetProjectSitesTasks(Todo.SiteId)" ng-model="Todo.SiteId" class="form-control  projectsitedp" ng-options="x.SiteId as x.SiteName for x in SitesList">
                                            <option ng-selected="true" value=""></option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>Task</label>
                                        <select ng-model="Todo.TaskId" class="form-control projectsitetaskdp" ng-options="x.TaskId as x.Title for x in SiteTask">
                                            <option ng-selected="true" value=""></option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-12">

                                <label for="inputEmail4">Assigned To</label><label style="color:darkred">*</label>


                                <label class="select" style="width:100%;">
                                    <ui-select required multiple ng-change="fnProjectResource()" ng-model="multiple.AssignToId" theme="bootstrap" close-on-select="false" style="width: 100%;">
                                        <ui-select-match>{{$item.UserName}}</ui-select-match>
                                        <ui-select-choices repeat="u in User| filter:$select.search">
                                            {{u.UserName}}
                                        </ui-select-choices>
                                    </ui-select>
                                </label>
                            </div>

                        </div>
                    </form>

                    <footer>
                        <button ng-click="SaveTodo()" class="btn btn-primary" style="float:right;">
                            Save
                        </button>
                    </footer>
                </div>
            </div>
        </div>
    </div>

    <div class="modal  fade" id="EditTodoModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#4c4f53;color:white!important">
                    <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">
                        ×
                    </button>
                    <h5 class="modal-title" style="color:white;margin-top: 5px;font-size:16px;"> <label> Edit Todo Task</label></h5>
                </div>
                <div class="modal-body" style="height: 100%;">
                    <div ng-bind-html="Alert" class="AlertArea"></div>
                    <form name="EditToDoForm">
                        <div class="form-group">
                            <label>Title <span class="text-danger">*</span></label>
                            <input type="text" ng-model="Todo.ToDoTitle" name="ToDoTitle" class="form-control" maxlength="100" required />
                            <p ng-show="EditToDoForm.ToDoTitle.$valid == false && submitted == true" class="text-danger">Enter a Title.</p>
                        </div>
                        <div class="form-group">
                            <label for="exampleFormControlTextarea1">Description <span class="text-danger">*</span></label>
                            <textarea required class="form-control" ng-model="Todo.Description" name="Description" rows="3" maxlength="500"></textarea>
                            <p ng-show="EditToDoForm.Description.$valid == false && submitted == true" class="text-danger">Enter a Title.</p>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-6">
                                <label>Status <span class="text-danger">*</span></label>
                                <select name="Status" ng-model="Todo.Status" class="form-control" required>
                                    <option value="">Select Status</option>
                                    <option value="Crititcal">Crititcal</option>
                                    <option value="Important">Important</option>
                                    <option value="Completed">Completed</option>
                                </select>
                                <p ng-show="EditToDoForm.Status.$valid == false && submitted == true" class="text-danger">Select Status.</p>
                            </div>
                            <div class="col-md-6">
                                <label>Type <span class="text-danger">*</span></label>
                                <select ng-model="Todo.Type" name="Type" class="form-control" required>
                                    <option value="">Select Type</option>
                                    <option value="Meeting">Meeting</option>
                                    <option value="Reminder">Reminder</option>
                                    <option value="Appointment">Appointment</option>
                                </select>
                                <p ng-show="EditToDoForm.Type.$valid == false && submitted == true" class="text-danger">Select Type.</p>
                            </div>
                            <div class="clearfix"></div>
                            <div class="col-md-6" style="margin-top: 10px;">
                                <label>Date Time <span class="text-danger">*</span></label>
                                <div class='input-group date' id="Editdatepicker">
                                    <input type='text' class="form-control" ng-model="Todo.ToDoDateTime" name="ToDoDateTime" id="EditdatepickerInput" required />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                <p ng-show="EditToDoForm.ToDoDateTime.$valid == false && submitted == true" class="text-danger">Select Date Time</p>
                            </div>
                            <div class="clearfix"></div>
                            <div style="margin-top: 10px;">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>@Entity.Title</label>
                                        <select ng-change="GetProjectSitesTasks(Todo.SiteId)" ng-model="Todo.SiteId" class="form-control  projectsitedp" ng-options="x.SiteId as x.SiteName for x in SitesList">
                                            <option ng-selected="true" value=""></option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>Task</label>
                                        <select ng-model="Todo.TaskId" class="form-control projectsitetaskdp" ng-options="x.TaskId as x.Title for x in SiteTask">
                                            <option ng-selected="true" value=""></option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-12">

                                <label for="inputEmail4">Assigned To</label><label style="color:darkred">*</label>


                                <label class="select" style="width:100%;">
                                    <ui-select required multiple ng-change="fnProjectResource()" ng-model="multiple.AssignToId" theme="bootstrap" close-on-select="false" style="width: 100%;">
                                        <ui-select-match>{{$item.UserName}}</ui-select-match>
                                        <ui-select-choices repeat="u in User| filter:$select.search">
                                            {{u.UserName}}
                                        </ui-select-choices>
                                    </ui-select>
                                </label>
                            </div>

                        </div>
                    </form>

                    <footer>
                        <button ng-click="PostEditToDo()" class="btn btn-primary" style="float:right;">
                            Save
                        </button>
                    </footer>
                </div>
            </div>
        </div>
    </div>


    <div id="popoverContent" class="hide">

    </div>
    <!-- row -->
    <div class="row">
        <span hidden id="pId" data-ProjectId="@ViewBag.Id"></span>
        <article class="col-sm-12 sortable-grid ui-sortable" style="margin-bottom:-18px;">
            <!-- new widget -->
            <div class="jarviswidget light-widget jarviswidget-sortable" id="wid-id-0" data-widget-togglebutton="false" data-widget-editbutton="false" data-widget-fullscreenbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false" role="widget">

                <header role="heading">
                    <span class="widget-icon"> <i class="glyphicon glyphicon-stats"></i> </span>
                    <h2 style="">Program View </h2>
                    <a class="collapse-widget" href="#" title=""><i class="fa fa-minus"></i></a>

                    <div class="header-btns">
                        @if (ViewBag.AllowUri("/Project/Targets/Index"))
                        {
                            <a class="btn btn-sm btn-success" href="/Project/Targets/Index/@ViewBag.Id" id="setTarget" target="_blank" style="margin-left:5px;">Set Targets</a>
                        }
                        @if (ViewBag.AllowUri("/Project/ImportProjectPlans/Index"))
                        {
                            <a class="btn btn-sm btn-success" href="/Project/ImportProjectPlans/Index?Project=@ViewBag.Id" id="importData" target="_blank" style="margin-left:5px;">Import Data</a>
                        } @if (ViewBag.AllowUri("/Project/Dashboard/Sandbox"))
                        {
                            <a class="btn btn-sm btn-success" href="/Project/Dashboard/Sandbox/@ViewBag.Id" id="projectAnalysis" target="_blank" style="margin-left:5px;">Data Analysis</a>
                        }

                    </div>

                    <div class="selected-filters">
                        <i class="dateLabel" data-content="selector1"></i>
                        <i class="marketLabel" data-content="selector22"></i>
                        <i class="tasktitle" data-content="selector3"></i>
                        <i class="IssuesStatusLabel" data-content="selector4"></i>
                    </div>


                    <div class="widget-toolbar filters pv">
                        <div class="filters-dropdown-wrapper">
                            <a class="btn btn-default" href="#" title=""><i class="fa fa-filter"></i></a>
                            <div class="filters-dropdown">
                                <div class="input-group" style="margin-right:2px;">

                                    <button type="button" class="btn btn-default pull-right" id="reportrange3">
                                        <span class="changingSelector" data-id="selector1">
                                            Date range picker
                                        </span>
                                        <i class="fa fa-caret-down"></i>
                                    </button>
                                </div>
                                <div class="example" id="lstProjectMarkets">
                                </div>
                                <div class="example" id="lstIssueStatus">
                                </div>
                                @*<div class="example" id="ListProjectTask">
                                    </div>*@

                                @*<div class="groupMultiSelect example" id="ListProjectTask" style="background:#fff;border-radius:4px;height:30px;width:136px;">
                                    </div>*@

                                <div @*class="dynatree-drop"*@>
                                    <input type="text" id="ListProjectTaskss" />
                                    @*<span class="dynatree-btn changingSelector">None Selected</span>

                                        <div class="dynatree123" id="dynatreetracking">

                                        </div>*@
                                </div>
                                <button class="btn btn-default apply-filter-btn" id="SearchProject" style="background: #37a5dc;color: #fff;margin-left: 0;box-shadow: none;height:30px;border: 0;"><span class="fa fa-filter"></span>  Apply Filters</button>
                            </div>


                            @*@if (ViewBag.AllowUri("/Project/Targets/Index"))
                                {
                                    <a class="btn btn-sm btn-success" href="/Project/Targets/Index/@ViewBag.Id" id="setTarget" style="margin-left:10px;">Set Targets</a>
                                }*@
                        </div>
                    </div>


                    @*</div>*@

                    <ul class="nav nav-tabs pull-right in" id="myTab" style="margin-top:-38px;">

                        <li class="active">
                            <a data-toggle="tab" title="Project Tracking" id="btns2" href="#s2" id="s2_button"><i style="opacity:1" class="fa fa-clock-o"></i> <span class="hidden-mobile hidden-tablet"><b>Tracking</b></span></a>
                        </li>

                        <li>
                            <a data-toggle="tab" data-text="@Entity.Title" title="Project @Entity.Plural" id="btns1" href="#s1"><i style="opacity:1" class="fa fa-files-o"></i> <span class="hidden-mobile hidden-tablet"><b>@Entity.Plural</b></span></a>
                        </li>


                        <li>
                            <a data-toggle="tab" title="Project Issues" id="btns3" href="#s3"><i style="opacity:1" class="fa fa-warning"></i> <span class="hidden-mobile hidden-tablet"><b>Issues</b></span></a>
                        </li>
                        <li>
                            <a data-toggle="tab" title="Project Summary" id="btns4" href="#s4"><i style="opacity:1" class="fa fa-comment"></i> <span class="hidden-mobile hidden-tablet"><b>Summary</b></span></a>
                        </li>

                    </ul>
                    @*<ul id="sparks" style="width:80%;margin-top:1px !important;">

                            <li class="sparks-info">
                                <div class="sparkline hidden-mobile hidden-md hidden-sm" style="margin-right:10px;float:left;color:#fff;">
                                    8,20,490,1404,17,29,17,1,23,1405,577,153,1157
                                </div>
                                <h5 style="float:right;color:#fff;"> Completion <span style="color:#fff;"><i class="fa fa-arrow-circle-up"></i>&nbsp;{{s.CompletionPercent}}%</span></h5>

                            </li>

                        </ul>*@

                    <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                </header>

                <!-- widget div-->
                <div class="no-padding" role="content">

                    <div id="myTabContent" class="tab-content">
                        <div class="tab-pane fade  in padding-10 no-padding-bottom" id="s1">
                            <div class="box-body">

                                @*<a class="btn btn-xs btn-info" href="/workorder/New/@ViewBag.Id">
                                        Create Work Order
                                    </a>*@


                                @*<input type="text" id="searchbox" style="width:180px;height: 29px;margin-right:31px" placeholder="Search" class="form-control pull-right Web">*@

                                <div id="divclientsites">
                                    @*@Html.Action("TableResult", "Dashboard", new { Area = "Project", ProjectId = ProjectId, Page = 1 })*@
                                </div>
                            </div>
                            <div class="table-bottom" style="padding: 0">
                                <div class="showing">Showing <span id="GridShowing"> 5</span>  of <span id="GridShowingTotal"></span> entries</div>
                                <div id="SiteGridPagination" class="table-pagination"></div>
                            </div>
                        </div>
                        <!-- end s1 tab pane -->
                        <div class="tab-pane fade active in padding-10 no-padding-bottom" id="s2" @*style="margin-bottom:-40px;"*@>
                            <div class="row no-space">
                                <div class="col-xs-12 col-sm-12 col-md-3 col-lg-9">
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="btn-group pull-right btn-toggle" @*style="margin-bottom:8px;float:right;margin-right:26%;margin-top:-8px;"*@ style="margin-right:12px">
                                                <button data-type="Daily" class="btn btn-info btn-xs programchart">Daily</button>
                                                <button class="btn btn-info btn-xs programchart" data-type="Weekly">Weekly</button>
                                                <button class="btn btn-info btn-xs programchart" data-type="Monthly">Monthly</button>
                                                <button class="btn btn-info btn-xs programchart" data-type="Quaterly">Quaterly</button>
                                                <button class="btn btn-info btn-xs programchart" data-type="Yearly">Yearly</button>
                                            </div>
                                            <div class="chart-heading">
                                                <h4 @*style="margin-left:-9px;"*@><span style="background-color: #ccc">Forecasted MTD : {{ForecastedMTD}}</span><span style="background-color: #ccc">Actual MTD: {{ActualMTD}}</span></h4>
                                                <h4><span style="background-color: #ccc">Project Forecast TD : {{ProjectForecastTD}}</span><span style="background-color: #ccc">Project Actual TD : {{ProjectActualTD}}</span></h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="chartContainer" style="height:320px">

                                        <div id="updating-chart" hidden class="chart-large txt-color-blue" style="padding: 0px; position: relative;"><canvas class="flot-base" style="direction: ltr; position: absolute; left: 0px; top: 0px; width: 717px; height: 235px;" width="717" height="235"></canvas><div class="flot-text" style="position: absolute; top: 0px; left: 0px; bottom: 0px; right: 0px; font-size: smaller; color: rgb(84, 84, 84);"><div class="flot-x-axis flot-x1-axis xAxis x1Axis" style="position: absolute; top: 0px; left: 0px; bottom: 0px; right: 0px; display: block;"><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 26px; text-align: center;">0</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 91px; text-align: center;">10</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 159px; text-align: center;">20</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 226px; text-align: center;">30</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 294px; text-align: center;">40</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 362px; text-align: center;">50</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 430px; text-align: center;">60</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 498px; text-align: center;">70</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 565px; text-align: center;">80</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 633px; text-align: center;">90</div><div class="flot-tick-label tickLabel" style="position: absolute; max-width: 65px; top: 220px; left: 698px; text-align: center;">100</div></div><div class="flot-y-axis flot-y1-axis yAxis y1Axis" style="position: absolute; top: 0px; left: 0px; bottom: 0px; right: 0px; display: block;"><div class="flot-tick-label tickLabel" style="position: absolute; top: 203px; left: 13px; text-align: right;">0</div><div class="flot-tick-label tickLabel" style="position: absolute; top: 163px; left: 7px; text-align: right;">20</div><div class="flot-tick-label tickLabel" style="position: absolute; top: 123px; left: 7px; text-align: right;">40</div><div class="flot-tick-label tickLabel" style="position: absolute; top: 83px; left: 7px; text-align: right;">60</div><div class="flot-tick-label tickLabel" style="position: absolute; top: 43px; left: 7px; text-align: right;">80</div><div class="flot-tick-label tickLabel" style="position: absolute; top: 3px; left: 0px; text-align: right;">100</div></div></div><canvas class="flot-overlay" style="direction: ltr; position:absolute; left: 0px; top: 0px; width: 717px; height: 235px;" width="717" height="235"></canvas></div>
                                    </div>
                                </div>

                                <div class="col-xs-12 col-sm-12 col-md-3 col-lg-3 expandable" style="height:340px;">
                                    @*<div class="row" style="height: 336px;margin-top:-7px;overflow-y:  auto;">*@
                                    @Html.Action("GetMileStoneValues", "Dashboard", new { Area = "Project", ProjectId = ProjectId, filterOption = "", ParentId = 0 })
                                    @*</div>*@
                                </div>
                            </div>

                            <div id="show-stat-microcharts" class="show-stat-microcharts">
                            </div>
                        </div>
                        <!-- end s2 tab pane -->

                        <div class="tab-pane fade" id="s3">
                            <div class="widget-body-toolbar bg-color-white">

                                <form class="form-inline" role="form">

                                    <div class="form-group" style="float:right;margin-bottom: 5px;">
                                        <input type="text" class="form-control input-sm pull-right" placeholder="Search" id="searchboxIssue">
                                    </div>
                                </form>
                                <div id="divissues">
                                    @*@Html.Action("GetProjectIssue", "Dashboard", new { Area = "Project", projectId = ViewBag.Id, Page = 1 })*@
                                </div>

                                <div class="table-bottom">
                                    <div class="showing">Showing <span id="IssueGridShowing"></span>  of <span id="IssueGridShowingTotal"></span> entries</div>
                                    <div id="IssueGridPagination" class="table-pagination"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="s4">
                            @*<label style="font-weight:bold;margin-left:10px;">PROGRAM SUMMARY</label>*@
                            <h3>
                                <p id="Summary" style="height: 312px;margin-left:10px;font-weight: bold;overflow:hidden;"></p>
                            </h3>
                        </div>

                    </div>
                </div>
                <!-- end widget div -->
            </div>
            <!-- end widget -->
        </article>
    </div>

    <div class="row">

        <article class="col-sm-12 col-md-8 col-lg-8" style="padding-right:0;">
            <!-- new widget -->
            <div class="jarviswidget light-widget  jarviswidget-sortable" id="wid-id-2" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">

                <header>
                    @*<div class="btn-group">*@
                    <span class="widget-icon" style="margin-left:5px;"> <i class="fa fa-map-marker"></i> </span>
                    <h2>Project: </h2>
                    <div class="text-dropdown">
                        <h2 style="cursor:pointer;color:#0064a9" class="dropdown-toggle" data-toggle="dropdown">Regional View<i class="caret"></i></h2>
                        <ul class="dropdown-menu js-status-update pull-right">
                            <li>
                                <a href="#" id="Projects">Regional View</a>
                            </li>
                            <li>
                                <a href="#" id="Readiness">Readiness View</a>
                            </li>
                            @*@<li>
                                    <a href="javascript:void(0);" id="SITE_DISPOSITON">Site Disposition</a>
                                </li>*@
                        </ul>
                    </div>
                    @*</div>*@

                    <a class="collapse-widget" href="#" title=""><i class="fa fa-minus"></i></a>

                    <div class="widget-toolbar filters" id="marketfilters">

                        <div class="selected-filters">
                            <i data-content="selector1"></i>
                            <i data-content="selector22" class="regionMarketLabel"></i>
                            <i class="marketaskLabel" data-content="selector33"></i>
                        </div>

                        <div class="filters-dropdown-wrapper ">
                            <a class="btn btn-default" href="#" title=""><i class="fa fa-filter"></i></a>
                            <div class="filters-dropdown">

                                <!-- add: non-hidden - to disable auto hide -->
                                <div class="input-group" style="margin-right:2px;">

                                    <button type="button" class="btn btn-default pull-right" id="reportrangemarket">
                                        <span class="changingSelector" data-id="selector1">
                                            Date range picker
                                        </span>
                                        <i class="fa fa-caret-down"></i>
                                    </button>
                                </div>
                                <div class="example" id="lstMarketMarkets">
                                    <script type="text/javascript">
                                    </script>
                                </div>
                                @*<div class="example" id="ListMarketIssue">
                                    </div>*@
                                @*<div class="groupMultiSelect2 example" id="ListMarketIssue" style="background:#fff;border-radius:4px;height:30px;width:136px;margin-right:3px;">
                                    </div>*@
                                <div @*style="background:#fff;border-radius:4px;height:30px;width:136px;margin-right:3px;"*@ class="dynatree-drop">
                                    @*<span class="dynatree-btn changingSelector">None Selected</span>

                                        <div class="dynatree123" id="dynatreeregional">

                                        </div>*@
                                    <input type="text" id="LstRegionalIssues" />
                                </div>
                                <button class="btn btn-default apply-filter-btn" id="SearchMarket" style="background: #37a5dc;color: #fff;margin-left: 0;box-shadow: none;height:30px;border: 0;"><span class="fa fa-filter"></span> Apply Filters</button>
                            </div>
                        </div>

                    </div>
                </header>

                <div>

                    <div class="jarviswidget-editbox">
                        <div>
                            <label>Title:</label>
                            <input type="text" />
                        </div>
                    </div>
                    @*<div class="widget-body no-padding">
                            <div id="Project_View_Chart" style="min-width: 310px; height:299px; margin: 0 auto;"></div>
                        </div>*@

                    <div class="widget-body no-padding" id="marketregion">
                        @*@Html.Action("GetMarkets", "Dashboard", new { Area = "Project", ProjectId = ProjectId, filter = "Get_RegionView_WO" })*@
                    </div>
                    <div class="widget-body no-padding" id="ProjectReadiness" style="height:299px;">
                        @*@Html.Action("GetMarkets", "Dashboard", new { Area = "Project", ProjectId = ProjectId, filter = "Get_RegionView_WO" })*@
                    </div>
                </div>
            </div>
        </article>
        <article class="col-sm-12 col-md-4 col-lg-4">
            <!-- new widget -->
            <div class="jarviswidget light-widget jarviswidget-sortable" id="wid-id-3" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">

                <header>
                    <span class="widget-icon"> <i class="fa fa-warning"></i> </span>

                    @*<div class="btn-group" style="margin-top:-10px;">*@
                    <h2>Issues: </h2>
                    <div class="text-dropdown">
                        <h2 style="cursor:pointer;color:#0064a9" class="dropdown-toggle" data-toggle="dropdown">Project View<i class="caret"></i></h2>
                        <ul class="dropdown-menu js-status-update pull-right">
                            <li>
                                <a href="javascript:void(0);" id="Issue_By_pie_btn">Project View</a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" id="Issue_By_Geo_btn">Regional View</a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" id="NATIONAL_PROGRAM_ISSUES">National Program</a>
                            </li>
                        </ul>
                    </div>
                    @*</div>*@

                    <!-- add: non-hidden - to disable auto hide -->
                    <a class="collapse-widget" href="#" title=""><i class="fa fa-minus"></i></a>

                    <div class="widget-toolbar filters">
                        <!-- add: non-hidden - to disable auto hide -->

                        <div class="filters-dropdown-wrapper">
                            <a class="btn btn-default" href="#" title=""><i class="fa fa-filter"></i></a>
                            <div class="filters-dropdown">
                                <div class="input-group" style="margin-right:2px;">
                                    <button type="button" class="btn btn-default pull-right" id="reportrange2">
                                        <span class="changingSelector" data-id="selector1">
                                            <i class="fa fa-calendar"></i> Date range picker
                                        </span>
                                        <i class="fa fa-caret-down"></i>
                                    </button>
                                </div>

                                <div class="example" id="lstIssueMarkets">
                                    <script type="text/javascript">
                                    </script>
                                </div>

                                @*<div class="example" id="lstIssueTasks">
                                        <script type="text/javascript">
                                                        $(document).ready(function() {
                                                            $('#example-multiple-optgroups1').multiselect();
                                                        });
                                        </script>
                                    </div>*@
                                <button class="btn btn-default apply-filter-btn" id="SearchIssue" style="background: #37a5dc;color: #fff;margin-left: 0;box-shadow: none;height:30px;border: 0;"><span class="fa fa-filter"></span>  Apply Filters</button>
                            </div>
                        </div>
                    </div>
                    <div class="selected-filters pull-right">
                        <i data-content="selector1"></i>
                        <i class="issuesGrapMarketLabel" data-content="selector22"></i>
                    </div>

                </header>
                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <div>
                            <label>Title:</label>
                            <input type="text" />
                        </div>
                    </div>
                    <!-- end widget edit box -->
                    <div class="widget-body no-padding ">
                        <div class="filterbuttons isssuesbtn btn-group pull-right">
                            <button class="btn btn-info btn-xs invisible" id="backButton1" style="float: right;margin-left: 10px;width:40px;"> <span class="fa fa-arrow-left"></span> </button>
                            <button class="btn btn-info btn-xs issue-button" data-type="Daily" ng-click="FilterbyDateandTime('Daily','Get_Datewise_Issue','Issue')">Daily</button>
                            <button class="btn btn-info btn-xs issue-button" data-type="Weekly" ng-click="FilterbyDateandTime('Weekly','Get_Datewise_Issue','Issue')">Weekly</button>
                            <button class="btn btn-info btn-xs issue-button" data-type="Monthly" ng-click="FilterbyDateandTime('Monthly','Get_Datewise_Issue','Issue')">Monthly</button>

                            <button class="btn btn-info btn-xs issue-button" data-type="Quaterly" ng-click="FilterbyDateandTime('Quaterly','Get_Datewise_Issue','Issue')">Quaterly</button>
                            <button class="btn btn-info btn-xs issue-button" data-type="Yearly" ng-click="FilterbyDateandTime('Yearly','Get_Datewise_Issue','Issue')">Yearly</button>


                        </div>
                        <div class="filterbuttons national btn-group pull-right btn-toggle">
                            <button class="btn btn-info btn-xs national-chart" data-type="Daily">Daily</button>
                            <button class="btn btn-info btn-xs national-chart" data-type="Weekly">Weekly</button>
                            <button class="btn btn-info btn-xs national-chart" data-type="Monthly">Monthly</button>
                            <button class="btn btn-info btn-xs national-chart" data-type="Quaterly">Quaterly</button>
                            <button class="btn btn-info btn-xs national-chart" data-type="Yearly">Yearly</button>
                        </div>

                        @*<div id="Issue_By_Geo" style="min-width: 310px; height:269px; margin: 0 auto;"></div>*@
                        <div id="Issue_By_pie" style="min-width: 310px; height:300px; margin: 0 auto;"></div>
                    </div>
                </div>
                <!-- end widget div -->
            </div>
            <!-- end widget -->
        </article>
    </div>

    <div class="row">
        <article class="col-sm-12 col-md-8 col-lg-8" style="margin-bottom:-18px;margin-top:-17px;padding-right:0;">

            <!-- new widget -->
            <div class="jarviswidget light-widget " id="wid-id-5" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">

                <header>
                    <span class="widget-icon"> <i class="fa fa-map-marker"></i> </span>
                    <h2>Map View</h2>
                    @*<div class="widget-toolbar">
                            <a href="/Project/Defination/Details/@ViewBag.Id" class="btn  btn-xs btn-info" style="margin-right:4px;margin-left:4px;">
                                <span class="fa fa-plus"></span>
                            </a>
                        </div>*@
                    <a class="collapse-widget" href="#" title=""><i class="fa fa-minus"></i></a>
                    <div class="widget-toolbar filters map-filters" id="mapfilters">
                        <div class="filters-dropdown-wrapper">
                            <a class="btn btn-default" href="#" title=""><i class="fa fa-filter"></i></a>
                            <div class="filters-dropdown left">
                                <!-- add: non-hidden - to disable auto hide -->
                                <div class="input-group" @*style="margin-right:2px;"*@>

                                    <button type="button" class="btn btn-default pull-right" style="z-index:9000000" id="MapDate">
                                        <span class="changingSelector" data-id="selector1">
                                            <i class="fa fa-calendar"></i> Date range picker
                                        </span>
                                        <i class="fa fa-caret-down"></i>
                                    </button>
                                </div>
                                <div class="example" id="lstMapMarkets">
                                    <script type="text/javascript">
                                    </script>
                                </div>
                                @*<div class="groupMultiSelect2 example" id="ListMapStatus" style="background:#fff;border-radius:4px;height:30px;width:136px;">
                                    </div>*@@*groupMultiSelect3*@
                                    <div class="dynatree-drop" id="ListMapIssues" @*style="background:#fff;border-radius:4px;height:30px;width:136px;    margin-right: 2px;"*@>
                                        @*<script type="text/javascript">
                                            </script>*@
                                        <span class="dynatree-btn">Tasks</span>
                                        <div class="dynatree123 dynatreemap" id="dynatreemap">

                                        </div>
                                    </div>
                                    <div class="example" id="ListMapStatus">
                                        <script type="text/javascript">
                                        </script>
                                    </div>
                                    <div id="ListMapType" class="hidden"></div>
                                    @*<div class="groupMultiSelect1">
                                        <select></select>
                                        </div>*@
                                    <button class="btn btn-default apply-filter-btn" id="SearchMap" style="background: #37a5dc;color: #fff;margin-left: 0;box-shadow: none;height:30px;border: 0;"><span class="fa fa-filter"></span> Apply Filters</button>
                                </div>
                            </div>
                        </div>


                        <div class="selected-filters pull-right" id="MapViewLabels">
                            <i data-content="selector1"></i>
                            <i data-content="selector2"></i>
                            <i data-content="selector3"></i>
                            <i data-content="selector4"></i>
                        </div>

                    </header>
                    <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <input class="form-control" type="text">
                        </div>
                        <!-- end widget edit box -->
                        <div class="widget-body no-padding">

                            <div class="widget-body-toolbar bg-color-white" style="padding:0">
                                <div style="overflow:  hidden;width: 100%;">
                                    <div id="map" style="width:100%;height:530px;">

                                    </div>
                                    @*<div id="legend">
                                            <div><img src="~/Content/Images/Markers/pending.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">Pending</div>
                                            <div><img src="~/Content/Images/Markers/tss.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">TSS</div>
                                            <div><img src="~/Content/Images/Markers/tss_ssm.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">TSS_SSM</div>
                                            <div><img src="~/Content/Images/Markers/tss_epl.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">TSS_EPL</div>
                                            <div><img src="~/Content/Images/Markers/tss_ssm_epl.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">TSS_SSM_EPL</div>
                                            <div><img src="~/Content/Images/Markers/preinstall.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">Preinstall</div>
                                            <div><img src="~/Content/Images/Markers/migrated.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">Migrated</div>
                                            <div><img src="~/Content/Images/Markers/completed.png" style="margin-top:5px;background-color:black;border-radius:10px;height:20px;width:20px;margin-right:5px">Completed</div>
                                        </div>*@
                                    @*<div id="legend2" style="z-index: 0;margin-top:10px !important; margin-left:10px !important;WIDTH:500px"></div>*@
                                </div>
                            </div>
                        </div>
                        <!--Map Filter-->


                    </div>
                    <!-- end widget -->
                </div>
            </article>




            <article class="col-sm-12 col-md-4 col-lg-4" style="margin-bottom:-18px;margin-top:-17px;">
                <!-- new widget -->
                <div class="jarviswidget light-widget" id="wid-id-4" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-calendar"></i> </span>
                        <h2 id="TaskView">Task View</h2>
                        <a class="collapse-widget" href="#" title=""><i class="fa fa-minus"></i></a>


                        <div class="widget-toolbar filters">
                            @*<div class="filters-dropdown-wrapper">
                                    <button type="button" class="btn btn-default" id="reportrange1" style="font-size: 12px;color: #534333;background: #FFF;border: 1px solid #ddd;height: 24px;margin-top: 3px;margin-right: 5px;">
                                        <span class="changingSelector" data-id="selector1" id="ToDoDateRange">
                                            Date range picker
                                        </span>
                                        <i class="fa fa-caret-down"></i>
                                    </button>

                                    <button class="btn btn-default" ng-click="RefreshToDoTask()" style="border: 0;background: none;padding: 0 5px;font-size: 16px;float: left;line-height: 31px;"><span class="fa fa-filter"></span></button>
                                </div>*@


                            <!-- add: non-hidden - to disable auto hide -->
                            <div class="btn-group pull-right" style="margin-top:5px;margin-left:5px">
                                <button class="btn dropdown-toggle btn-xs btn-default" data-toggle="dropdown">
                                    Showing <i class="fa fa-caret-down"></i>
                                </button>
                                <ul class="dropdown-menu js-status-update pull-right">
                                    <li>
                                        <a href="javascript:void(0);" id="td">Daily</a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);" id="ag">Weekly</a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);" id="mt">Monthly</a>
                                    </li>


                                    @*<li>
                                            <a href="javascript:void(0);" id="cv">Event</a>
                                        </li>*@
                                    <li>

                                        <a href="javascript:void(0);" id="todo">Todo</a>
                                    </li>

                                </ul>
                            </div>
                        </div>
                    </header>
                    <!-- widget div-->
                    <div style="height:533px;overflow:scroll;">
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <input class="form-control" type="text">
                        </div>
                        <!-- end widget edit box -->
                        <div class="widget-body no-padding">
                            <!-- content goes here -->
                            <div class="widget-body-toolbar" id="widget-body-toolbar">

                                <div id="calendar-buttons">
                                    <div class="btn-group">
                                        <button class="btn btn-xs btn-default" data-toggle="modal" data-target="#TodoModal" style="margin-right:5px;"><i _ngcontent-ylg-63="" class="fa fa-plus"></i>&nbsp Add Todo</button>
                                        <a href="javascript:void(0)" class="btn btn-default btn-xs" id="btn-prev"><i class="fa fa-chevron-left"></i></a>
                                        <a href="javascript:void(0)" class="btn btn-default btn-xs" id="btn-next"><i class="fa fa-chevron-right"></i></a>
                                    </div>
                                </div>
                            </div>

                            <div id="calendar"></div>
                            <div class="row no-space" id="Todoview" style="height:437px;">
                                <div class="jarviswidget jarviswidget-sortable jarviswidget-color-teal" data-widget-editbutton="false" data-widget-custombutton="false" id="dashboard-analytics--todo-s" data-widget-attstyle="jarviswidget-color-teal" role="widget" style="">
                                    <header role="heading" class="ui-sortable-handle">
                                        <div class="jarviswidget-ctrls" role="menu">   <a href="javascript:void(0);" class="button-icon jarviswidget-toggle-btn" rel="tooltip" title="Collapse" data-placement="bottom"><i class="fa fa-minus "></i></a> <a href="javascript:void(0);" class="button-icon jarviswidget-fullscreen-btn" rel="tooltip" title="Fullscreen" data-placement="bottom"><i class="fa fa-expand "></i></a> <a href="javascript:void(0);" class="button-icon jarviswidget-delete-btn" rel="tooltip" title="Delete" data-placement="bottom"><i class="fa fa-times"></i></a></div><div class="widget-toolbar" role="menu"><a data-toggle="dropdown" class="dropdown-toggle color-box selector" href="javascript:void(0);"></a><ul class="dropdown-menu arrow-box-up-right color-select pull-right"><li><span class="bg-color-green" data-widget-setstyle="jarviswidget-color-green" rel="tooltip" data-placement="left" data-original-title="Green Grass"></span></li><li><span class="bg-color-greenDark" data-widget-setstyle="jarviswidget-color-greenDark" rel="tooltip" data-placement="top" data-original-title="Dark Green"></span></li><li><span class="bg-color-greenLight" data-widget-setstyle="jarviswidget-color-greenLight" rel="tooltip" data-placement="top" data-original-title="Light Green"></span></li><li><span class="bg-color-purple" data-widget-setstyle="jarviswidget-color-purple" rel="tooltip" data-placement="top" data-original-title="Purple"></span></li><li><span class="bg-color-magenta" data-widget-setstyle="jarviswidget-color-magenta" rel="tooltip" data-placement="top" data-original-title="Magenta"></span></li><li><span class="bg-color-pink" data-widget-setstyle="jarviswidget-color-pink" rel="tooltip" data-placement="right" data-original-title="Pink"></span></li><li><span class="bg-color-pinkDark" data-widget-setstyle="jarviswidget-color-pinkDark" rel="tooltip" data-placement="left" data-original-title="Fade Pink"></span></li><li><span class="bg-color-blueLight" data-widget-setstyle="jarviswidget-color-blueLight" rel="tooltip" data-placement="top" data-original-title="Light Blue"></span></li><li><span class="bg-color-teal" data-widget-setstyle="jarviswidget-color-teal" rel="tooltip" data-placement="top" data-original-title="Teal"></span></li><li><span class="bg-color-blue" data-widget-setstyle="jarviswidget-color-blue" rel="tooltip" data-placement="top" data-original-title="Ocean Blue"></span></li><li><span class="bg-color-blueDark" data-widget-setstyle="jarviswidget-color-blueDark" rel="tooltip" data-placement="top" data-original-title="Night Sky"></span></li><li><span class="bg-color-darken" data-widget-setstyle="jarviswidget-color-darken" rel="tooltip" data-placement="right" data-original-title="Night"></span></li><li><span class="bg-color-yellow" data-widget-setstyle="jarviswidget-color-yellow" rel="tooltip" data-placement="left" data-original-title="Day Light"></span></li><li><span class="bg-color-orange" data-widget-setstyle="jarviswidget-color-orange" rel="tooltip" data-placement="bottom" data-original-title="Orange"></span></li><li><span class="bg-color-orangeDark" data-widget-setstyle="jarviswidget-color-orangeDark" rel="tooltip" data-placement="bottom" data-original-title="Dark Orange"></span></li><li><span class="bg-color-red" data-widget-setstyle="jarviswidget-color-red" rel="tooltip" data-placement="bottom" data-original-title="Red Rose"></span></li><li><span class="bg-color-redLight" data-widget-setstyle="jarviswidget-color-redLight" rel="tooltip" data-placement="bottom" data-original-title="Light Red"></span></li><li><span class="bg-color-white" data-widget-setstyle="jarviswidget-color-white" rel="tooltip" data-placement="right" data-original-title="Purity"></span></li><li><a href="javascript:void(0);" class="jarviswidget-remove-colors" data-widget-setstyle="" rel="tooltip" data-placement="bottom" data-original-title="Reset widget color to default">Remove</a></li></ul></div>
                                        <span class="widget-icon"> <i _ngcontent-ylg-63="" class="fa fa-check txt-color-white"></i> </span>

                                        <h2> ToDo's </h2>

                                        <div class="widget-toolbar" role="menu">
                                            <div class="filters-dropdown-wrapper">
                                                <button type="button" class="btn btn-default" id="reportrange1" style="font-size: 12px;color: #534333;background: #FFF;border: 1px solid #ddd;height: 24px;margin-top: 3px;margin-right: 5px;">
                                                    <span class="changingSelector" data-id="selector1" id="ToDoDateRange">
                                                        Date range picker
                                                    </span>
                                                    <i class="fa fa-caret-down"></i>
                                                </button>

                                                <button class="btn btn-default" ng-click="RefreshToDoTask()" style="border: 0;background: none;padding: 0 5px;font-size: 16px;float: left;line-height: 31px;"><span class="fa fa-filter"></span></button>
                                            </div>
                                            <button class="btn btn-xs btn-default" data-toggle="modal" data-target="#TodoModal" ng-click="clearMsgs()"><i class="fa fa-plus"></i>&nbsp Add Todo</button>
                                        </div>
                                        <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                                    </header>

                                    <div role="content">
                                        <div class="widget-body no-padding smart-form" style="height:508px;">
                                            <div>
                                                <h5 class="todo-group-title"><i class="fa fa-warning"></i> Critical Tasks {{Critical.length}}</h5>
                                                <ul class="todo">

                                                    <li ng-repeat="x in Critical">
                                                        <span class="handle">
                                                            <label class="checkbox" data-TodoId="{{x.TodoId}}">
                                                                <input name="checkbox-inline" class="critical" type="checkbox" ng-click="DeleteTodo(x,$index,'Critical')">
                                                                <i></i>
                                                            </label>
                                                        </span>

                                                        <p>
                                                            {{x.Type}} - <strong>{{x.toDoTtitle}}</strong>
                                                            <br />
                                                            <strong ng-show="x.SiteName != null && x.SiteName != '' && x.SiteName != 'undefined'" style="color: gray;">@Entity.Title:</strong> {{x.SiteName}}
                                                            <strong style="color: gray;" ng-show="x.TaskName != null && x.TaskName != '' && x.TaskName != 'undefined'"> | Task: </strong> {{x.TaskName}}
                                                            <strong style="color: gray;" ng-show="x.Resources != null && x.Resources != '' && x.Resources != 'undefined'"> | Resource: </strong> {{x.Resources}}
                                                            <span class="date">{{x.ToDoDateTime}}  <a class="text-muted"><i class="fa fa-trash"></i></a></span>
                                                        </p>
                                                        <span ng-click="EditToDo(x)" class="glyphicon glyphicon-edit pull-right" style="cursor: pointer; margin-top: 17px; margin-right: 10px;"></span>
                                                    </li>
                                                </ul>
                                            </div>

                                            <div>
                                                <h5 class="todo-group-title"><i class="fa fa-exclamation"></i> Important Tasks {{Important.length}}</h5>
                                                <ul class="todo">

                                                    <li ng-repeat="x in Important">
                                                        <span class="handle">
                                                            <label class="checkbox">
                                                                <input name="checkbox-inline" type="checkbox" ng-click="DeleteTodo(x,$index,'Important')">
                                                                <i></i>
                                                            </label>
                                                        </span>

                                                        <p>
                                                            {{x.Type}} - <strong>{{x.toDoTtitle}}</strong>
                                                            <br />
                                                            <strong ng-show="x.SiteName != null && x.SiteName != '' && x.SiteName != 'undefined'" style="color: gray;">@Entity.Title:</strong> {{x.SiteName}}
                                                            <strong style="color: gray;" ng-show="x.TaskName != null && x.TaskName != '' && x.TaskName != 'undefined'"> | Task: </strong> {{x.TaskName}}
                                                            <strong style="color: gray;" ng-show="x.Resources != null && x.Resources != '' && x.Resources != 'undefined'"> | Resource: </strong> {{x.Resources}}
                                                            <span class="date">{{x.ToDoDateTime}} <a class="text-muted"><i class="fa fa-trash"></i></a></span>
                                                        </p>

                                                        <span ng-click="EditToDo(x)" class="glyphicon glyphicon-edit pull-right" style="cursor: pointer; margin-top: 17px; margin-right: 10px;"></span>
                                                    </li>
                                                </ul>
                                            </div>

                                            <div>
                                                <h5 class="todo-group-title"><i class="fa fa-check"></i> Completed Tasks {{Completed.length}}</h5>
                                                <ul class="todo">

                                                    <li ng-repeat="x in Completed">
                                                        <span class="handle">
                                                            <label class="checkbox">
                                                                <input name="checkbox-inline" type="checkbox">
                                                                <i></i>
                                                            </label>
                                                        </span>

                                                        <p>
                                                            {{x.Type}} - <strong>{{x.toDoTtitle}}</strong>
                                                            <br />
                                                            <strong ng-show="x.SiteName != null && x.SiteName != '' && x.SiteName != 'undefined'" style="color: gray;">@Entity.Title:</strong> {{x.SiteName}}
                                                            <strong style="color: gray;" ng-show="x.TaskName != null && x.TaskName != '' && x.TaskName != 'undefined'"> | Task: </strong> {{x.TaskName}}
                                                            <strong style="color: gray;" ng-show="x.Resources != null && x.Resources != '' && x.Resources != 'undefined'"> | Resource: </strong> {{x.Resources}}
                                                            <span class="date">{{x.ToDoDateTime}} <a class="text-muted"><i class="fa fa-trash"></i></a></span>
                                                        </p>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- end widget div -->
                    </div>
                    <!-- end widget -->
                </div>
            </article>
        </div>
        <div class="modal custom-modal  fade" id="TrackerModal">
            <div class="modal-dialog modal-lg" style="width:70%">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> <label> Task Tracker's </label><label class="labelFacode"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    </div>
                    <div class="modal-body" style="height:auto">
                        <div class="button-set" style="margin-bottom:5px;">
                            <button type="button" class='add-holiday btn btn-info btn-sm'><span class="glyphicon glyphicon-plus-sign"></span> Add Tracker</button>
                        </div>

                        <div class="tablewrapper">
                            <input type="hidden" id="TrackerTaskID" value="" />
                            <input type="hidden" id="SiteID" value="" />
                            <table class="table holiday-table table-bordered trckerlst" id="trckerlst">
                                @if (ViewBag.Id != 0 && ViewBag.Id < 0)
                                {
                                    <thead>
                                        <tr>
                                            <th>Groups<label style="color:darkred">*</label></th>
                                            <th>Title<label style="color:darkred">*</label></th>
                                            <th>Unit<label style="color:darkred">*</label></th>
                                            <th>Budget<label style="color:darkred">*</label></th>
                                            <th>Actual</th>

                                        </tr>

                                    </thead>
                                }
                                <tbody>
                                    <tr style="display:none">
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                    @if (ViewBag.Id != 0 && ViewBag.Id < 0)
                                    {
                                        <tr>
                                            <td><input type="text" placeholder="Select Tracker Group" id="TrackerGroup" class="form-control" ng-required="true"></td>
                                            <td><input type="text" class="inpt" name="Title" id="Title" value="" required /></td>
                                            <td><input type="text" class="inpt" name="Unit" id="Unit" value="" required /></td>
                                            <td><input type="text" class="inpt" name="Budget" id="Budget" value="" required /></td>
                                            <td><input type="text" class="inpt" name="Actual" id="Actual" value="" /></td>
                                            <td><a href="#" class="del-holiday  btn btn-default bg-color-red txt-color-white"><i class="fa fa-trash-o"></i></a></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn custom-btn1" style="float:right;" id="TrackerSave">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal custom-modal  fade" id="InventoryModal">
            <div class="modal-dialog modal-lg" style="width:70%">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"> <label> Task Inventory</label><label id="InventoryHeader"></label></h5>
                        <button type="button" style="color:white" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    </div>
                    <div class="modal-body" style="height:auto">
                        <div class="button-set" style="margin-bottom:5px;">
                            <button type="button" class='add-Item btn btn-info btn-sm'><span class="glyphicon glyphicon-plus-sign"></span> Add New Item</button>
                        </div>

                        <div class="tablewrapper">
                            <input type="hidden" id="InventorySiteTaskId" value="" />
                            <input type="hidden" id="InventorySiteId" value="" />
                            <input type="hidden" id="CurrentUserId" value="@ViewBag.UserId" />
                            <table class="table Inventory-Item-table table-bordered ItemList" id="ItemList">
                                <tbody>
                                    <tr style="display:none">
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn custom-btn1" type="submit" style="float:right;" id="SaveItem">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>



    </section>

    <style type="text/css">
            /*.caret {
                float: right;
                margin-top: 9px;
            }*/
            .modal-body {
                display: inline-block;
                width: 100%;
            }

            #regionviewchart > .canvasjs-chart-container {
                margin-left: -6px;
            }

            .error {
                border: 1px solid red;
            }

            .child-table tr td {
                padding: 0px !important;
            }

            .child-table tr th {
                padding: 0px !important;
            }

            table.dataTable {
                margin-top: 0px !important;
            }

            .dropdown-menu li a {
                color: #0064a9 !important;
            }

            .box-title {
                color: #0064a9;
            }

            .box-body ul li a {
                color: #770d0d;
            }

                .box-body ul li a:hover {
                    color: #337ab7;
                }

            .icon-margin {
                margin-right: 10px;
            }

            .selectedDate {
                background-color: forestgreen;
                color: white;
            }

            .StatusShadow {
                box-shadow: 0px 0px 11px #8080808a;
                border: 2px solid #FFF;
                border-radius: 4px;
            }

            [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x- ng-cloak {
                display: none !important;
            }


        .comboTreeInputWrapper {
        width: 100%;
        }

        .comboTreeWrapper {
        width: 100%;
        }

        .comboTreeInputWrapper button {
        width: auto;
        }
.dropzone .dz-preview .dz-image img{
  max-width: 100%;
}
.dz-preview .dz-success .dz-complete .dz-image-preview
{
   width: 4% !important;
    height: 50px !important;
}
    </style>


<script src="https://rawgit.com/enyo/dropzone/master/dist/dropzone.js"></script>
<script src="https://lokeshdhakar.com/projects/lightbox2/js/lightbox.min.js"></script>

<link rel="stylesheet" href="https://rawgit.com/enyo/dropzone/master/dist/dropzone.css">
<link rel="stylesheet" href="https://lokeshdhakar.com/projects/lightbox2/css/lightbox.css"/>

    <script src="~/Content/js/Project/jquery-cookie.js"></script>
    @*<script src="~/SmartAdmin/js/plugin/moment/moment.min.js"></script>*@
    <script src="~/Areas/Project/Content/Drop-Down-Combo-Tree/comboTreePlugin.js"></script>

    <script>
        function ConvertData(date) {

            if (date != null && date != "null" && date != undefined) {
                var dsdate = new Date(parseInt(date.substr(6)));
                var month = dsdate.getMonth() + 1;
                var day = dsdate.getDate();
                var year = dsdate.getFullYear();
                var formatdate2 = day + "/" + month + "/" + year
                return formatdate2;
            }
            else {

                return "";
            }

        }


        var TasksList = [];
        var StartDate, EndDate;
        var CookiesIdentifier = '@CookiesIdentifier';
        var fromdate = ($.cookie(CookiesIdentifier + "IssueFromDate") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueFromDate");
        var todate = ($.cookie(CookiesIdentifier + "IssueToDate") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueToDate");
        var marketid = ($.cookie(CookiesIdentifier + "IssueMarkets") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueMarkets");
        var taskid = ($.cookie(CookiesIdentifier + "IssueTasks") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueTasks");
        var IssueViewName = null;
        var MarketViewName = null;
        var mfromdate = ($.cookie(CookiesIdentifier + "MarketFromDate") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketFromDate");
        var mtodate = ($.cookie(CookiesIdentifier + "MarketToDate") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketToDate");
        var mmarketid = ($.cookie(CookiesIdentifier + "MarketMarkets") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketMarkets");
        var mtaskid = ($.cookie(CookiesIdentifier + "MarketTasks") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketTasks");
        var TimeFilter = 'Daily';
        var issuetasks = [];
        var markettsks = [];
        var maptsks = [];
        var projecttasks = [];
        var pageNum = 1;
        var SitepageNum = 1;
        var LogStatus = '';
        var siteId = 0;
        var IssueId = 0;
        var TskID = 0;
        var ProjectSiteId = 0;
        var btnBackFlag = 0;
        var workLog;
        var TasksList = [];
        var ResourceIssue = [];
        var fromdate = ($.cookie(CookiesIdentifier + "IssueFromDate") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueFromDate");
        var todate = ($.cookie(CookiesIdentifier + "IssueToDate") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueToDate");
        var marketid = ($.cookie(CookiesIdentifier + "IssueMarkets") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueMarkets");
        var taskid = ($.cookie(CookiesIdentifier + "IssueTasks") == undefined) ? null : $.cookie(CookiesIdentifier + "IssueTasks");
        var IssueViewName = null;
        var MarketViewName = null;
        var mfromdate = ($.cookie(CookiesIdentifier + "MarketFromDate") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketFromDate");
        var mtodate = ($.cookie(CookiesIdentifier + "MarketToDate") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketToDate");
        var mmarketid = ($.cookie(CookiesIdentifier + "MarketMarkets") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketMarkets");
        var mtaskid = ($.cookie(CookiesIdentifier + "MarketTasks") == undefined) ? null : $.cookie(CookiesIdentifier + "MarketTasks");
        var TimeFilter = 'Daily';
        var issuetasks = [];
        var markettsks = [];
        var maptsks = [];
        var projecttasks = [];
        var pageNum = 1;
        var SitepageNum = 1;
        var LogStatus = '';
        var siteId = 0;
        var IssueId = 0;
        var TskID = 0;
        var ProjectSiteId = 0;
        var btnBackFlag = 0;
        var workLog;
        var x = 0;
        var TabFlag = 'Tracking';
        var tskid = 0;
        var UserID = @ViewBag.UserId;
    </script>

    <script src="~/Areas/Project/Content/Project/LoadFilters.js"></script>
    <script src="https://cdn.rawgit.com/Eonasdan/bootstrap-datetimepicker/e8bddc60e73c1ec2475f827be36e1957af72e2ea/src/js/bootstrap-datetimepicker.js"></script>


    @section scripts{
        <!-- Vector Maps Plugin: Vectormap engine, Vectormap language -->
        <!-- SPARKLINES -->
        <link href="~/Content/js/Plugins/Pagination/css/simplePagination.css" rel="stylesheet" />
        <script src="~/AdminLTE/plugins/sparkline/js/jquery.sparkline.js"></script>
        <script src="~/SmartAdmin/js/plugin/vectormap/jquery-jvectormap-1.2.2.min.js"></script>
        <script src="~/SmartAdmin/js/plugin/vectormap/jquery-jvectormap-world-mill-en.js"></script>
        <!-- Full Calendar -->
        <script src="~/SmartAdmin/js/plugin/jquery-nestable/jquery.nestable.min.js"></script>
        <script src="~/Content/js/Plugins/validation/parsley.min.js"></script>
        <script src="~/Content/js/Project/canvasjs.min.js"></script>
        <script src="~/Areas/Project/Content/Project/Charts.js"></script>
        <script src="~/Content/js/Plugins/MultiselectBootstrap/js/bootstrap-multiselect.js"></script>
        <script src="~/SmartAdmin/js/plugin/fullcalendar/jquery.fullcalendar.min.js"></script>
        <script src="~/Content/js/Plugins/Pagination/js/simplePagination.js"></script>
        <script src="~/Content/js/Project/PMDashboard.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js"></script>
        <script src="~/Content/js/Plugins/QueryBuilder/js/moment.min.js"></script>
        @*<script src="~/AdminLTE/plugins/daterangepicker/js/daterangepicker.js"></script>*@
        @*<script src="~/AdminLTE/plugins/knob/js/jquery.knob.js"></script>*@
        <script src="~/Content/js/Plugins/angularmultislect/multiselect.js"></script>
        <script src="~/Areas/Project/Content/Project/groupMultiSelect.js"></script>
        @*<script src="~/Areas/Project/Content/Project/DashboardScript.js"></script>*@
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-sanitize.js"></script>
        <script src="https://angular-ui.github.io/ui-select/dist/select.js"></script>
        <script src="~/Content/js/Project/Dashboard/DashboardController.js"></script>
        <script src="~/SmartAdmin/js/plugin/flot/jquery.flot.cust.min.js"></script>
        <script src="~/SmartAdmin/js/plugin/flot/jquery.flot.resize.min.js"></script>
        <script src="~/SmartAdmin/js/plugin/flot/jquery.flot.time.min.js"></script>
        <script src="~/SmartAdmin/js/plugin/flot/jquery.flot.tooltip.min.js"></script>
        <script src="~/Areas/Project/Content/Project/DashboardSearch.js"></script>
        @*<script src="~/Areas/Project/Content/Project/WorkLogsScript.js"></script>*@
        <script src="https://code.jquery.com/ui/1.8.23/jquery-ui.min.js"
                integrity="sha256-sEFM2aY87nr5kcE4F+RtMBkKxBqHEc2ueHGNptOA5XI="
                crossorigin="anonymous"></script>
        <script src="~/Areas/Project/Content/jquery.dynatree.min.js"></script>
        <script src="~/Content/js/Plugins/notify/js/notify.js"></script>
        <script src="~/AdminLTE/plugins/datepicker/js/bootstrap-datepicker.js"></script>
        <link href="~/AdminLTE/plugins/datepicker/css/datepicker3.css" rel="stylesheet" />


        <script type="text/javascript">
            var ItemCategoryData=[];
            var InventoryItemData=[];
            var ItemList=[];
            
            var IList=0;
            var InventoryCount=0;

            var myDataaa = [];
            var TaskName = '';
            function CreateTaskObject(data) {
                var options = [];[{
                    label: '', subItems: []
                }];
                var child = []
                for (var i = 0; i < data.length; i++) {
                    TaskName = data[0].Title
                    child = [];
                    for (var j = 0; j < data[i].Tracker.length; j++) {
                        child.push(data[i].Tracker[j].Title);
                    }
                    options.push({
                        label: data[i].Title, subItems: child
                    })
                }
                return options;
            }
            let TasksGroupingdynatree = function (Tracker) {

                var optgroup2 = '';
                var options = '';
                for (var i = 0; i < Tracker.length; i++) {
                    if (Tracker[i].Tracker.length > 0) {
                        var option = TasksGroupingdynatree(Tracker[i].Tracker);
                        options += '<li id="' + Tracker[i].TrackerGroupId + '">' + Tracker[i].Title + '<ul>' + option + '</ul></li>'; //'<li><ul id="' + Tasks[i].Task + '"></ul>' + option + '</li>';

                    }
                    else {
                        options += '<li id="' + Tracker[i].TrackerGroupId + '" selected="selected">' + Tracker[i].Title + '</li>';
                    }
                }
                return options;
            }
            function GegInitailTasks(name) {
                var initial = {
                }
                Initail = [];
                //if ($.cookie(name) != undefined) {
                //    Initail = $.cookie(name).split(',')
                //}
                if (Initail.length >= 1) {
                    //tsks = '{initial: {parent:"' + Initail[0] + '",children:["' + Initail[1] + '"]}'
                    initial.parent = Initail[0];
                    initial.children = [];
                }
                else if (Initail.length >= 2) {
                    initial.parent = Initail[0];
                    initial.children = [1];
                }
                if (Initail.length == 0) {
                    initial.parent = TaskName;
                    initial.children = [];
                }
                return initial;

            }
            function list_to_tree(list) {
                var map = {}, node, roots = [], i;
                for (i = 0; i < list.length; i += 1) {
                    map[list[i].id] = i; // initialize the map
                    list[i].children = []; // initialize the children
                }
                for (i = 0; i < list.length; i += 1) {
                    node = list[i];
                    if (node.ParentId !== "0") {
                        // if you have dangling branches check that map[node.parentId] exists
                        list[map[node.ParentId]].children.push(node);
                    } else {
                        roots.push(node);
                    }
                }
                return roots;
            }
            function getChilds(tasks) {
                let subTasks = [];
                $.each(tasks, function (key, value) {
                    let subs = {
                        id: value.TrackerGroupId,
                        title: value.Title
                    }
                    let sbs = getChilds(value.Tracker);
                    if (sbs.length > 0) {
                        subs.subs = sbs;
                        //  getChilds(value.Tasks);
                    }
                    subTasks.push(subs);
                });
                return subTasks;
            }

            function Strat(_taskId,_SiteId) {

                var TkId = _taskId; //$("#TrackerTaskID").val();

                document.getElementById("TrackerTaskID").value = _taskId;
                document.getElementById("SiteID").value = _SiteId;
                //  $(".trckerls tbody").empty();
                $(".trckerlst tbody").text("");
                $.ajax({
                    method: "POST",
                    url: '/Project/Tracker/TrackerGroupsDynatree',
                    async: false,
                    data: { 'filter': "Get_Tasks_Trackers_Groups", TaskId: TkId },
                    success: function (result) {
                        myDataaa = [];
                        $.each(result, function (key, value) {
                            let tasks = {
                                id: value.TrackerGroupId,
                                title: value.Title
                            }
                            let subs = getChilds(value.Tracker);
                            if (subs.length > 0) {
                                tasks.subs = subs;
                            }
                            myDataaa.push(tasks);
                        });

                    }
                });
                window.tasksComboTree = $('.aaa').comboTree({
                    source: myDataaa,
                    isMultiple: false,
                });
                $.ajax({
                    method: "POST",
                    url: '/Project/Tracker/GetSiteTaskTrackers',
                    async: false,
                    data: { 'filter': "GetSiteTrackerTitles", TaskId: TkId,SiteId:_SiteId },
                    success: function (resu) {
                        if (resu.length > 0) {
                            if (x != 1) {
                                var holidaythread = $.parseHTML(`<thead><tr><th>Groups<label style="color:darkred">*</label></th><th>Title<label style="color:darkred">*</label></th><th>Unit<label style="color:darkred">*</label></th><th>Budget<label style="color:darkred">*</label></th><th>Actual</th><th>Delete</th></tr></thead>`);
                                $(".holiday-table").append(holidaythread);
                                x = 1;
                            }
                            for (var i = 0; i < resu.length; i++) {


                                var title = '<tr><td><input type="text" class="form-control" disabled placeholder="Select Tracker Group" id="TrackerGroup" value="' + resu[i].TrackerGroup +" | "+ resu[i].GroupCode+ '"   ng-required="true"></td><td><select disabled class="form-control" id="TrackerTitle" onfocus="myFunction(this);" onChange="check(this);" required><option value="X">Select Tracker Title</option><option value="' + resu[i].TrackerId + '" selected>' + resu[i].Title + '</select>'
                                var Unit = '<td><input type="text" class="inpt form-control"  value="' + resu[i].Unit + '" disabled /></td>'
                                var Budget = '<td><input type="text" class="inpt form-control"  value="' + resu[i].Budget + '" disabled/></td>';
                                var Actual = '<td><input type="text" class="inpt form-control"  value="' + resu[i].Actual + '" /></td><td style="Display:none;"><input type="text"class="inpt" name="SiteTaskTrackerId" id="SiteTaskTrackerId"value="' + resu[i].SiteTaskTrackerId + '" /></td><td style="Display:none;"><input type="text"class="inpt" name="IsDeleted" id="IsDeleted" value="False" /></td><td><a href="#" class="del-holiday  btn btn-default bg-color-red txt-color-white"><i class="fa fa-trash-o"></i></a></td>';
                                var holidayRow = $.parseHTML(title + Unit + Budget + Actual);
                                $(".holiday-table tbody").append(holidayRow);
                                //window.tasksComboTree = $('.aaa').comboTree({
                                //    source: myData,
                                //    isMultiple: false,
                                //});
                            }
                        }
                    }
                });

            }

            // Inventory Items Functions 

            function StartInventoryItems(_taskId,SiteId){
                debugger;
                IList=0;
                InventoryCount=0;
                var ISiteTaskId = _taskId;
                var _ISiteId=SiteId;
                document.getElementById("InventorySiteTaskId").value = ISiteTaskId;
                document.getElementById("InventorySiteId").value = _ISiteId;
                $(".Inventory-Item-table > thead").remove();
                $(".Inventory-Item-table > tbody").empty();
                GetInventoryHeaderData(_ISiteId,ISiteTaskId)
                ItemCategoryData=GetItemCategory(ISiteTaskId);
                InventoryItemData =GetInventoryItems(0);
                GetInventoryItemsData(_taskId,_ISiteId);
            }
            function GetInventoryHeaderData(_ISiteId,ISiteTaskId)
            {
                debugger;
                var SId=_ISiteId;
                var STId=ISiteTaskId;
                $.ajax({
                    method: "GET",
                    async: false,
                    url: '/Task/GetSiteTaskInventoryHeader',
                    data: {Filter:"Get_Header_Info",TaskId:STId,SiteId:SId},
                    success: function (result) {
                        $("#InventoryHeader").empty();
                        var Code='<span style="margin-left:10px">Bus Code: <span style="font-weight: 500"> '+result[0].BusCode+'</span></span>';
                        Code+='<span style="margin-left:10px">Task Name: <span style="font-weight: 500">'+result[0].TaskName+'</span></span>';
                        Code+='<span style="margin-left:10px">Created By: <span style="font-weight: 500">'+result[0].CreatedBy+'</span></span>';
                        Code+='<span style="margin-left:10px">Created On: <span style="font-weight: 500">'+result[0].CreatedOn+'</span></span>';
                        Code+='<span style="margin-left:10px">Updated By: <span style="font-weight: 500">'+result[0].UpdatedBy+'</span></span>';
                        Code+='<span style="margin-left:10px">Updated On: <span style="font-weight: 500">'+result[0].UpdatedOn+'</span></span>';

                        $("#InventoryHeader").append(Code);
                    }
                });
            }
            function GetInventoryItemsData(_taskId,_ISiteId){
                $.ajax({
                    method: "Get",
                    async: false,
                    url: '/Project/Task/GetSiteTaskInventory',
                    data: { 'Filter': "Get_SiteTask_Inventory", TaskId: _taskId,SiteId:_ISiteId },
                    success: function (result) {
                        if(result.length>0)
                        {
                            
                            iteration=0;
                            $.each(result,function(key,value)
                            {
                                if (IList== 0) {
                                    var holidaythread = $.parseHTML(`<thead><tr><th>Category<label style="color:darkred">*</label></th><th>Item<label style="color:darkred">*</label></th><th>Quantity<label style="color:darkred">*</label></th><th>Barcode</th><th>Description</th><th>Actions</th></tr></thead>`);
                                    $(".Inventory-Item-table").append(holidaythread);
                                    IList++;
                                }
                                var inventoryRow ='<tr><td><select id="CategoryId" class="form-control ItemCategory" required ></select></td>';
                                inventoryRow+='<td><select class=" form-control inpt InventoryItems" name="Item" id="Item" required ></select></td>';
                                inventoryRow+='<td><input type="number" min="0" class="inpt" onkeypress="return isNumberKey(event)" name="Quantity" id="Quantity" value='+value.Quantity+' required /></td>';
                                inventoryRow+='<td><input type="text" class="inpt" name="Barcode" id="Barcode" value='+value.BarCode+' required /></td>';
                                inventoryRow+='<td><textarea class="form-control" name="Description" id="Description" rows="3" cols="25" style="resize:none" >'+value.Description+'</textarea></td>';
                                inventoryRow+='<td style="display:none"><input type="hidden" id="SiteTaskInventoryId" value="'+value.SiteTaskInventoryId+'"/></td>'
                                inventoryRow+='<td style="display:none"><input type="text" id="IsModified" value="0"/></td>'
                                inventoryRow+='<td><div class="btn-group"><a href="#" class="del-Item  btn btn-danger txt-color-white"><i class="fa fa-trash-o"></i></a>';
                                inventoryRow+='<a href="#" id="expandbtn" class="open-childrow  btn btn-primary txt-color-white"><i class="glyphicon glyphicon-plus-sign"></i></a></div></td> </tr>';
                                
                                inventoryRow+='<tr class="child-row" style="display: none;" >';
                                inventoryRow+='<td colspan="6">';
                                inventoryRow+='<form action="/Task/UploadAttachments" class="dropzone av-dropzone" id="drop'+InventoryCount+'" data-SiteTaskInventoryId='+value.SiteTaskInventoryId+'></form>';
                                inventoryRow+='</td></tr>';

                                $(".Inventory-Item-table > tbody").append(inventoryRow);

                                $.ajax({
                                    method: "Get",
                                    async: false,
                                    url: '/Project/Task/GetSiteTaskInventoryAttachments',
                                    data: { 'Filter': "Get_SiteTask_Inventory_Attachments", SiteTaskInventoryId:value.SiteTaskInventoryId },
                                    success: function (result) {
                                        $("#drop" +  InventoryCount).dropzone({
                                            url: "/Task/UploadAttachments",
                                            uploadMultiple:true,
                                            addRemoveLinks: true,
                                            thumbnailWidth: null,
                                            thumbnailHeight: "120",
                                            dictRemoveFileConfirmation:"Are You Sure You Want To Remove?",
                                            init: function() {
                                                this.on("thumbnail", function(file, data) {
                                                    $(file.previewElement).prepend('<a href="'+ file.dataURL+'" class="preview-img" data-lightbox="preview'+value.SiteTaskInventoryId+'" title=""><i class="fa fa-eye"></i></a>');
                                                    lightbox.option({
                                                        'resizeDuration': 200,
                                                        'wrapAround': true
                                                    });
                                                });
                                                this.on("sending",function(file,object,formData){
                                                    var id=parseInt(this.element.getAttribute("data-SiteTaskInventoryId"));
                                                    var CategoryId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("ItemCategory")[0].value);
                                                    var ItemId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("InventoryItems")[0].value)
                                                    formData.append("SiteTaskInventoryId",id);
                                                    formData.append("CategoryId",CategoryId);
                                                    formData.append("ItemId",ItemId);
                                                });
                                                this.on("removedfile",function(file,data,yes){
                                                    debugger;
                                                    var id=parseInt(this.element.getAttribute("data-SiteTaskInventoryId"));
                                                    var CategoryId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("ItemCategory")[0].value);
                                                    var ItemId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("InventoryItems")[0].value)
                                                    $.ajax({
                                                        method: "POST",
                                                        async: false,
                                                        url: '/Task/RemoveSiteTaskInventory',
                                                        data: {Filter:"DeleteAttachmentById",SiteTaskInventoryId:id,CategoryId:CategoryId,ItemId:ItemId,FileName:file.name},
                                                        success: function (result) {
                                                        }
                                                    });
                                                });
                                                var myDropZone=this;
                                                debugger;
                                                $.each(result,function(i,e){
                                                    var imagepath=e.SubDirectory+"\\"+e.FileNameWithExtension;
                                                    var mockFile = { name: e.FileNameWithExtension,size:e.ContentLength,dataURL:imagepath };       
                                                    myDropZone.emit("addedfile", mockFile);
                                                    myDropZone.emit("thumbnail", mockFile,imagepath);
                                                    myDropZone.emit("success", mockFile);
                                                    myDropZone.emit("complete", mockFile);
                                                });
                                                
                                        
                                        
           

                                            }
                                    
                                    
                                        });
                                    }
                                });

                                 InventoryCount++;
                            });
                           
                            BindItemsAndCategory("");
                            $('#ItemList tbody  tr').each(function (i, e) {
                                var cols = $(e).find('td');
                                if(cols.length>3)
                                {
                                    var catId= $(cols[0]).find('#CategoryId');
                                    catId.val(result[iteration].CategoryId);

                                    var TempData= GetInventoryItems(catId.val());
                                    var NextDropDown=catId.parent().next('td').children();
                                    NextDropDown.empty();
                                    NextDropDown.append("<option value=''>Select Item</option>")
                                    $.each( TempData, function( key, value )
                                    {
                                        NextDropDown.append(value);
                                    });

                                    var Item= $(cols[1]).find('#Item');
                                    Item.val(result[iteration].ItemId);
                                    
                                    iteration++;
                                }
                            });
                            
                        }
                    }
                });
            }
            function GetItemCategory(_ISiteTaskId)
            {
                var TempCategory=[];
                $.ajax({
                    method: "Get",
                    async: false,
                    url: '/Project/Task/GetUEtypes',
                    data: { 'Filter': "Get_UE_Type", TaskId: _ISiteTaskId },
                    success: function (result) {
                        $.each(result, function (key, value) {
                            let types = "<option value="+value.TypeId+">"+value.TypeName+"</option>"
                            TempCategory.push(types);
                        });
                    }
                });
                return TempCategory;
            }
            function GetInventoryItems(_UETypeId)  {
                debugger;
                var TempInventoryItem=[];
                $.ajax({
                    method: "Get",
                    async: false,
                    url: '/Project/Task/GetUEItems',
                    data: { 'Filter': "Get_UE_Items", UETypeId: _UETypeId },
                    success: function (result) {
                        $.each(result, function (key, value) {
                            let types = "<option value="+value.UEId+">"+value.ItemName+"</option>";
                            TempInventoryItem.push(types);
                        });
                    }
                });
                return TempInventoryItem;
            }
            function BindItemsAndCategory(Info){
                var RowInfo=Info;
                if(RowInfo=="NewRow"){

                    $(".ItemCategory").last().empty();
                    $(".ItemCategory").last().append("<option value=''>Select Category</option>")
                    $.each( ItemCategoryData, function( key, value )
                    {
                        $('.ItemCategory').last().append(value);
                    });

                    $(".InventoryItems").last().empty();
                    $(".InventoryItems").last().append("<option value=''>Select Item</option>")
                    $.each( InventoryItemData, function( key, value )
                    {
                        $('.InventoryItems').last().append(value);
                    });
                }
                else{
                    $(".ItemCategory").empty();
                    $(".ItemCategory").append("<option value=''>Select Category</option>")
                    $.each( ItemCategoryData, function( key, value )
                    {
                        $('.ItemCategory').append(value);
                    });

                    $(".InventoryItems").empty();
                    $(".InventoryItems").append("<option value=''>Select Item</option>")
                    $.each( InventoryItemData, function( key, value )
                    {
                        $('.InventoryItems').append(value);
                    });

                }
                
                $(".ItemCategory").change(function(){
                    var TempData= GetInventoryItems(parseInt($(this).val()));
                    var NextDropDown=$(this).parent().next('td').children();
                    NextDropDown.empty();
                    NextDropDown.append("<option value=''>Select Item</option>")
                    $.each( TempData, function( key, value )
                    {
                        NextDropDown.append(value);
                    });
                });

            }
            function SaveInventoryItems()
            {
                debugger;
                var getErrorCount=0;
                var InventoryTaskId=$("#InventorySiteTaskId").val();
                var InventorySiteId=$("#InventorySiteId").val();
                var CurrentUserId=$("#CurrentUserId").val();
                var InventoryData=[];
                $('#ItemList tbody tr').each(function (i, e) {
                    var cols = $(e).find('td');
                    if(cols.length>3){
                        if($(cols[0]).find('#CategoryId').val()=="")
                        {
                            $(cols[0]).find('#CategoryId').addClass( "error" );
                            getErrorCount++;
                        }
                        else
                        {
                            $(cols[0]).find('#CategoryId').removeClass( "error" )
                        }
                        if($(cols[1]).find('#Item').val()=="")
                        {
                            $(cols[1]).find('#Item').addClass( "error" );
                            getErrorCount++;
                        }
                        else
                        {
                            $(cols[1]).find('#Item').removeClass( "error" )
                        }
                        if($(cols[2]).find('#Quantity').val()=="" ||  $(cols[2]).find('#Quantity').val()==0)
                        {
                            $(cols[2]).find('#Quantity').addClass( "error" );
                            getErrorCount++;
                        }
                        else
                        {
                            $(cols[2]).find('#Quantity').removeClass( "error" )
                        }
                            var rowValues = {
                            SiteId:InventorySiteId,
                            SiteTaskId: InventoryTaskId,
                            CategoryId: $(cols[0]).find('#CategoryId').val(),
                            ItemId: $(cols[1]).find('#Item').val(),
                            Quantity: $(cols[2]).find('#Quantity').val(),
                            BarCode: $(cols[3]).find('#Barcode').val(),
                            Description: $(cols[4]).find('#Description').val(),
                            SiteTaskInventoryId:$(cols[5]).find("#SiteTaskInventoryId").val(),
                            IsModified:parseInt($(cols[6]).find("#IsModified").val())
                        };
                        InventoryData.push(rowValues);
                    }
                });

                if(InventoryData.length>0 && getErrorCount==0)
                {
                    $.ajax({
                        type: "POST",
                        url: '/Project/Task/ManageSiteTaskInventory',
                        async: false,
                        data: { Filter: 'Add_SiteTask_Inventory' ,STI_List:InventoryData,STI_Attachments:null,SiteTaskId:InventoryTaskId,SiteId:InventorySiteId,UserId:CurrentUserId},
                        success: function (data) {
                            swal("Saved !", "Inventory Items Saved Successfully!", "success");
                            $('#InventoryModal').modal('hide');
                        },
                    });
                }
            }

            $(document).on("click",".del-Item",function()
            {
                var c=confirm("Are you sure you want to delete this record?");
                if(c)
                {
                    debugger;
                    $(this).parent().parent().parent().closest('tr').next().remove();
                    $(this).parent().parent().parent().remove();
                    var id=parseInt($(this).parent().parent().parent().find("#SiteTaskInventoryId").val());
                    var CategoryId=parseInt($(this).parent().parent().parent().find("#CategoryId").val());
                    var ItemId=parseInt($(this).parent().parent().parent().find("#Item").val());

                    $.ajax({
                        method: "POST",
                        async: false,
                        url: '/Task/RemoveSiteTaskInventory',
                        data: {Filter:"DeleteSiteTaskInventory",SiteTaskInventoryId:id,CategoryId:CategoryId,ItemId:ItemId,FileName:''},
                        success: function (result) {
                        }
                    });
                }
            });
            function isNumberKey(evt)
            {
                var charCode = (evt.which) ? evt.which : event.keyCode
                if (charCode > 31 && (charCode < 48 || charCode > 57))
                    return false;

                return true;
            }

            $(document).on("input",".Inventory-Item-table > tbody > tr > td",function(){
                if($(this).children()[0].value!="" && $(this).children()[0].value!=0){
                    $(this).children()[0].classList.remove("error");
                }
                else{
                    if(!$(this).children()[0].classList.contains("error"))
                    {
                        $(this).children()[0].classList.add("error");
                    }
                }
            })
            $(document).on("input",".Inventory-Item-table > tbody > tr ",function(){
                debugger;
                var currentObejct=$(this).find("#IsModified");
                currentObejct.val("1");

                var CatId=$(this).find("#CategoryId").val();
                var ItemId =$(this).find("#Item").val();
                var expandbtn=$(this).find("#expandbtn");
                if(CatId!="" && ItemId!="")
                {
                    expandbtn.removeAttr("disabled");
                }
                else
                {
                    expandbtn.attr("disabled",true);
                }
                
            });

            $(document).ready(function () {
                angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = '@CookiesIdentifier';
            /// Inventory item 
            $(".ItemCategory").change(function(){
                var TempData= GetInventoryItems(parseInt($(this).val()));
                var NextDropDown=$(this).parent().next('td').children();
                NextDropDown.empty();
                NextDropDown.append("<option value=''>Select Item</option>")
                $.each( TempData, function( key, value )
                {
                    NextDropDown.append(value);
                });
                });
                
                $("#SaveItem").click(function(){
                    SaveInventoryItems();
                });
                $(".add-Item").on("click", function () {
                    debugger;
                    if (IList== 0) {
                        var holidaythread = $.parseHTML(`<thead><tr><th>Category<label style="color:darkred">*</label></th><th>Items<label style="color:darkred">*</label></th><th>Quantity<label style="color:darkred">*</label></th><th>Barcode</th><th>Description</th><th>Actions</th></tr></thead>`);
                        $(".Inventory-Item-table").append(holidaythread);
                        IList++;
                    }
                    var inventoryRow = '<tr><td><select id="CategoryId" class="form-control ItemCategory" required ></select></td>';
                    inventoryRow+= '<td><select class=" form-control inpt InventoryItems" name="Item" id="Item"required ></select></td>';
                    inventoryRow+='<td><input type="number" min="0" class="inpt numeric" onkeypress="return isNumberKey(event)" name="Quantity" id="Quantity" value="" required /></td>';
                    inventoryRow+='<td><input type="text" class="inpt" name="Barcode" id="Barcode" value="" required /></td> ';
                    inventoryRow+='<td><textarea class="form-control" name="Description" id="Description" rows="3" cols="25" style="resize:none"  ></textarea></td>';
                    inventoryRow+='<td style="display:none"><input type="hidden" id="SiteTaskInventoryId" value="0"/></td>'
                    inventoryRow+='<td style="display:none"><input type="text" id="IsModified" value="0"/></td>'
                    inventoryRow+='<td><div class="btn-group"><a href="#" class="del-Item  btn btn-danger txt-color-white"><i class="fa fa-trash-o"></i></a><a href="#" id="expandbtn" disabled class="open-childrow  btn btn-primary txt-color-white"><i class="glyphicon glyphicon-plus-sign"></i></a></div></td> </tr>';

                    
                    inventoryRow+='<tr class="child-row" style="display: none;">';
                    inventoryRow+='<td colspan="6">';
                    inventoryRow+='<form action="/upload-target" class="dropzone av-dropzone" id="drop'+InventoryCount+'" data-SiteTaskInventoryId="0"></form></td></tr>';

                    $(".Inventory-Item-table > tbody").append(inventoryRow);
                    $("#drop" +  InventoryCount).dropzone({
                        url: "/Task/UploadAttachments",
                        maxFilesize: 3,
                        addRemoveLinks: true,
                        dictRemoveFileConfirmation:"Are You Sure You Want To Remove?",
                        init: function() {
                            this.on("thumbnail", function(file, data) {
                                $(file.previewElement).prepend('<a href="'+ file.dataURL+'" class="preview-img" data-lightbox="preview'+InventoryCount+'" title=""><i class="fa fa-search"></i></a>');
                                lightbox.option({
                                    'resizeDuration': 200,
                                    'wrapAround': true
                                });
                            });
                            this.on("sending",function(file,object,formData){
                                debugger;
                                var id=parseInt(this.element.getAttribute("data-SiteTaskInventoryId"));
                                var CategoryId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("ItemCategory")[0].value);
                                var ItemId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("InventoryItems")[0].value)
                                formData.append("SiteTaskInventoryId",id);
                                formData.append("CategoryId",CategoryId);
                                formData.append("ItemId",ItemId);
                            });
                            this.on("removedfile",function(file,data,yes){
                                debugger;
                                var id=parseInt(this.element.getAttribute("data-SiteTaskInventoryId"));
                                var CategoryId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("ItemCategory")[0].value);
                                var ItemId=parseInt(this.element.parentNode.parentNode.previousSibling.getElementsByClassName("InventoryItems")[0].value)
                                $.ajax({
                                    method: "POST",
                                    async: false,
                                    url: '/Task/RemoveSiteTaskInventory',
                                    data: {Filter:"DeleteAttachmentById",SiteTaskInventoryId:id,CategoryId:CategoryId,ItemId:ItemId,FileName:file.name},
                                    success: function (result) {
                                    }
                                });
                            });
                        }
                    });
                    InventoryCount++;

                    BindItemsAndCategory("NewRow");

                       
                });

            ////////////////////
                $(".add-holiday").on("click", function () {
                    if (x == 0) {
                        var holidaythread = $.parseHTML(`<thead><tr><th>Groups<label style="color:darkred">*</label></th><th>Title<label style="color:darkred">*</label></th><th>Unit</th><th>Budget</th><th>Actual<label style="color:darkred">*</label></th><th>Delete</th></tr></thead>`);
                        $(".holiday-table ").append(holidaythread);
                        x++;
                    }
                    var holidayRow = $.parseHTML(`<tr><td><input type="text" placeholder="Select Tracker Group"  id="TrackerGroup" class="form-control aaa"  ></td><td><select class="form-control" id="TrackerTitle" onfocus="myFunction(this);" onChange="check(this);" ><option value="X">Select Tracker Title</option> </select></td><td><input type="text"class="inpt form-control" name="Unit" id="Unit" value="" disabled/></td><td><input type="text"class="inpt form-control" name="Budget" id="Budget"value="" disabled/></td><td><input type="text"class="inpt form-control" name="Actual" id="Actual"value="" /></td><td style="Display:none;"><input type="text"class="inpt" name="SiteTaskTrackerId" id="SiteTaskTrackerId"value="0" /></td><td style="Display:none;"><input type="text"class="inpt" name="IsDeleted" id="IsDeleted" value="False" /></td><td><a href="#" class="del-holiday  btn btn-default bg-color-red txt-color-white"><i class="fa fa-trash-o"></i></a></td></tr>`);
                    $(".holiday-table tbody").append(holidayRow);
                    window.tasksComboTree = $('.aaa').comboTree({
                        source: myDataaa,
                        isMultiple: false,
                        onChange: function () {
                            // alert("hello");
                        }
                    });

                });

                $("body").on("click", ".del-holiday", function () {
                    var a = $(this).closest('td').siblings().find('#IsDeleted');
                    a.val("True");
                    $(this).parents('tr').css("display", "none");
                });


                $("body").on("click",".open-childrow", function(){
                    $(this).parents('tr').next('tr.child-row').slideToggle();
                    let icon = $(this).find('i');
                    if(icon.hasClass('glyphicon-plus-sign')){
                        icon.attr('class','glyphicon glyphicon-minus-sign')
                    }
                    else if(icon.hasClass('glyphicon-minus-sign')){
                        icon.attr('class','glyphicon glyphicon-plus-sign')
                    }
                });

            });
            function check(element) {
                //var x = $(element).value.selectedIndex;
                //var y = $(element).value.options;
                ////document.getElementById("TrackerTitle").selectedIndex = x;
                //alert("Index: " + y[x].index + " is " + y[x].text);
                //$(element).parents('tr').find("#TrackerTitle  option").filter(function () {
                //    //may want to use $.trim in here
                //    return $(this).text() == y[x].text;
                //}).prop('selected', true);
                var val = $(element).parents('tr').find("#TrackerGroup").val();
                if (val != "" && val != 0) {
                    var TkId = $("#TrackerTaskID").val();
                    $.ajax({
                        method: "POST",
                        url: '/Project/Tracker/GetTaskTrackersTitles',
                        async: false,
                        data: { TrackerGroupId: val, TaskId: TkId},
                        success: function (ress) {
                            if (ress.length > 0) {

                                for (i = 0; i < ress.length; i++) {
                                    if (ress[i].TrackerId == element.value) {
                                        $(element).parents('tr').find("#Unit").val(ress[i].Unit);
                                        $(element).parents('tr').find("#Budget").val(ress[i].Budget);
                                        $(element).parents('tr').find("#Actual").val(ress[i].Actual);
                                        $(element).parents('tr').find("#SiteTaskTrackerId").val(ress[i].SiteTaskTrackerId);
                                    }
                                }
                            }
                        }
                    });
                    //   var x = $(element).value.selectedIndex;
                }
            }
            function myFunction(element) {

                var val = $(element).parents('tr').find("#TrackerGroup").val();
                $(element).parents('tr').find("#TrackerTitle option[value !='X']").each(function () {
                    if ($(this).val() == 'X') {

                    } else {
                        $(this).remove();
                    }
                });
                if (val != "" && val != 0) {
                    var TkId = $("#TrackerTaskID").val();
                    $.ajax({
                        method: "POST",
                        url: '/Project/Tracker/GetTaskTrackersTitles',
                        async: false,
                        data: { TrackerGroupId: val, TaskId: TkId},
                        success: function (res) {
                            if (res.length > 0) {

                                for (i = 0; i < res.length; i++) {

                                    $(element).parents('tr').find("#TrackerTitle").append("<option value=" + res[i].TrackerId + ">" + res[i].Title + "</option>");
                                }
                            }
                        }

                    });
                    //$("#TrackerTitle").append("<option>ssss<option>");
                    //alert("The input value has changed. The new value is: " + val);
                }

            }

            $("#TrackerSave").click(function () {
                var Data = [];
                var Coont = 0;
                var Result = true;
                var TkId = $("#TrackerTaskID").val();
                var SiteId=  $("#SiteID").val();
                //var isValid = $("#Trackersss").valid();

                //var NotNull = true;
                //e.preventDefault();
                $('#trckerlst tbody tr').each(function (i, e) {
                    var cols = $(e).find('td');
                    if ($(cols[4]).find('input').val() != undefined) {
                        var rowValues = {
                            TrackerGroup: $(cols[0]).find('#TrackerGroup').val(),
                            TaskTrackerId: $(cols[1]).find('#TrackerTitle').val(),
                            Actual: $(cols[4]).find('input').val(),
                            SiteTaskTrackerid: $(cols[5]).find('input').val(),
                            IsDeleted: $(cols[6]).find('input').val(),
                            TaskId: TkId,
                            SiteId:SiteId,
                        };

                        Data.push(rowValues);
                        //$.each(cols, function(ii,ee){
                        //})
                    }
                })
                for (var i = 0; i < Data.length; i++) {
                    Coont = 0;
                    if (Data[i].TrackerGroup == "" && Data[i].IsDeleted != "True") {
                        swal("Error !", "Select Tracker Group", "error");
                        Result = false;
                    }
                    else if (Data[i].TaskTrackerId == "" && Data[i].IsDeleted != "True") {
                        swal("Error !", "Select Tracker Title.", "error");
                        Result = false;
                    }
                    else if (Data[i].Actual == "" && Data[i].IsDeleted != "True") {
                        swal("Error !", "Select Actual.", "error");
                        Result = false;
                    }
                    else {
                        for (var j = 0; j < Data.length; j++) {
                            if (Data[i].TaskTrackerId == Data[j].TaskTrackerId && Data[i].TrackerGroup == Data[j].TrackerGroup && Data[i].IsDeleted != "True" && Data[j].IsDeleted != "True") {
                                if (Coont == 1) {
                                    swal("Error !", "Selected Group and Selected Title can't added Multiple time.", "error");
                                    Result = false;
                                } else {
                                    Coont++;
                                }
                            }

                        }

                    }
                }
                if (Data.length > 0) {
                    if (Result == true) {
                        $.ajax({
                            type: "POST",
                            url: '/Project/Tracker/Save',
                            async: false,
                            data: { Data: Data },
                            success: function (data) {
                                swal("Saved !", "Site Task Trackers  have been Saved !", "success");
                                $('#TrackerModal').modal('toggle');
                            },
                        });


                    }
                }


            });
        </script>
        <script type="text/javascript">
            $(window).load(function () {
                let tasksJsonData = [];

                //var PId = $('#projectId').attr('data-ProjectId');
                $.ajax({
                    method: "POST",
                    url: '/Project/Task/getAllTask',
                    async: false,
                    data: { 'filter': "Get_Project_Tasks", ProjectId: $("#pId").attr("data-ProjectId") },
                    success: function (result) {

                        tasksJsonData = [];
                        $.each(result, function (key, value) {
                            let tasks = {
                                id: value.TaskId,
                                title: value.Task
                            }
                            let subs = getChilds(value.Tasks);
                            if (subs.length > 0) {
                                tasks.subs = subs;
                            }
                            tasksJsonData.push(tasks);
                        });
                    }

                });

                function getChilds(tasks) {
                    let subTasks = [];
                    $.each(tasks, function (key, value) {
                        let subs = {
                            id: value.TaskId,
                            title: value.Task
                        }
                        let sbs = getChilds(value.Tasks);
                        if (sbs.length > 0) {
                            subs.subs = sbs;
                            //  getChilds(value.Tasks);
                        }
                        subTasks.push(subs);
                    });
                    return subTasks;
                }
                window.tasksComboTree = $('#ListProjectTaskss').comboTree({
                    source: tasksJsonData,
                    isMultiple: false,
                });
                window.MapIssuesComboTree = $('#LstRegionalIssues').comboTree({
                    source: tasksJsonData,
                    isMultiple: false,
                });


                if ($.cookie(CookiesIdentifier + "PTasksTitle") != null && $.cookie(CookiesIdentifier + "PTasksTitle") != '') {


                    $('#ListProjectTaskss').val($.cookie(CookiesIdentifier + "PTasksTitle"));


                }
                if ($.cookie(CookiesIdentifier + "IssueTasksTitle") != null && $.cookie(CookiesIdentifier + "IssueTasksTitle") != '') {


                    $('#LstRegionalIssues').val($.cookie(CookiesIdentifier + "IssueTasksTitle"));


                }

                //  if ($.cookie("TasksTitle") != null && $.cookie("TasksTitle") != '') {


                //    $('#LstRegionalIssues').val($.cookie("TasksTitle"));


                //}

                // tasksComboTree.getSelectedItemsTitle();
                //tasksComboTree.getSelectedItemsId();

                // window.MapIssuesComboTree.getSelectedItemsTitle();
                // window.MapIssuesComboTree.getSelectedItemsId();

                $(".dynatree123").each(function () {
                    if ($(this).hasClass("dynatreemap")) {
                        let _this = this;
                        $(".dynatree123.dynatreemap").dynatree({
                            persist: false,
                            checkbox: true,
                            onQueryActivate: function (select, node) {
                                setTimeout(function () {
                                    var selectedNodes = node.tree.getSelectedNodes();
                                    var selectedKeys = $.map(selectedNodes, function (node) {
                                        return node.data.title;
                                    });
                                    if (selectedKeys.length == 0) {
                                        $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("No Filter");
                                        $('#MapViewLabels').children('i[data-content="selector3"]').text("No Filter");
                                    }
                                    else if (selectedKeys.length > 1) {
                                        $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("Multiple Selected");
                                        $('#MapViewLabels').children('i[data-content="selector3"]').text("Multiple Tasks Selected");
                                    }
                                    else {
                                        $(_this).parents('.dynatree-drop').find(".dynatree-btn").text(selectedKeys);
                                        $('#MapViewLabels').children('i[data-content="selector3"]').text(selectedKeys);
                                    }
                                }, 1000)
                            },
                            onSelect: function (select, node) {
                                var selectedNodes = node.tree.getSelectedNodes();
                                var selectedKeys = $.map(selectedNodes, function (node) {
                                    return node.data.title;
                                });
                                if (selectedKeys.length == 0) {

                                    $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("No Filter");
                                    $('#MapViewLabels').children('i[data-content="selector3"]').text("No Filter");

                                    //$('button[data-id="selector4"]').attr('disabled', 'disabled');
                                    $('#mapfilters').find('button[data-id="selector4"]').removeAttr('disabled');
                                }
                                else if (selectedKeys.length > 1) {

                                    $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("Multiple Selected");
                                    $('#MapViewLabels').children('i[data-content="selector3"]').text("Multiple Tasks Selected");
                                    $('#mapfilters').find('button[data-id="selector4"]').attr('disabled', 'disabled');

                                    //$('button[data-id="selector4"]').removeAttr('disabled');

                                }
                                else {

                                    $(_this).parents('.dynatree-drop').find(".dynatree-btn").text(selectedKeys);
                                    $('#MapViewLabels').children('i[data-content="selector3"]').text(selectedKeys);

                                }
                            }

                        });

                    }

                    else {
                        let _this = this;
                        $(this).dynatree({
                            persist: false,
                            checkbox: true,
                            selectMode: 1,
                            onQueryActivate: function (select, node) {
                                setTimeout(function () {
                                    var selectedNodes = node.tree.getSelectedNodes();
                                    var selectedKeys = $.map(selectedNodes, function (node) {
                                        return node.data.title;
                                    });
                                    if (selectedKeys.length == 0) {
                                        $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("No Filter");
                                    }
                                    else if (selectedKeys.length > 1) {
                                        $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("Multiple Selected");
                                    }
                                    else {
                                        $(_this).parents('.dynatree-drop').find(".dynatree-btn").text(selectedKeys);
                                    }
                                }, 1000)
                            },
                            onSelect: function (select, node) {
                                var selectedNodes = node.tree.getSelectedNodes();
                                var selectedKeys = $.map(selectedNodes, function (node) {
                                    return node.data.title;
                                });
                                if (selectedKeys.length == 0) {

                                    $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("No Filter");

                                }
                                else if (selectedKeys.length > 1) {

                                    $(_this).parents('.dynatree-drop').find(".dynatree-btn").text("Multiple Selected");

                                }
                                else {

                                    $(_this).parents('.dynatree-drop').find(".dynatree-btn").text(selectedKeys);

                                }
                            }

                        });
                    }
                });





                $("html").on("click", function () {
                    $("div.dynatree123").removeClass("active");

                });
                $(".dynatree-btn").on("click", function (e) {
                    $(this).next("div.dynatree123").toggleClass("active");
                    // lstProjectMarkets.hide();
                });
                $(".dynatree-drop").on("click", function (e) {
                    e.stopPropagation();
                });

            });

            var loading = $.loading();
            loading.ajax(true);
        </script>



        <script>
            function GroupProgramIssue(data) {
                var group_to_values = data.reduce(function (obj, item) {
                    obj[item.Issue] = obj[item.Issue] || [];
                    obj[item.Issue].push({ DefinationName: item.DefinationName, ColorCode: item.ColorCode, DefinationId: item.DefinationId, y: item.TotalSite, ColorCode: item.ColorCode });
                    return obj;
                }, {});

                var groups = Object.keys(group_to_values).map(function (key) {
                    return { Issue: key, data: group_to_values[key] };
                });

                return groups;
            }

            function loadChartNational(searchfilter) {

                var url = ''
                if (marketid != null) {
                    var url = '/Project/Dashboard/GetDashboardCharts?filter=NATIONAL_PROGRAM_ISSUES&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds' + taskid
                        + '&LocationIds=' + marketid + '&FromDate=' + fromdate + '&ToDate=' + todate + '&SearchFilter=' + searchfilter

                }
                else {
                    var url = '/Project/Dashboard/GetDashboardCharts?filter=NATIONAL_PROGRAM_ISSUES&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds' + $.cookie(CookiesIdentifier + 'ProjectTasks')
                        + '&LocationIds=' + $.cookie(CookiesIdentifier + "IssueMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "IssueFromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "IssueToDate") + '&SearchFilter=' + searchfilter

                }

                series = []
                $.ajax({
                    //    url: '/Project/Dashboard/GetDashboardCharts?filter=NATIONAL_PROGRAM_ISSUES&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=null&TaskIds' + $.cookie("ProjectTasks")
                    //    + '&LocationIds=' + $.cookie("ProjectMarkets") + '&FromDate=' + FromDate + '&ToDate=' + ToDate + '&SearchFilter=' + searchfilter,
                    url: url,
                    type: 'Get',
                    async: false,
                    success: function (data) {
                        data = GroupProgramIssue(data);
                        for (var i = 0; i < data.length; i++) {

                            var issueStackbar = [];
                            for (var j = 0; j < data[i].data.length; j++) {
                                if (searchfilter == 'Daily') {
                                    var date = new Date(moment.utc(data[i].data[j].DefinationName));
                                    sd = { label: ((date.getMonth() + 1) + '/' + date.getDate()), y: data[i].data[j].y };
                                }
                                else {

                                    sd = { label: data[i].data[j].DefinationName, y: data[i].data[j].y };
                                }

                                issueStackbar.push(sd);
                            }

                            series.push({
                                type: "stackedColumn",
                                legendText: data[i].Issue,
                                showInLegend: true,
                                dataPoints: issueStackbar
                            })

                        }


                    }
                });
                var chart = new CanvasJS.Chart("Issue_By_pie", {
                    animationEnabled: false,
                    colorSet: "CustomColor",
                    height: 270,
                    exportEnabled: true,
                    title: {
                        text: "",
                        fontFamily: "arial black",
                        fontColor: "#695A42"
                    },
                    axisX: {
                        interval: 1,
                        //intervalType: "year"
                    },
                    axisY: {
                        //valueFormatString: "$#0bn",
                        //gridColor: "#B6B1A8",
                        //tickColor: "#B6B1A8"
                    },
                    toolTip: {
                        //shared: true,
                        //content: toolTipContent
                    },
                    data: series
                });

                showDefaultText(chart, "No Data Available");
                chart.render();
            }
            function toDate(selector) {
                if (selector != null) {
                    var from = selector.split("/");
                    return new Date(from[2], from[1] - 1, from[0]);
                }
            }
            //$("#searchbox").click(function () {
            //    $(this).closest('form').find("input[type=text], textarea").val("");
            //});
            $(document).ajaxStop(function () {

            });
            var typ="";
            $(function () {

                $(".comboTreeWrapper").css("display", "block");
                $(".IssuesStatusLabel").css("display", "none");

                if ($.cookie(CookiesIdentifier + "IssueTasksTitle") == false || $.cookie(CookiesIdentifier + "IssueTasksTitle") == "false") {
                    $.removeCookie(CookiesIdentifier + "IssueTasksTitle");
                    $(".marketaskLabel").html("No Task");
                } else {
                    $(".marketaskLabel").html($.cookie(CookiesIdentifier + "IssueTasksTitle"));
                }



                /* == Disable Status Filter if Task Filter is selected START == */

                if ($('#MapViewLabels').children('i[data-content="selector3"]').text() == "Multiple Selected") {
                    $('#mapfilters').find('button[data-id="selector4"]').attr('disabled', 'disabled');
                }

                /* == Disable Status Filter if Task Filter is selected END == */

                $('#lstIssueStatus').hide();
                if ($.cookie(CookiesIdentifier + "PTasksTitle") != null && $.cookie(CookiesIdentifier + "PTasksTitle") != "undefined" && $.cookie(CookiesIdentifier + "PTasksTitle") != undefined) {
                    $(".tasktitle").html($.cookie(CookiesIdentifier + "PTasksTitle"));
                } else {
                    $(".tasktitle").html("No Task");
                }


                var trackerMarkes = $.cookie(CookiesIdentifier + "SelectmarketsText");
                if (trackerMarkes != null && trackerMarkes != undefined && trackerMarkes != "undefined") {
                    if (trackerMarkes.split(',').length == 1) {
                        $(".marketLabel").text($.cookie(CookiesIdentifier + "SelectmarketsText"));
                    } else {
                        $(".marketLabel").text("Multiple Markets");
                    }
                    $("#example-xss-html_Project").val($.cookie(CookiesIdentifier + "ProjectMarkets").split(','));
                    $("#example-xss-html_Project").multiselect("refresh");
                } else {
                    $(".marketLabel").text("Multiple Markets");
                }




                var IssueMarketText = $.cookie(CookiesIdentifier + "IssueMarketText");
                if (IssueMarketText != null && IssueMarketText != undefined && IssueMarketText != "undefined") {
                    if (IssueMarketText.split(',').length == 1) {
                        $(".issuesGrapMarketLabel").text($.cookie(CookiesIdentifier + "IssueMarketText"));
                    } else {
                        $(".issuesGrapMarketLabel").text("Multiple Markets");
                    }
                    $("#example-xss-html_Issue").val($.cookie(CookiesIdentifier + "IssueMarkets").split(','));
                    $("#example-xss-html_Issue").multiselect("refresh");
                } else {
                    $(".issuesGrapMarketLabel").text("Multiple Markets");
                }




                // call to fill 'All Dates' (Project, Start-End)
                var url = '';
                var ProjectStartDate = '';
                var ProjectEndDate = '';
                $.ajax({
                    url: '/Project/Defination/ToSingle?Filter=ByProjectId&Value=' + parseInt($("#pId").attr("data-ProjectId")),
                    type: 'POST',
                    async: false,
                    success: function (data) {
                        ProjectStartDate = data.EstimateStartDate;
                        ProjectEndDate = data.EstimateEndDate;
                    }
                });
                // End call to fill 'All Dates'


                var date = new Date(), y = date.getFullYear(), m = date.getMonth();
                var firstDay = new Date(y, m, 1);
                var lastDay = new Date(y, m + 1, 0);
                firstDay = moment(firstDay).format('MM/DD/YY');
                lastDay = moment(lastDay).format('MM/DD/YY');

                var pstart, pend, mstart, mend, istart, iend, mapstart, mapend;
                var sstartdate;
                var senddate;
                var tstartdate;
                var tenddate;
                var issuesstartdate;
                var issuesenddate;

                /* == Map View Filter Cookies Start == */
                if ($.cookie(CookiesIdentifier + 'MapFromDate') == 'undefined' || $.cookie(CookiesIdentifier + 'MapFromDate') == undefined) {
                    $.cookie(CookiesIdentifier + "MapFromDate", firstDay, {
                        expires: 2000
                    });

                    $.cookie(CookiesIdentifier + "MapToDate", lastDay, {
                        expires: 2000
                    });
                    $('#MapViewLabels').children('i[data-content="selector1"]').text($.cookie(CookiesIdentifier + 'MapFromDate') + ' - ' + $.cookie(CookiesIdentifier + 'MapToDate'));
                    // $('i[data-content="selector1"]').text($.cookie('MapFromDate') + ' - ' + $.cookie('MapToDate'));
                }
                else {
                    $('#MapViewLabels').children('i[data-content="selector1"]').text($.cookie(CookiesIdentifier + 'MapFromDate') + ' - ' + $.cookie(CookiesIdentifier + 'MapToDate'));
                    //$('i[data-content="selector1"]').text($.cookie('MapFromDate') + ' - ' + $.cookie('MapToDate'));
                }





                if ($.cookie(CookiesIdentifier + 'MapViewMarkets') != undefined) {

                    $('#MapViewLabels').children('i[data-content="selector2"]').text($.cookie(CookiesIdentifier + 'MapViewMarkets'));
                } else {
                    $.cookie(CookiesIdentifier + "MapViewMarkets", 'No Filter', {
                        expires: 2000
                    });
                    $('#MapViewLabels').children('i[data-content="selector2"]').text($.cookie(CookiesIdentifier + 'MapViewMarkets'));
                }

                if ($.cookie(CookiesIdentifier + "MapViewTasks") != undefined) {
                    if ($('#mapfilters').find('span[data-id="selector3"]').text() == 'Multiple Selected') {
                        $.removeCookie(CookiesIdentifier + 'MapViewTasks');
                        $.cookie(CookiesIdentifier + "MapViewTasks", 'Multiple Tasks Selected', {
                            expires: 2000
                        });
                    } else {
                        $('#MapViewLabels').children('i[data-content="selector3"]').text($.cookie(CookiesIdentifier + 'MapViewTasks'));
                    }
                } else {
                    $.removeCookie(CookiesIdentifier + 'MapViewTasks');
                    $.cookie(CookiesIdentifier + "MapViewTasks", 'No Filter', {
                        expires: 2000
                    });
                    $('#MapViewLabels').children('i[data-content="selector3"]').text($.cookie(CookiesIdentifier + 'MapViewTasks'));
                }

                if ($.cookie(CookiesIdentifier + 'MapViewStatus') != undefined) {
                    $('#MapViewLabels').children('i[data-content="selector4"]').text($.cookie(CookiesIdentifier + 'MapViewStatus'));
                }
                else {
                    $('#MapViewLabels').children('i[data-content="selector4"]').text('No Filter');
                    $.cookie(CookiesIdentifier + "MapViewStatus", 'No Filter', {
                        expires: 2000
                    });
                }

                if ($.cookie(CookiesIdentifier + "IssueStaus") != null && $.cookie(CookiesIdentifier + "IssueStaus") != undefined && $.cookie(CookiesIdentifier + "IssueStaus") != "undefined") {
                    if ($.cookie(CookiesIdentifier + "IssueStatusText").split(",").length > 1) {
                        $(".IssuesStatusLabel").html("Multiple Status");
                    } else {
                        $(".IssuesStatusLabel").html($.cookie(CookiesIdentifier + "IssueStatusText"));
                    }

                } else {
                    $(".IssuesStatusLabel").html("Multiple Status");
                }



                //if ($.cookie("TrackingFromDate") != null && $.cookie("TrackingFromDate") != undefined && $.cookie("TrackingFromDate") == "undefined") {
                //    var SiteFromDate = $.cookie("TrackingFromDate");
                //    var SitEndDate = $.cookie("TrackingToDate");
                //    $(".dateLabel").html(SiteFromDate + "-" + SitEndDate);
                //}

                /*if ($.cookie('MapViewTasks') == "Multiple Selected") {
                    $('#mapfilters').find('button[data-id="selector4"]').attr('disabled', 'disabled');
                }*/
                if ($.cookie(CookiesIdentifier + "MarketMarketsText") != null && $.cookie(CookiesIdentifier + "MarketMarketsText") != "undefined" && $.cookie(CookiesIdentifier + "MarketMarketsText") != undefined) {

                    if ($.cookie(CookiesIdentifier + "MarketMarketsText").split(',').length > 1) {
                        $("#example-xss-html_Market").val($.cookie(CookiesIdentifier + "MarketMarkets").split(','));
                        $("#example-xss-html_Market").multiselect("refresh");
                        $(".regionMarketLabel").html("Multiple Markets");
                    } else {
                        $("#example-xss-html_Market").val($.cookie(CookiesIdentifier + "MarketMarkets").split(','));
                        $("#example-xss-html_Market").multiselect("refresh");
                        $(".regionMarketLabel").html($.cookie(CookiesIdentifier + "MarketMarketsText"));
                    }
                } else {
                    $(".regionMarketLabel").html("Multiple Markets");
                }

                /* == Map View Filter Cookies END == */

                if ($.cookie(CookiesIdentifier + 'SiteFromDate') == undefined) {
                    sstartdate = firstDay;//moment().subtract(29, 'days');
                    senddate = lastDay;//moment();
                    $.cookie(CookiesIdentifier + "SiteFromDate", pstart, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "SiteToDate", pend, {
                        expires: 2000
                    });
                }
                else {
                    sstartdate = $.cookie(CookiesIdentifier + 'SiteFromDate')
                    senddate = $.cookie(CookiesIdentifier + 'SiteToDate')
                }


                if ($.cookie(CookiesIdentifier + 'PMIssuesFromDate') == undefined) {
                    issuesstartdate = firstDay;//moment().subtract(29, 'days');
                    issuesenddate = lastDay;//moment();
                    $.cookie(CookiesIdentifier + "PMIssuesFromDate", pstart, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "PMIssuesToDate", pend, {
                        expires: 2000
                    });
                }
                else {
                    issuesstartdate = $.cookie(CookiesIdentifier + 'PMIssuesFromDate')
                    issuesenddate = $.cookie(CookiesIdentifier + 'PMIssuesToDate')
                }



                if ($.cookie(CookiesIdentifier + 'FromDate') == undefined) {
                    pstart = firstDay;//moment().subtract(29, 'days');
                    pend = lastDay;//moment();
                    $.cookie(CookiesIdentifier + "FromDate", pstart, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "ToDate", pend, {
                        expires: 2000
                    });
                }
                else {
                    pstart = $.cookie(CookiesIdentifier + 'FromDate')
                    pend = $.cookie(CookiesIdentifier + 'ToDate')
                }

                if ($.cookie(CookiesIdentifier + 'TrackingFromDate') == undefined) {
                    tstartdate = firstDay;//moment().subtract(29, 'days');
                    tenddate = lastDay;//moment();
                    $.cookie(CookiesIdentifier + "TrackingFromDate", pstart, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "TrackingToDate", pend, {
                        expires: 2000
                    });
                }
                else {
                    tstartdate = $.cookie(CookiesIdentifier + 'TrackingFromDate')
                    tenddate = $.cookie(CookiesIdentifier + 'TrackingToDate')
                }

                if ($.cookie(CookiesIdentifier + 'IssueFromDate') == undefined) {

                    istart = firstDay;//moment().subtract(29, 'days');
                    iend = lastDay;// moment();
                }
                else {

                    istart = $.cookie(CookiesIdentifier + 'IssueFromDate')
                    iend = $.cookie(CookiesIdentifier + 'IssueToDate')
                }
                fromdate = istart;
                todate = iend;
                if ($.cookie(CookiesIdentifier + 'MarketFromDate') == undefined) {
                    mstart = firstDay;//moment().subtract(29, 'days');
                    mend = lastDay;//moment();
                }
                else {

                    mstart = $.cookie(CookiesIdentifier + 'MarketFromDate')
                    mend = $.cookie(CookiesIdentifier + 'MarketToDate')
                }
                mromdate = mstart;
                mtodate = mend;

                if ($.cookie(CookiesIdentifier + 'MapFromDate') == undefined) {
                    mapstart = firstDay;//moment().subtract(29, 'days');
                    StartDate = mapstart;
                    mapend = lastDay;//moment();
                    EndDate = mapend;
                }
                else {

                    mapstart = $.cookie(CookiesIdentifier + 'MapFromDate');
                    StartDate = mapstart;
                    mapend = $.cookie(CookiesIdentifier + 'MapToDate');
                    EndDate = mapend;
                }

                function cb7(start, end) {
                    PFromDate = moment(start).format('MM/DD/YY');
                    PToDate = moment(end).format('MM/DD/YY');

                    $('#MapDate span').html(PFromDate + ' - ' + PToDate);
                }

                if ($.cookie(CookiesIdentifier + "SiteFromDate") != null && $.cookie(CookiesIdentifier + "SiteFromDate") != undefined) {
                    var TrackSD = $.cookie(CookiesIdentifier + "SiteFromDate");
                    var TrackSD = $.cookie(CookiesIdentifier + "SiteToDate");
                    $(".SiteDateRangeChanger").html(TrackSD + "-" + TrackSD);
                }


                if (ProjectEndDate != null) {
                    $('#MapDate').daterangepicker({

                        startDate: mapstart,
                        endDate: mapend,
                        opens: 'right',
                        minDate: moment().add(-5, 'years'),
                        maxDate: moment().add(5, 'years'),
                        ranges: {
                            'Today': [moment(), moment()],
                            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                            'Last 30 Days': [moment().subtract(29, 'days').subtract(1, 'days'), moment()],
                            'This Month': [moment().startOf('month'), moment().endOf('month')],
                            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month')],
                            'All Dates': [moment.utc(ProjectStartDate).format('MM-DD-YY'), moment.utc(ProjectEndDate).format('MM-DD-YY')],
                            'Custom Range': "custom"
                        }
                    }, cb7);
                }
                else {
                    $('#MapDate').daterangepicker({

                        startDate: mapstart,
                        endDate: mapend,
                        opens: 'right',
                        minDate: moment().add(-5, 'years'),
                        maxDate: moment().add(5, 'years'),
                        ranges: {
                            'Today': [moment(), moment()],
                            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                            'Last 30 Days': [moment().subtract(29, 'days').subtract(1, 'days'), moment()],
                            'This Month': [moment().startOf('month').add(1, 'days'), moment().endOf('month')],
                            'Last Month': [moment().subtract(1, 'month').startOf('month').add(1, 'days'), moment().subtract(1, 'month').endOf('month')],
                            // 'All Dates': [moment.utc(ProjectStartDate).format('MM-DD-YY'), moment.utc(ProjectEndDate).format('MM-DD-YY')],
                            'Custom Range': "custom"
                        }
                    }, cb7);
                }
                cb7(mapstart, mapend);
                //  mapstart = mstart;
                // mapend = mend;
                //EndDate = mapend;
                //$('#frmTaskEntry').submit(function () {
                //    var TaskEntry = [];
                //    $(".frm-dynamic").each(function () {
                //        TaskEntry.push({ FormId: $(this).attr('data-formid'), ProjectSiteId:, TaskId: TskID, FormValue: $(this).val(), ProjectId: $("#pId").attr("data-ProjectId"), Comments: $('#sortOrderInputComments' + $(this).attr("data-formid")).val() });
                //        log($(this).val());
                //        log($(this).attr('data-formid'));
                //    });
                //    log(TaskEntry);
                //    $.ajax({
                //        url: '/Project/Task/TaskEntry',
                //        type: 'post',
                //        dataType: 'json',
                //        contentType: 'application/json',
                //        data: JSON.stringify(TaskEntry),

                //        success: function (res) {
                //            debugger
                //            swal("Saved !","","success");
                //            angular.element(document.getElementById('widget-grid')).scope().GetTaskEntries($('#siteId').attr('data-siteId'), TskID);
                //            },
                //        error: function (e) {
                //            debugger
                //            swal("Error !", "", "error");
                //            angular.element(document.getElementById('widget-grid')).scope().GetTaskEntries($('#siteId').attr('data-siteId'), TskID);
                //        }
                //    });
                //    return false;
                //});



                function cb1(start, end) {
                    PFromDate = moment(start).format('MM/DD/YY');
                    PToDate = moment(end).format('MM/DD/YY');
                    FromDate = moment(start).format('MM/DD/YY');
                    ToDate = moment(end).format('MM/DD/YY');
                    $('#reportrange1 span').html(PFromDate + ' - ' + PToDate);
                }



                $('#reportrange1').daterangepicker({
                    startDate: pstart,
                    endDate: pend,
                    minDate: moment().add(-5, 'years'),
                    maxDate: moment().add(5, 'years'),
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days').subtract(1, 'days'), moment()],
                        'This Month': [moment().startOf('month').add(1, 'days'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month').add(1, 'days'), moment().subtract(1, 'month').endOf('month')],
                        'Custom Range': "custom"
                    },
                    opens: "left"
                }, cb1);
                cb1(pstart, pend);


                function cb3(start, end) {

                    MFromDate = moment(start).format('MM/DD/YY');
                    MToDate = moment(end).format('MM/DD/YY');// end.format('MM/DD/YY');
                    $('#reportrangemarket span').html(MFromDate + ' - ' + MToDate);
                }

                $('#reportrangemarket').daterangepicker({
                    startDate: mstart,
                    endDate: mend,
                    opens: 'right',
                    minDate: moment().add(-5, 'years'),
                    maxDate: moment().add(5, 'years'),
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days').subtract(1, 'days'), moment()],
                        'This Month': [moment().startOf('month').add(1, 'days'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month').add(1, 'days'), moment().subtract(1, 'month').endOf('month')],
                        'Custom Range': "custom"
                    }
                }, cb3);
                cb3(mstart, mend);
                function cb2(start, end) {

                    IFromDate = moment(start).format('MM/DD/YY');
                    IToDate = moment(end).format('MM/DD/YY');

                    $('#reportrange2 span').html(IFromDate + ' - ' + IToDate);
                }

                $('#reportrange2').daterangepicker({
                    startDate: istart,
                    endDate: iend,
                    orientation: 'left',
                    minDate: moment().add(-5, 'years'),
                    maxDate: moment().add(5, 'years'),
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days').subtract(1, 'days'), moment()],
                        'This Month': [moment().startOf('month').add(1, 'days'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month').add(1, 'days'), moment().subtract(1, 'month').endOf('month')],
                        'Custom Range': "custom"
                    }
                }, cb2);

                cb2(istart, iend);



                function cb4(start, end) {
                    PFromDate = moment(start).format('MM/DD/YY');
                    PToDate = moment(end).format('MM/DD/YY');
                    FromDate = moment(start).format('MM/DD/YY');
                    ToDate = moment(end).format('MM/DD/YY');
                    $('#reportrange3 span').html(PFromDate + ' - ' + PToDate);
                }

                $('#reportrange3').daterangepicker({
                    startDate: pstart,
                    endDate: pend,
                    opens: 'left',
                    minDate: moment().add(-5, 'years'),
                    maxDate: moment().add(5, 'years'),
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days').subtract(1, 'days'), moment()],
                        'This Month': [moment().startOf('month').add(1, 'days'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month').add(1, 'days'), moment().subtract(1, 'month').endOf('month')],
                        'Custom Range': "custom"
                    }
                }, cb4);
                cb4(pstart, pend);

                if ($.cookie(CookiesIdentifier + "TrackingFromDate") != null && $.cookie(CookiesIdentifier + "TrackingFromDate") != undefined && $.cookie(CookiesIdentifier + "TrackingFromDate") != "undefined") {
                    var SiteFromDate = $.cookie(CookiesIdentifier + "TrackingFromDate");
                    var SitEndDate = $.cookie(CookiesIdentifier + "TrackingToDate");
                    cb4(SiteFromDate, SitEndDate);
                }

                //if ($.cookie("TrackingFromDate") != null && $.cookie("TrackingFromDate") != undefined && $.cookie("TrackingFromDate") != "undefined") {
                //    var SiteFromDate = $.cookie("TrackingFromDate");
                //    var SitEndDate = $.cookie("TrackingToDate");
                //    $(".dateLabel").html(SiteFromDate + "-" + SitEndDate);
                //}

                //if ($.cookie("FromDate") != undefined) {
                //    $('#reportrangemarket span').html($.cookie("FromDate") + ' - ' + $.cookie("ToDate"));
                //    $('#reportrange1 span').html($.cookie("FromDate") + ' - ' + $.cookie("ToDate"));
                //    $('#reportrange2 span').html($.cookie("FromDate") + ' - ' + $.cookie("ToDate"));

                //}

            });

            $(function () {

                $(document).on("click", ".expandable", function () {
                    $(this).children('ul').toggle();
                    //return false;
                });

            });

            window.onload = function () {
                CanvasJS.addColorSet("CustomColor",
                    [
                        "#7cb5ec",
                        "#5c5c61",
                        "#90ed7d",
                        "#f7a35c",
                        "#d0d2f7",

                    ]);
                $('.jarviswidget-ctrls').remove();
                var cookie = $.cookie(CookiesIdentifier + "BookMark");
                var items = cookie ? cookie.split(/,/) : new Array();
                $('.BookMark').each(function () {
                    for (var i = 0; i < items.length; i++) {
                        if ($(this).attr('data-bookmark') == items[i]) {
                            $(this).addClass('Yellow');
                            $(this).addClass("fa-check-square-o")
                            $(this).removeClass("fa-square-o")
                        }
                    }
                });




                //tracking map
                $('.jarviswidget-ctrls').remove();
                var Forecast = [];
                var Planned = [];
                var Actual = [];
                var Target = [];
                var CumActual = [];
                var CumForecast = [];
                var CumTarget = [];
                var RunRate = [];

                array = [];
                var actularcolor, forecastcolor, plancolor, targetcolor, runratecolor, cumactualcolor, cumforecastcolor, cumtargetcolor;




            }

            var FromDate, ToDate, PFromDate, PToDate, MFromDate, MToDate, IFromDate, IToDate;

            $(document).ready(function () {
                var SelectedTasks = [];
                $(".ColVis_catcher").click(function () {

                    $('ul.ColVis_collection').find('li:first').hide()
                    $('ul.ColVis_collection').find('li:last').hide()

                });

                $(document).on('click', '.ColVis_MasterButton button', function (e) {
                    e.preventDefault();
                });
                //$('.ColVis_MasterButton button').live('click', function () {

                //});

                function GetTaskIds(value) {
                    var str_task = []
                    var arr_task = value;
                    for (var i = 0; i < TasksList.length; i++) {
                        if (arr_task.length > 1) {
                            if (arr_task[0] == TasksList[i].Task) {
                                str_task.push(TasksList[i].TaskId);
                            }
                            if (arr_task[1] == TasksList[i].Task) {
                                str_task.push(TasksList[i].TaskId);
                            }
                        }
                        else if (arr_task.length > 0) {
                            if (arr_task[0] == TasksList[i].Task) {
                                str_task.push(TasksList[i].TaskId);
                            }

                        }
                    }
                    return str_task.join(',');

                }
                //Search Start

                $('#SearchIssue').click(function () {

                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    $('.national').hide();
                    $('.issue-button').hide();

                    //Start
                    $.removeCookie(CookiesIdentifier + "IssueTasks");
                    $.removeCookie(CookiesIdentifier + "IssueMarkets");
                    $.removeCookie(CookiesIdentifier + "IssueFromDate");
                    $.removeCookie(CookiesIdentifier + "IssueToDate");
                    var issuemarkets = $("#example-xss-html_Issue").val();
                    var issuetasks = $("#example-multiple-optgroups_Issue").val();
                    // ProjectMarkets Cookie
                    var cookie = $.cookie(CookiesIdentifier + "IssueMarkets");
                    var items = cookie ? cookie.split(/,/) : new Array();
                    items.push(issuemarkets);
                    var uniqueNames = [];
                    $.each(items, function (i, el) {
                        if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                    });
                    items = uniqueNames
                    $.cookie(CookiesIdentifier + "IssueMarkets", items.join(','), {
                        expires: 2000
                    });

                    // ProjectTasks Cookie
                    var Taskscookie = $.cookie(CookiesIdentifier + "IssueTasks");
                    var Tasksitems = Taskscookie ? Taskscookie.split(/,/) : new Array();

                    $.cookie(CookiesIdentifier + "IssueFromDate", IFromDate, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "IssueToDate", IToDate, {
                        expires: 2000
                    });

                    Tasksitems.push(issuetasks);
                    uniqueNames = [];
                    $.each(Tasksitems, function (i, el) {
                        if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                    });
                    Tasksitems = uniqueNames
                    $.cookie(CookiesIdentifier + "IssueTasks", Tasksitems.join(','), {
                        expires: 2000
                    });




                    //End
                    fromdate = IFromDate;
                    todate = IToDate;
                    var m = $("#example-xss-html_Issue").val();


                    var IssueMarketText = $('#example-xss-html_Issue option:selected').toArray().map(item => item.text).join();
                    $.cookie(CookiesIdentifier + "IssueMarketText", IssueMarketText, {
                        expires: 2000
                    });

                    var IssueMarketText = $.cookie(CookiesIdentifier + "IssueMarketText");
                    if (IssueMarketText != null && IssueMarketText != undefined && IssueMarketText != "undefined") {
                        if (IssueMarketText.split(',').length == 1) {
                            $(".issuesGrapMarketLabel").text($.cookie(CookiesIdentifier + "IssueMarketText"));
                        } else {
                            $(".issuesGrapMarketLabel").text("Multiple Markets");
                        }
                        // $("#example-xss-html_Issue").val($.cookie(CookiesIdentifier + "IssueMarkets").split(','));
                        // $("#example-xss-html_Issue").multiselect("refresh");
                    } else {
                        $(".issuesGrapMarketLabel").text("Multiple Markets");
                    }



                    marketid = m.join(',');
                    var tskid = $("#example-multiple-optgroups_Issue").val();
                    if (IssueViewName == 'piechart') {
                        LoadpieChart(marketid, taskid, fromdate, todate);
                    }
                    else if (IssueViewName == 'National') {
                        $('.national').show();
                        loadChartNational('Daily')
                    }
                    else {
                        IssueViewName = 'Regional'
                        $('.national').hide();
                        $('#lstIssueMarkets').show();
                        $.ajax({
                            url: '/Project/Dashboard/GetMarkets?filter=' + 'Get_Region_Issue&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value=null',
                            //    url: '/Project/Dashboard/GetDashboardCharts?filter=Get_Region_Issue&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + $.cookie('ProjectTasks')
                            //+ '&LocationIds=' + $.cookie("ProjectMarkets") + '&FromDate=' + $.cookie("FromDate") + '&ToDate=' + $.cookie("ToDate") + '&SearchFilter=Daily',


                            type: 'get',
                            async: false,
                            success: function (data) {
                                //$('#Issue_By_Geo').empty();
                                //$('#Issue_By_Geo').html(data);
                                $('#Issue_By_pie').empty();
                                $('#Issue_By_pie').html(data);
                            }
                        });
                    }


                })
                $('#lstIssueStatus').hide();
                MarketViewName = 'MarketRegional';
                var protsks = []

                $('#SearchProject').click(function () {
                    $("body").append(`<div id="ajaxLoading" style="position: fixed; top: 0px; bottom: 0px; left: 0px; right: 0px; margin: auto; padding: 8px; text-align: center; vertical-align: middle; width: 140px; height: 95px; z-index: 2000; border-radius: 4px; display: block;"><img src="/Content/Images/Application/Logo_Loading.gif" style="margin-bottom:8px;width:100px;height:100px"><p style="margin:0;font-size:15px;color:#fff;background:#88887B">Please Wait...</p></div>`);

                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    //  $(".filters-dropdown").css("display", "none");
                    var projecttaskid = tasksComboTree.getSelectedItemsId();
                    var projecttaskTitle = tasksComboTree.getSelectedItemsTitle();

                    var issuemarketsText = $('#example-xss-html_Project option:selected').toArray().map(item => item.text).join();

                    if ($('#example-xss-html_Project option:selected').toArray().length == 1) {
                        $(".marketLabel").text(issuemarketsText);
                    } else {
                        $(".marketLabel").text("Multiple Markets");
                    }

                    if (TabFlag == "Tracking") {

                        $.removeCookie(CookiesIdentifier + "SelectmarketsText");
                        $.cookie(CookiesIdentifier + "SelectmarketsText", issuemarketsText, {
                            expires: 2000
                        });

                        if (projecttaskTitle == "false" || projecttaskTitle == false) {
                            if ($.cookie(CookiesIdentifier + "PTasksTitle") == null || $.cookie(CookiesIdentifier + "PTasksTitle") == "undefined" || $.cookie(CookiesIdentifier + "PTasksTitle") == undefined) {
                                $.removeCookie(CookiesIdentifier + "PTasksTitle");
                                $.removeCookie(CookiesIdentifier + "PTasksId");
                                $.cookie(CookiesIdentifier + "PTasksTitle", projecttaskTitle, {
                                    expires: 2000
                                });
                                $.cookie(CookiesIdentifier + "PTasksId", projecttaskid, {
                                    expires: 2000
                                });

                            }
                            else {
                                var ptTitle = $.cookie(CookiesIdentifier + "PTasksTitle");
                                var pID = $.cookie(CookiesIdentifier + "PTasksId");
                                $.removeCookie(CookiesIdentifier + "PTasksTitle");
                                $.removeCookie(CookiesIdentifier + "PTasksId");
                                $.cookie(CookiesIdentifier + "PTasksTitle", ptTitle, {
                                    expires: 2000
                                });
                                $.cookie(CookiesIdentifier + "PTasksId", pID, {
                                    expires: 2000
                                });
                            }
                        } else {
                            $.removeCookie(CookiesIdentifier + "PTasksTitle");
                            $.removeCookie(CookiesIdentifier + "PTasksId");
                            $.cookie(CookiesIdentifier + "PTasksTitle", projecttaskTitle, {
                                expires: 2000
                            });
                            $.cookie(CookiesIdentifier + "PTasksId", projecttaskid, {
                                expires: 2000
                            });
                        }
                        $(".tasktitle").html($.cookie(CookiesIdentifier + "PTasksTitle"));
                        $.removeCookie(CookiesIdentifier + "ProjectTasks");
                        SelectedTasks = $.map($(".dynatree123").dynatree("getSelectedNodes"), function (node) {
                            return node.data.key;
                        });
                        var MyTasks = '';
                        if (SelectedTasks.length > 0) {
                            MyTasks = SelectedTasks.join(",");
                            //console.log('MyTasks:' + MyTasks);
                        }
                        //console.log('SelectedTasks:' + SelectedTasks);
                        $.cookie(CookiesIdentifier + "ProjectTasks", MyTasks, {
                            expires: 2000
                        });

                        //  $.removeCookie("ProjectTasks");
                        $.removeCookie(CookiesIdentifier + "ProjectTasksTitle");
                        $.removeCookie(CookiesIdentifier + "ProjectMarkets");
                        // $.removeCookie("FromDate");
                        // $.removeCookie("ToDate");
                        var issuemarkets = $("#example-xss-html_Project").val();
                        //  var issuetasks = projecttasks;// $("#example-multiple-optgroups_Project").val();


                        var protsks = GetTaskIds(projecttasks);
                        $.cookie(CookiesIdentifier + "ProjectTasksTitle", projecttasks.join(','), {
                            expires: 2000
                        });
                        // ProjectMarkets Cookie
                        var cookie = $.cookie(CookiesIdentifier + "ProjectMarkets");
                        var items = cookie ? cookie.split(/,/) : new Array();
                        items.push(issuemarkets);
                        var uniqueNames = [];
                        $.each(items, function (i, el) {
                            if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                        });
                        items = uniqueNames
                        $.cookie(CookiesIdentifier + "ProjectMarkets", items.join(','), {
                            expires: 2000
                        });

                        // ProjectTasks Cookie
                        var Taskscookie = $.cookie(CookiesIdentifier + "ProjectTasks");
                        var Tasksitems = Taskscookie ? Taskscookie.split(/,/) : new Array();

                        $.cookie(CookiesIdentifier + "TrackingFromDate", PFromDate, {
                            expires: 2000
                        });
                        $.cookie(CookiesIdentifier + "TrackingToDate", PToDate, {
                            expires: 2000
                        });
                        var IssuesStatus = $("#example-getting-started").val();
                        IssuesStatus = IssuesStatus.join(',');
                        Tasksitems.push(protsks);
                        uniqueNames = [];
                        $.each(Tasksitems, function (i, el) {
                            if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                        });
                        Tasksitems = uniqueNames
                        //$.cookie("ProjectTasks", Tasksitems.join(','), {
                        //    expires: 2000
                        //});
                    }


                    if (TabFlag == 'Sites') {

                        $.removeCookie(CookiesIdentifier + "SiteProjectMarkets");
                        $.removeCookie(CookiesIdentifier + "SiteFromDate");
                        $.removeCookie(CookiesIdentifier + "SiteToDate");
                        var sissuemarkets = $("#example-xss-html_Project").val();
                        //  var issuetasks = projecttasks;// $("#example-multiple-optgroups_Project").val();
                        // ProjectMarkets Cookie
                        var sitems = [];
                        sitems.push(sissuemarkets);
                        uniqueNames = [];
                        $.each(sitems, function (i, el) {
                            if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                        });
                        sitems = uniqueNames
                        $.cookie(CookiesIdentifier + "SiteProjectMarkets", sitems.join(','), {
                            expires: 2000
                        });

                        $.cookie(CookiesIdentifier + "SiteFromDate", PFromDate, {
                            expires: 2000
                        });
                        $.cookie(CookiesIdentifier + "SiteToDate", PToDate, {
                            expires: 2000
                        });
                        $.ajax({
                            //url: '/Project/Dashboard/GetMilstonesBarchart?ProjectId=' + $("#pId").attr("data-ProjectId") + '&filter=Get_Project_Timeline_Variance',

                            //url: '/Project/Dashboard/TableResult?ProjectId=' + $("#pId").attr("data-ProjectId") + '&Page=1' + '&TaskIds=' + $.cookie('ProjectTasks')
                            //            + '&LocationIds=' + $.cookie("ProjectMarkets") + '&FromDate=' + $.cookie("FromDate") + '&ToDate=' + $.cookie("ToDate"),

                            url: '/Project/Dashboard/TableResult?ProjectId=' + $("#pId").attr("data-ProjectId") + '&Page=1' + '&TaskIds=' + $.cookie(CookiesIdentifier + "PTasksId") + '&LocationIds=' +
                                $.cookie(CookiesIdentifier + "SiteProjectMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "SiteFromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "SiteToDate") + '&IsActive=true',
                            type: 'Get',
                            async: false,
                            success: function (data) {

                                $('#divclientsites').html(data);

                                SiteGridPagination();
                            }
                        });
                    }
                    else if (TabFlag == 'Issues') {

                        $.removeCookie(CookiesIdentifier + "PMIssuesProjectMarkets");
                        $.removeCookie(CookiesIdentifier + "PMIssuesFromDate");
                        $.removeCookie(CookiesIdentifier + "PMIssuesToDate");

                        $.removeCookie(CookiesIdentifier + "IssuesSelectmarketsText");
                        $.cookie(CookiesIdentifier + "IssuesSelectmarketsText", issuemarketsText, {
                            expires: 2000
                        });

                        var isissuemarkets = $("#example-xss-html_Project").val();
                        //  var issuetasks = projecttasks;// $("#example-multiple-optgroups_Project").val();
                        // ProjectMarkets Cookie
                        var psitems = [];
                        psitems.push(isissuemarkets);
                        iuniqueNames = [];
                        $.each(psitems, function (i, el) {
                            if ($.inArray(el, iuniqueNames) === -1) iuniqueNames.push(el);
                        });
                        psitems = iuniqueNames
                        $.cookie(CookiesIdentifier + "PMIssuesProjectMarkets", psitems.join(','), {
                            expires: 2000
                        });

                        $.cookie(CookiesIdentifier + "PMIssuesFromDate", PFromDate, {
                            expires: 2000
                        });
                        $.cookie(CookiesIdentifier + "PMIssuesToDate", PToDate, {
                            expires: 2000
                        });

                        var isuSt = $("#example-getting-started").val();
                        var isuStatusText = $('#example-getting-started option:selected').toArray().map(item => item.text).join();

                        $.cookie(CookiesIdentifier + "IssueStatusText", isuStatusText, {
                            expires: 2000
                        });

                        if ($.cookie(CookiesIdentifier + "IssueStaus") != null && $.cookie(CookiesIdentifier + "IssueStaus") != undefined && $.cookie(CookiesIdentifier + "IssueStaus") != "undefined") {
                            if ($.cookie(CookiesIdentifier + "IssueStatusText").split(",").length > 1) {
                                $(".IssuesStatusLabel").html("Multiple Status");
                            } else {
                                $(".IssuesStatusLabel").html($.cookie(CookiesIdentifier + "IssueStatusText"));
                            }

                        } else {
                            $(".IssuesStatusLabel").html("Multiple Status");
                        }

                        $.cookie(CookiesIdentifier + "IssueStaus", isuSt, {
                            expires: 2000
                        });

                        var RDate = $('#reportrange3').find('.changingSelector').html();
                        var Datees = RDate.split('-');
                        $.ajax({
                            //url: '/Project/Dashboard/GetMilstonesBarchart?ProjectId=' + $("#pId").attr("data-ProjectId") + '&filter=Get_Project_Timeline_Variance',
                            url: '/Project/Dashboard/GetProjectIssue?ProjectId=' + $("#pId").attr("data-ProjectId") + '&Page=1' + '&TaskIds=' + isuSt
                     + '&LocationIds=' + $.cookie(CookiesIdentifier + "PMIssuesProjectMarkets") + '&FromDate=' + Datees[0] + '&ToDate=' + Datees[1],

                            type: 'Get',
                            async: false,
                            success: function (data) {

                                $('#divissues').html(data);

                                IssueGridPagination();
                            }
                        });
                    }
                    else if (TabFlag == 'Tracking') {
                        angular.element(document.getElementById('widget-grid')).scope().GetProgramLabel();
                        LoadProgramChart('Daily')
                    }
                    else {
                        //$.cookie("ProjectTasks")
                        $.cookie(CookiesIdentifier + "FromDate", PFromDate, {
                            expires: 2000
                        });
                        $.cookie(CookiesIdentifier + "ToDate", PToDate, {
                            expires: 2000
                        });
                        var ProgramRDate = $('#reportrange3').find('.changingSelector').html();
                        var ProgramDatees = ProgramRDate.split('-');
                        $.ajax({
                            url: '/Project/Dashboard/GetSummary?Filter=PROGRAM_SUMMARY&ProjectId=' + parseInt($("#pId").attr("data-ProjectId")) + '&Value1=' + '' + '&TaskIds=' + $.cookie(CookiesIdentifier + "PTasksId") + '&LocationIds=' + $.cookie(CookiesIdentifier + "ProjectMarkets")
                                + '&FromDate=' + $.cookie(CookiesIdentifier + "FromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "ToDate") + '&SearchFilter=',
                            type: 'Get',
                            async: false,
                            success: function (data) {
                                $('#Summary').html(data);
                            }
                        });

                    }


                    //$.ajax({
                    //    url: '/Project/Dashboard/GetDashboardCharts?Filter=Get_Region_Issue&=ProjectId' + parseInt($("#UserId").attr("data-UserId")) + '&Value1=' + '' + '&TaskIds=' + issuetasks + '&LocationIds=' + issuemarkets
                    //    + '&FromDate=' + FromDate + '&ToDate=' + ToDate + '&SearchFilter=Global',
                    //    type: 'Get',
                    //    async: false,
                    //    success: function (data) {
                    //        array = data;
                    //        var sd = {};
                    //        for (var i = 0; i < data.length ; i++) {
                    //            if (data[i].WoDate != null) {
                    //                var date = new Date(parseInt(data[i].WoDate.substr(6)));
                    //                sd = { label: (date.getDay() + 1) + '/' + date.getMonth(), y: data[i].WoCount };
                    //                if (data[i].WoType == 'Forecast') {
                    //                    Forecast.push(sd);
                    //                }
                    //                else if (data[i].WoType == 'Planned') {
                    //                    Planned.push(sd);
                    //                }
                    //                else if (data[i].WoType == 'Actual') {
                    //                    Actual.push(sd);
                    //                }
                    //            }

                    //        }
                    //        $('#show-stat-microcharts').html(data);
                    //    }
                    //});
                    //location.reload();
                    $("#ajaxLoading").remove();
                })

                $('#SearchMarket').click(function () {
                    $("body").append(`<div id="ajaxLoading" style="position: fixed; top: 0px; bottom: 0px; left: 0px; right: 0px; margin: auto; padding: 8px; text-align: center; vertical-align: middle; width: 140px; height: 95px; z-index: 2000; border-radius: 4px; display: block;"><img src="/Content/Images/Application/Logo_Loading.gif" style="margin-bottom:8px;width:100px;height:100px"><p style="margin:0;font-size:15px;color:#fff;background:#88887B">Please Wait...</p></div>`);

                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    var regIssuesId = window.MapIssuesComboTree.getSelectedItemsId();
                    var regIssues = window.MapIssuesComboTree.getSelectedItemsTitle();
                    if (regIssues == "false" || regIssues == false) {
                        if ($.cookie(CookiesIdentifier + "IssueTasksTitle") == null || $.cookie(CookiesIdentifier + "IssueTasksTitle") == "undefined" || $.cookie(CookiesIdentifier + "IssueTasksTitle") == undefined) {
                            $.removeCookie(CookiesIdentifier + "IssueTasksTitle");
                            $.removeCookie(CookiesIdentifier + "IssueTasksId");
                            $.cookie(CookiesIdentifier + "IssueTasksTitle", regIssues, {
                                expires: 2000
                            });
                            $.cookie(CookiesIdentifier + "IssueTasksId", regIssuesId, {
                                expires: 2000
                            });

                        }
                        else {
                            var ptTitle = $.cookie(CookiesIdentifier + "IssueTasksTitle");
                            var pID = $.cookie(CookiesIdentifier + "IssueTasksId");
                            $.removeCookie(CookiesIdentifier + "IssueTasksTitle");
                            $.removeCookie(CookiesIdentifier + "IssueTasksId");
                            $.cookie(CookiesIdentifier + "IssueTasksTitle", ptTitle, {
                                expires: 2000
                            });
                            $.cookie(CookiesIdentifier + "IssueTasksId", pID, {
                                expires: 2000
                            });
                        }
                    } else {
                        $.removeCookie(CookiesIdentifier + "IssueTasksTitle");
                        $.removeCookie(CookiesIdentifier + "IssueTasksId");
                        $.cookie(CookiesIdentifier + "IssueTasksTitle", regIssues, {
                            expires: 2000
                        });
                        $.cookie(CookiesIdentifier + "IssueTasksId", regIssuesId, {
                            expires: 2000
                        });
                    }

                    if ($.cookie(CookiesIdentifier + "IssueTasksTitle") == false || $.cookie(CookiesIdentifier + "IssueTasksTitle") == "false") {
                        $(".marketaskLabel").html("No Task");
                    } else {
                        $(".marketaskLabel").html($.cookie(CookiesIdentifier + "IssueTasksTitle"));
                    }

                    var marketMarketListText = $('#example-xss-html_Market option:selected').toArray().map(item => item.text).join();

                    $.cookie(CookiesIdentifier + "MarketMarketsText", marketMarketListText, {
                        expires: 2000
                    });



                    // window.MapIssuesComboTree.getSelectedItemsTitle();
                    // window.MapIssuesComboTree.getSelectedItemsId();
                    var SelectedTasks = window.MapIssuesComboTree.getSelectedItemsId();
                    var SelectedTasksTitles = window.MapIssuesComboTree.getSelectedItemsTitle();

                    var ets = $("#example-xss-html_Market").val();

                    var mtskids = GetTaskIds(markettsks);
                    var issuetasks = markettsks;//$("#example-multiple-optgroups_Market").val();
                    var issuemarkets = $("#example-xss-html_Market").val();
                    mfromdate = MFromDate;
                    mtodate = MToDate;
                    //mtaskid = markettsks.join(',');
                    mtaskid = mtskids;



                    //mmarketid = $("#example-xss-html_Market").val();
                    mmarketid = issuemarkets.join(',');
                    //Start
                    $.removeCookie(CookiesIdentifier + "MarketTasks");
                    $.removeCookie(CookiesIdentifier + "MarketMarkets");
                    $.removeCookie(CookiesIdentifier + "MarketFromDate");
                    $.removeCookie(CookiesIdentifier + "MarketToDate");
                    //$.cookie("MarketTasksTitle", markettsks.join(','), {
                    //    expires: 2000
                    //});
                    var issuemarkets = $("#example-xss-html_Market").val();
                    //var issuetasks = markettsks;
                    // ProjectMarkets Cookie
                    var cookie = $.cookie(CookiesIdentifier + "MarketMarkets");
                    var items = cookie ? cookie.split(/,/) : new Array();
                    items.push(issuemarkets);
                    var uniqueNames = [];
                    $.each(items, function (i, el) {
                        if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                    });
                    items = uniqueNames
                    $.cookie(CookiesIdentifier + "MarketMarkets", items.join(','), {
                        expires: 2000
                    });


                    //$("#example-xss-html_Market").val($("#example-xss-html_Market").val());
                    //$("#example-xss-html_Market").multiselect("refresh");
                    //$(".regionMarketLabel").html("Multiple Markets");
                    //var r = $("example-xss-html_Market option:selected");
                    //$("#example-xss-html_Market").val(r.split(','));
                    //$("#example-xss-html_Market").multiselect("refresh");

                    // ProjectTasks Cookie

                    var Taskscookie = $.cookie(CookiesIdentifier + "MarketTasks");
                    var Tasksitems = Taskscookie ? Taskscookie.split(/,/) : new Array();
                    $.cookie(CookiesIdentifier + "MarketFromDate", MFromDate, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "MarketToDate", MToDate, {
                        expires: 2000
                    });

                    //Tasksitems.push(markettsks);
                    Tasksitems.push(mtskids);
                    uniqueNames = [];
                    $.each(Tasksitems, function (i, el) {
                        if ($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                    });
                    Tasksitems = uniqueNames
                    $.cookie(CookiesIdentifier + "MarketTasks", SelectedTasks, {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "TasksTitle", SelectedTasksTitles, {
                        expires: 2000
                    });
                    if ($.cookie(CookiesIdentifier + "MarketMarketsText") != null && $.cookie(CookiesIdentifier + "MarketMarketsText") != "undefined" && $.cookie(CookiesIdentifier + "MarketMarketsText") != undefined) {

                        if ($.cookie(CookiesIdentifier + "MarketMarketsText").split(',').length > 1) {
                            $("#example-xss-html_Market").val($.cookie(CookiesIdentifier + "MarketMarkets").split(','));
                            $("#example-xss-html_Market").multiselect("refresh");
                            $(".regionMarketLabel").html("Multiple Markets");
                        } else {
                            $("#example-xss-html_Market").val($.cookie(CookiesIdentifier + "MarketMarkets").split(','));
                            $("#example-xss-html_Market").multiselect("refresh");
                            $(".regionMarketLabel").html($.cookie(CookiesIdentifier + "MarketMarketsText"));
                        }
                    } else {
                        $(".regionMarketLabel").html("Multiple Markets");
                    }



                    //End
                    //    if (MarketViewName == 'MarketRegional') {
                    $.ajax({
                        url: '/Project/Dashboard/GetMarkets?filter=' + 'Get_RegionView_WO&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value=null',

                        type: 'get',
                        async: false,
                        success: function (data) {

                            $('#regionviewchart1').empty();
                            $('#regionviewchart1').html(data);
                        }
                    })
                    //  }
                    //else if (MarketViewName == 'Readiness') {
                    //    LoadReadiness();
                    //}
                    //else {
                    //    loadDisposition();
                    //}



                    $("#ajaxLoading").remove();
                });






                $('.programchart').click(function () {
                    LoadProgramChart($(this).attr('data-type'));
                });
                $(document).on("click", "#SearchMap", function () {

                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    //  $('#SearchMap').click(function () {
                    ets = $("#example-xss-html_Market").val();


                    $.removeCookie(CookiesIdentifier + "MapViewTasks");
                    if ($('#mapfilters').find('span[data-id="selector3"]').text() == "Tasks") {
                        $.cookie(CookiesIdentifier + "MapViewTasks", 'No Filter', {
                            expires: 2000
                        });
                    }


                    $.removeCookie(CookiesIdentifier + "MapViewStatus");
                    $.cookie(CookiesIdentifier + "MapViewStatus",'No Filter', {
                        expires: 2000
                    });

                    $.removeCookie(CookiesIdentifier + "MapViewMarkets");
                    $.cookie(CookiesIdentifier + "MapViewMarkets", $('#lstMapMarkets').find('.multiselect-selected-text.changingSelector').text(), {
                        expires: 2000
                    });

                    var mtskids = GetTaskIds(maptsks);
                    var issuetasks = markettsks;//$("#example-multiple-optgroups_Market").val();
                    var issuemarkets = $("#example-xss-html_Market").val();

                    mfromdate = MFromDate;
                    mtodate = MToDate;
                    //mtaskid = markettsks.join(',');
                    mtaskid = mtskids;



                    //mmarketid = $("#example-xss-html_Market").val();
                    mmarketid = issuemarkets.join(',');
                    //Start
                    $.removeCookie(CookiesIdentifier + "MapTasks");
                    // $.removeCookie("MapTasksTitle");
                    $.removeCookie(CookiesIdentifier + "MapStatus");
                    $.removeCookie(CookiesIdentifier + "MapType");
                    $.removeCookie(CookiesIdentifier + "MapMarkets");
                    $.removeCookie(CookiesIdentifier + "MapFromDate");
                    $.removeCookie(CookiesIdentifier + "MapToDate");
                    //$.removeCookie("MapTasksTitle");

                    //$.cookie("MapTasksTitle", maptsks.join(','), {
                    //    expires: 2000
                    //});
                    $.cookie(CookiesIdentifier + "MapStatus", $('#example-multiple-optgroups_Map').val(), {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "MapType", $('#example-xss-html_Map7').val(), {
                        expires: 2000
                    });
                    var MapMarkets = $("#example-xss-html_Map").val();
                    if (MapMarkets != null) {
                        $.cookie(CookiesIdentifier + "MapMarkets", MapMarkets.join(','), {
                            expires: 2000
                        });
                    }
                    else {
                        $.cookie(CookiesIdentifier + "MapMarkets", "0", {
                            expires: 2000
                        });
                    }
                    // MapTasks Cookie
                    mapstart = firstDay;//moment().subtract(29, 'days');
                    StartDate = mapstart;
                    mapend = lastDay;//moment();
                    EndDate = mapend;

                    var MapDate = $('#MapDate span').html().split("-");

                    // MapFromDate = moment(mapstart).format('MM/DD/YY');
                    //   MapToDate = moment(mapend).format('MM/DD/YY');// end.format('MM/DD/YY');
                    $.cookie(CookiesIdentifier + "MapFromDate", MapDate[0], {
                        expires: 2000
                    });
                    $.cookie(CookiesIdentifier + "MapToDate", MapDate[1], {
                        expires: 2000
                    });

                    var MapTasks = $("#example-xss-html_Map5").val();
                    if (MapTasks != null) {
                        $.cookie(CookiesIdentifier + "MapTasks", MapTasks.join(','), {
                            expires: 2000
                        });
                    }
                    else {
                        $.cookie(CookiesIdentifier + "MapTasks", "0", {
                            expires: 2000
                        });
                    }

                    if ($("#example-xss-html_Map").val() !== null) {
                        initMap();
                        $('.gmnoprint').hide();

                    } else {
                        swal("Error !", "Select Markets", "error");
                    }


                });
                $('#btns1').click(function () {
                    $(".IssuesStatusLabel").css("display", "none");
                    $(".tasktitle").css("display", "none");
                    $(".marketLabel").css("display", "block");
                    TabFlag = 'Sites';
                    $('#ListProjectTask').hide();

                    $('#lstProjectMarkets').show();
                    $('#lstIssueStatus').hide();
                    $('#setTarget').hide();
                    if ($.cookie(CookiesIdentifier + "SiteProjectMarkets") != null && $.cookie(CookiesIdentifier + "SiteProjectMarkets") != 'undefined' && $.cookie(CookiesIdentifier + "SiteProjectMarkets") != undefined) {
                        if ($.cookie(CookiesIdentifier + "SiteProjectMarkets").split(',') != null && $.cookie(CookiesIdentifier + "SiteProjectMarkets").split(',') != undefined && $.cookie(CookiesIdentifier + "SiteProjectMarkets").split(',') != "undefined") {
                            $("#example-xss-html_Project").val($.cookie(CookiesIdentifier + "SiteProjectMarkets").split(','));
                            $("#example-xss-html_Project").multiselect("refresh");
                        }
                    }
                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    angular.element(document.getElementById('widget-grid')).scope().GetAllSites();
                    $(".tasktitle").html('');
                    $(".comboTreeWrapper").css("display", "none");

                    if ($('#example-xss-html_Project option:selected').toArray().length == 1) {
                        $(".marketLabel").text($('#example-xss-html_Project option:selected').toArray().map(item => item.text).join());
                    } else {
                        $(".marketLabel").text("Multiple Markets");
                    }

                    if ($.cookie(CookiesIdentifier + "SiteFromDate") != null && $.cookie(CookiesIdentifier + "SiteFromDate") != undefined && $.cookie(CookiesIdentifier + "SiteFromDate") != "undefined") {
                        var SiteFromDate = $.cookie(CookiesIdentifier + "SiteFromDate");
                        var SitEndDate = $.cookie(CookiesIdentifier + "SiteToDate");
                        $(".dateLabel").html(SiteFromDate + "-" + SitEndDate);
                    }

                });


                $('#btns2').click(function () {
                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    $(".tasktitle").css("display", "block");
                    $(".comboTreeWrapper").css("display", "block");
                    $(".IssuesStatusLabel").css("display", "none");
                    if ($.cookie(CookiesIdentifier + "ProjectMarkets") != null && $.cookie(CookiesIdentifier + "ProjectMarkets") != 'undefined' && $.cookie(CookiesIdentifier + "ProjectMarkets") != undefined) {
                        if ($.cookie(CookiesIdentifier + "ProjectMarkets").split(',') != null && $.cookie(CookiesIdentifier + "ProjectMarkets").split(',') != undefined && $.cookie(CookiesIdentifier + "ProjectMarkets").split(',') != "undefined") {
                            $("#example-xss-html_Project").val($.cookie(CookiesIdentifier + "ProjectMarkets").split(','));
                            $("#example-xss-html_Project").multiselect("refresh");
                        }
                    }

                    TabFlag = 'Tracking';
                    $(".marketLabel").css("display", "block");
                    $('#ListProjectTask').show();
                    $('#lstIssueStatus').hide();
                    $('#lstProjectMarkets').show();
                    $('#setTarget').show();
                    if ($.cookie(CookiesIdentifier + "PTasksTitle") == null || $.cookie(CookiesIdentifier + "PTasksTitle") == undefined || $.cookie(CookiesIdentifier + "PTasksTitle") == "undefined") {
                        $(".tasktitle").html("No Selected Task");
                    } else {
                        $(".tasktitle").html($.cookie(CookiesIdentifier + "PTasksTitle"));
                    }
                    if ($('#example-xss-html_Project option:selected').toArray().length == 1) {
                        $(".marketLabel").text($('#example-xss-html_Project option:selected').toArray().map(item => item.text).join());
                    } else {
                        $(".marketLabel").text("Multiple Markets");
                    }



                    if ($.cookie(CookiesIdentifier + "TrackingFromDate") != null && $.cookie(CookiesIdentifier + "TrackingFromDate") != undefined && $.cookie(CookiesIdentifier + "TrackingFromDate") != "undefined") {
                        var SiteFromDate = $.cookie(CookiesIdentifier + "TrackingFromDate");
                        var SitEndDate = $.cookie(CookiesIdentifier + "TrackingToDate");
                        $(".dateLabel").html(SiteFromDate + "-" + SitEndDate);
                    }
                });

                $('#btns3').click(function () {

                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;

                    $(".IssuesStatusLabel").css("display", "block");
                    $("#comboTreeWrapper").css("display", "none");
                    $('#example-xss-html_Project option').prop('selected', 'selected').change();
                    $("#example-xss-html_Project").multiselect("refresh");
                    TabFlag = 'Issues';
                    $(".marketLabel").css("display", "block");
                    $('#lstProjectMarkets').show();
                    $('#lstIssueStatus').show();
                    $('#setTarget').hide();
                    $('#lstIssueStatus > .multiselect-native-select > .btn-group > .multiselect > .multiselect-selected-text').text('All Selected');
                    // angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    angular.element(document.getElementById('widget-grid')).scope().GetAllIssues();
                    $('#ListProjectTask').hide();
                    $(".tasktitle").html('');
                    $(".comboTreeWrapper").css("display", "none");
                    if ($.cookie(CookiesIdentifier + "PMIssuesProjectMarkets") != null && $.cookie(CookiesIdentifier + "PMIssuesProjectMarkets") != "undefined" && $.cookie(CookiesIdentifier + "PMIssuesProjectMarkets") != undefined) {

                        $("#example-xss-html_Project").val($.cookie(CookiesIdentifier + "PMIssuesProjectMarkets").split(','));
                        $("#example-xss-html_Project").multiselect("refresh");

                    } else {
                        $(".marketLabel").text("All Markets");
                    }
                    var issuesMarkets = $.cookie(CookiesIdentifier + "IssuesSelectmarketsText");
                    if (issuesMarkets != null && issuesMarkets != undefined && issuesMarkets != "undefined") {
                        if (issuesMarkets.split(',').length == 1) {
                            $(".marketLabel").text(issuesMarkets);
                        } else {
                            $(".marketLabel").text("Multiple Markets");
                        }
                    } else {
                        $(".marketLabel").text("All Markets");
                    }

                    if ($.cookie(CookiesIdentifier + "IssueStaus") != null && $.cookie(CookiesIdentifier + "IssueStaus") != 'undefined' && $.cookie(CookiesIdentifier + "IssueStaus") != undefined) {
                        if ($.cookie(CookiesIdentifier + "IssueStaus").split(',') != null && $.cookie(CookiesIdentifier + "IssueStaus").split(',') != undefined && $.cookie(CookiesIdentifier + "IssueStaus").split(',') != "undefined") {
                            $("#example-getting-started").val($.cookie(CookiesIdentifier + "IssueStaus").split(','));
                            $("#example-getting-started").multiselect("refresh");
                        }
                    }

                    if ($.cookie(CookiesIdentifier + "PMIssuesFromDate") != null && $.cookie(CookiesIdentifier + "PMIssuesFromDate") != undefined && $.cookie(CookiesIdentifier + "PMIssuesFromDate") != "undefined") {
                        var PMIssuesFromDate = $.cookie(CookiesIdentifier + "PMIssuesFromDate");
                        var PMIssuesToDate = $.cookie(CookiesIdentifier + "PMIssuesToDate");
                        $(".dateLabel").html(PMIssuesFromDate + "-" + PMIssuesToDate);
                    }
                    $("#example-getting-started").next(".btn-group").find("button").find(".multiselect-selected-text").html('Status');
                });

                $('#btns4').click(function () {
                    angular.element(document.getElementById('widget-grid')).scope().CookieIdentifier = CookiesIdentifier;
                    $(".IssuesStatusLabel").css("display", "none");
                    TabFlag = 'Summary';

                    $('#lstIssueStatus').hide();
                    $('#setTarget').hide();
                    $('#lstProjectMarkets').hide();
                    $('#ListProjectTask').hide();
                    $(".tasktitle").html('');
                    $(".comboTreeWrapper").css("display", "none");
                    $(".marketLabel").css("display", "none");

                    if ($.cookie(CookiesIdentifier + "FromDate") != null && $.cookie(CookiesIdentifier + "FromDate") != undefined && $.cookie(CookiesIdentifier + "FromDate") != "undefined") {
                        var ProgFromDate = $.cookie(CookiesIdentifier + "FromDate");
                        var ProgToDate = $.cookie(CookiesIdentifier + "ToDate");
                        $(".dateLabel").html(ProgFromDate + "-" + ProgToDate);
                    }
                });


                function SortByName(a, b) {
                    var aName = a.Issue.toLowerCase();
                    var bName = b.Issue.toLowerCase();
                    return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
                }
                function SortByLabel(a, b) {
                    var aName = a.label.toLowerCase();
                    var bName = b.label.toLowerCase();
                    return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
                }
                var TitleText = '';

                function ShowSuccessMessage() {
                    $("#SuccessMessage").fadeIn(3000);
                    $("#SuccessMessage").fadeIn(5000);

                }

                $('#example-enableClickableOptGroups-onChange').multiselect({
                    enableClickableOptGroups: true,
                    onChange: function (option, checked) {
                        alert(option.length + ' options ' + (checked ? 'selected' : 'deselected'));
                    }
                });
                var Readiness = [];
                function GroupByIssues(data) {
                    var group_to_values = data.reduce(function (obj, item) {
                        obj[item.Type] = obj[item.Type] || [];
                        obj[item.Type].push({ label: item.DefinationName, y: item.WoCount, toolTipContent: item.Type + ': ' + item.WoCount, Type: item.Type, ColorCode: item.ColorCode });
                        return obj;
                    }, {});

                    var groups = Object.keys(group_to_values).map(function (key) {
                        return { DefinationName: key, chartdata: group_to_values[key] };
                    });

                    return groups;
                }
                $('#Readiness').click(function () {
                    MarketViewName = 'Readiness';
                    $("#ListMarketIssue").show();
                    $("#marketfilters").hide();
                    $(".datewise").hide();
                    $("#RbackButton").hide();
                    //$('#regionviewchart').hide();
                    //$('#marketregion').hide();
                    //$('#ProjectReadiness').show();.
                    LoadReadiness();

                });
                function LoadRegion() {

                    $.ajax({
                        url: '/Project/Dashboard/GetMarkets?Filter=Get_RegionView_WO&ProjectId=' + $("#pId").attr("data-ProjectId"),
                        type: 'Get',
                        async: false,
                        success: function (data) {
                            $('#marketregion').html(data);
                        }, error(e) {
                        }
                    });
                }

                LoadRegion();
                function LoadReadiness() {
                    CanvasJS.addColorSet("ReadinessColor",
                        [
                            "#4472c4",
                            "#ed7d31",
                            "#ff0000"
                        ]);
                    var url;

                    if (mmarketid != null) {
                        var url = '/Project/Dashboard/GetDashboardCharts?filter=GET_PROJECT_READINESS&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + mtaskid
                            + '&LocationIds=' + mmarketid + '&FromDate=' + mfromdate + '&ToDate=' + mtodate + '&SearchFilter=Daily'

                    }
                    else {
                        url = '/Project/Dashboard/GetDashboardCharts?filter=GET_PROJECT_READINESS&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + $.cookie(CookiesIdentifier + 'ProjectTasks')
                            + '&LocationIds=' + $.cookie(CookiesIdentifier + "ProjectMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "FromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "ToDate") + '&SearchFilter=Daily'

                    }

                    $.ajax({
                        url: url,
                        type: 'Get',
                        async: false,
                        success: function (data) {
                            Readiness = [];
                            var sd = {};

                            var grpIssues = GroupByIssues(data);
                            for (var i = 0; i < grpIssues.length; i++) {
                                var col = '';
                                var issueStackbar = [];
                                for (var j = 0; j < grpIssues[i].chartdata.length; j++) {
                                    col = grpIssues[i].chartdata[j].ColorCode;
                                    issueStackbar.push({ indexLabel: "{y}", label: grpIssues[i].chartdata[j].label, y: grpIssues[i].chartdata[j].y, name: 'Market Issue', toolTipContent: grpIssues[i].chartdata[j].Type + ': ' + grpIssues[i].chartdata[j].y, color: grpIssues[i].chartdata[j].ColorCode });
                                }

                                Readiness.push({
                                    type: "column",
                                    legendText: grpIssues[i].DefinationName,
                                    legendMarkerColor: col,
                                    showInLegend: true,
                                    dataPoints: issueStackbar
                                })

                            }

                        }
                    });

                    var chart = new CanvasJS.Chart("regionviewchart1", {
                        animationEnabled: false,
                        colorSet: "ReadinessColor",
                        height: 270,
                        exportEnabled: true,
                        title: {
                            text: "",
                            fontFamily: "arial black",
                            fontColor: "#695A42"
                        },
                        axisX: {
                            //interval: 1,
                            //intervalType: "year"
                        },
                        title: {
                            text: "Readiness as of " + moment.utc(new Date).format('MMM DD, YY')
                        },
                        axisY: {
                            //valueFormatString: "$#0bn",
                            //gridColor: "#B6B1A8",
                            //tickColor: "#B6B1A8"
                        },
                        toolTip: {
                            //shared: true,
                            //content: toolTipContent
                        },

                        data: Readiness
                    });
                    showDefaultText(chart, "No Data Available");
                    chart.render();

                }
                $('#Projects').click(function () {
                    LoadRegion();
                    //MarketViewName = 'MarketRegional';
                    $("#marketfilters").show();
                    //$("#ListMarketIssue").show();
                    //$.ajax({
                    //    url: '/Project/Dashboard/GetMarkets?filter=' + 'Get_RegionView_WO&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value=null',

                    //    type: 'get',
                    //    async: false,
                    //    success: function (data) {

                    //        $('#regionviewchart').empty();
                    //        $('#regionviewchart').html(data);
                    //    }
                    //})
                    //$('#regionviewchart').show();
                    //$('#marketregion').show();
                    //$('#ProjectReadiness').hide();
                })
                $('.national').hide();
                IssueViewName = 'piechart'
                $('#Issue_By_pie_btn').click(function () {
                    IssueViewName = 'piechart'
                    $('#lstIssueMarkets').show();
                    $('.national').hide();
                    $('.isssuesbtn').hide();
                    LoadpieChart();
                    $('#backButton').hide();
                });
                //function GroupProgramIssue(data) {
                //    var group_to_values = data.reduce(function (obj, item) {
                //        obj[item.Issue] = obj[item.Issue] || [];
                //        obj[item.Issue].push({ DefinationName: item.DefinationName, DefinationId: item.DefinationId, y: item.TotalSite });
                //        return obj;
                //    }, {});

                //    var groups = Object.keys(group_to_values).map(function (key) {
                //        return { Issue: key, data: group_to_values[key] };
                //    });

                //    return groups;
                //}
                var series = []
                $('#NATIONAL_PROGRAM_ISSUES').click(function () {
                    IssueViewName = 'National'
                    $('#lstIssueMarkets').hide();
                    $('.isssuesbtn').hide();
                    $('.national').show();
                    loadChartNational('Daily')


                });

                $('.national-chart').click(function () {

                    if ($(this).attr('data-type') != undefined) {
                        loadChartNational($(this).attr('data-type'));
                    }

                })

                function loadChartNational(searchfilter) {

                    var url = ''
                    if (marketid != null) {
                        var url = '/Project/Dashboard/GetDashboardCharts?filter=NATIONAL_PROGRAM_ISSUES&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds' + taskid
                            + '&LocationIds=' + marketid + '&FromDate=' + fromdate + '&ToDate=' + todate + '&SearchFilter=' + searchfilter

                    }
                    else {
                        var url = '/Project/Dashboard/GetDashboardCharts?filter=NATIONAL_PROGRAM_ISSUES&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds' + $.cookie(CookiesIdentifier + 'ProjectTasks')
                            + '&LocationIds=' + $.cookie(CookiesIdentifier + "IssueMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "IssueFromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "IssueToDate") + '&SearchFilter=' + searchfilter

                    }

                    series = []
                    $.ajax({
                        //    url: '/Project/Dashboard/GetDashboardCharts?filter=NATIONAL_PROGRAM_ISSUES&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=null&TaskIds' + $.cookie("ProjectTasks")
                        //    + '&LocationIds=' + $.cookie("ProjectMarkets") + '&FromDate=' + FromDate + '&ToDate=' + ToDate + '&SearchFilter=' + searchfilter,
                        url: url,
                        type: 'Get',
                        async: false,
                        success: function (data) {
                            data = GroupProgramIssue(data);
                            for (var i = 0; i < data.length; i++) {
                                var issueStackbar = [];
                                var col = '';
                                for (var j = 0; j < data[i].data.length; j++) {
                                    if (searchfilter == 'Daily') {
                                        var date = new Date(moment.utc(data[i].data[j].DefinationName));
                                        sd = { label: ((date.getMonth() + 1) + '/' + date.getDate()), color: data[i].data[j].ColorCode, y: data[i].data[j].y, color: data[i].data[j].ColorCode };
                                        col = data[i].data[j].ColorCode;
                                    }
                                    else {
                                        col = data[i].data[j].ColorCode;
                                        sd = { label: data[i].data[j].DefinationName, y: data[i].data[j].y, color: data[i].data[j].ColorCode, color: data[i].data[j].ColorCode };
                                    }

                                    issueStackbar.push(sd);
                                }

                                series.push({
                                    type: "stackedColumn",
                                    legendText: data[i].Issue,
                                    legendMarkerColor: col,
                                    showInLegend: true,
                                    dataPoints: issueStackbar
                                })

                            }


                        }
                    });


                    //LoadCharts("Issue_By_pie", "270", series, "CustomColor","bottom")
                    var chart = new CanvasJS.Chart("Issue_By_pie", {
                        animationEnabled: false,
                        colorSet: "CustomColor",
                        height: 270,
                        exportEnabled: true,
                        title: {
                            text: "National Program",
                            horizontalAlign: "left",
                            fontFamily: "calibri"
                        },
                        axisX: {
                            interval: 1,

                        },
                        axisY: {

                        },
                        toolTip: {

                        },
                        data: series
                    });
                    showDefaultText(chart, "No Data Available");
                    chart.render();
                }
                $('#SITE_DISPOSITON').click(function () {
                    MarketViewName = 'Disposition';
                    $("#marketfilters").show();
                    $(".datewise").hide();
                    $("#RbackButton").hide();
                    $("#ListMarketIssue").hide();
                    //$('#regionviewchart').hide();
                    //$('#marketregion').hide();
                    //$('#ProjectReadiness').show();
                    //
                    loadDisposition();

                });


                function loadDisposition() {
                    var url;
                    if (mmarketid != null) {
                        var url = '/Project/Dashboard/GetDashboardCharts?filter=SITE_DISPOSITON&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + mtaskid
                            + '&LocationIds=' + mmarketid + '&FromDate=' + mfromdate + '&ToDate=' + mtodate + '&SearchFilter=Daily'

                    }
                    else {
                        url = '/Project/Dashboard/GetDashboardCharts?filter=SITE_DISPOSITON&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + $.cookie(CookiesIdentifier + 'ProjectTasks')
                            + '&LocationIds=' + $.cookie(CookiesIdentifier + "ProjectMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "FromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "ToDate") + '&SearchFilter=Daily'

                    }

                    $.ajax({
                        //url: '/Project/Dashboard/GetDashboardCharts?filter=SITE_DISPOSITON&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + $.cookie('ProjectTasks')
                        //+ '&LocationIds=' + $.cookie("ProjectMarkets") + '&FromDate=' + $.cookie("FromDate") + '&ToDate=' + $.cookie("ToDate") + '&SearchFilter=Daily',
                        url: url,
                        type: 'Get',
                        async: false,
                        success: function (data) {

                            var datapoints = []
                            var sd = {};

                            for (var i = 0; i < data.length; i++) {

                                sd = { label: data[i].Status, y: data[i].SiteCount, legendText: data[i].Status, color: data[i].ColorCode };
                                datapoints.push(sd);

                            }
                            var pie = [{
                                type: "pie",
                                height: 200,
                                //width:705,
                                showInLegend: true,
                                indexLabelPlacement: "inside",
                                indexLabelFontSize: 15,
                                indexLabelFontColor: '#fff',
                                indexLabel: "{y}",
                                yValueFormatString: "##0\"\"",
                                dataPoints: datapoints
                            }]
                            LoadCharts("regionviewchart1", 290, pie, "PieColor", "right", "")
                            //var chart = new CanvasJS.Chart("regionviewchart", {
                            //    animationEnabled: true,
                            //    colorSet: "CustomColor",
                            //    exportEnabled: true,
                            //    theme: "light2",

                            //    height: "290",
                            //    width: "700",
                            //    legend: {
                            //        horizontalAlign: "right", // "center" , "right"
                            //        verticalAlign: "center",  // "top" , "bottom"
                            //        fontSize: 15
                            //    },
                            //    data: [{
                            //        type: "pie",
                            //        height: 200,
                            //        //width:705,
                            //        showInLegend: true,
                            //        indexLabelPlacement: "inside",
                            //        indexLabelFontSize: 15,
                            //        indexLabelFontColor: '#fff',
                            //        indexLabel: "{y}",
                            //        yValueFormatString: "##0\"\"",
                            //        dataPoints: datapoints
                            //    }]
                            //});

                            //showDefaultText(chart, "No Data Available");
                            //chart.render();
                        }
                    });
                }


                var picchart = []
                function LoadpieChart(mid, tid, fdate, todate) {

                    var url = ''
                    if (mid != null) {
                        var url = '/Project/Dashboard/GetDashboardCharts?filter=Get_Project_Issue_By&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds' + tid
                            + '&LocationIds=' + mid + '&FromDate=' + fdate + '&ToDate=' + todate + '&SearchFilter=Daily'

                    }
                    else {
                        var url = '/Project/Dashboard/GetDashboardCharts?filter=Get_Project_Issue_By&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds' + $.cookie(CookiesIdentifier + 'ProjectTasks')
                            + '&LocationIds=' + $.cookie(CookiesIdentifier + "IssueMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "IssueFromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "IssueToDate") + '&SearchFilter=Daily'

                    }
                    $.ajax({
                        //url: '/Project/Dashboard/GetRegionIssue?Filter=Get_Project_Issue_By&ProjectId=' + $("#pId").attr("data-ProjectId"),
                        url: url,
                        type: 'Get',
                        async: false,
                        success: function (data) {

                            picchart = []
                            var sd = {};
                            for (var i = 0; i < data.length; i++) {

                                sd = { label: data[i].IssueBy, y: data[i].TotalSite, legendText: data[i].IssueBy + ' ' + '(' + data[i].IssueCount + ')', color: data[i].ColorCode };
                                picchart.push(sd);

                            }
                            //         var option2 = '';
                            //         for (var i = 0; i < data.length; i++) {

                            //             //if (data[i].TaskId == parseInt($.cookie("MarketTasks"))) {
                            //             //    option2 += '<option value="' + (i+1) + '" " selected="selected">' + result[i].IssueBy + '</option>'
                            //             //}
                            //             //else {
                            //                 option2 += '<option value="' + (i+1) + '">' + data[i].IssueBy + '</option>'
                            //             //}

                            //         }
                            //var txt1 = '<script type="text/javascript">$(document).ready(function() {$("#example-multiple-optgroups_Map").multiselect();});<'+'/'+'script><select class="form-control" id="example-multiple-optgroups_Map">' + option2 + '</select>';

                            //$('#ListMapIssues').html(txt1)
                            picchart = picchart.sort(SortByLabel);
                            $('#Issue_By_pie').empty();
                            //$('#Issue_By_pie').html(data);
                        }
                    });
                    var pie = [{
                        type: "pie",
                        height: 200,
                        //width:705,
                        showInLegend: true,
                        indexLabelPlacement: "inside",
                        indexLabelFontSize: 15,
                        indexLabelFontColor: '#fff',
                        indexLabel: "{y}",
                        yValueFormatString: "##0.0\"%\"",
                        dataPoints: picchart
                    }]
                    CanvasJS.addColorSet("PieColor",
                        [
                            "#7cb5ec",
                            "#5c5c61",
                            "#90ed7d",
                            "#f7a35c",
                            "#d0d2f7",
                            "#f15c80",
                            "#2b908f",

                        ]);

                    //LoadCharts("Issue_By_pie", 290, pie, "PieColor", "right", "")
                    var chart = new CanvasJS.Chart("Issue_By_pie", {
                        animationEnabled: false,
                        colorSet: "PieColor",
                        theme: "light2",
                        height: "290",
                        exportEnabled: true,
                        //width: "700",
                        title: {
                            text: ""
                        },
                        legend: {
                            horizontalAlign: "right", // "center" , "right"
                            verticalAlign: "center",  // "top" , "bottom"
                            fontSize: 15
                        },
                        data: [{
                            type: "pie",
                            height: 200,
                            //width:705,
                            showInLegend: true,
                            indexLabelPlacement: "inside",
                            indexLabelFontSize: 15,
                            indexLabelFontColor: '#fff',
                            indexLabel: "{y}",
                            yValueFormatString: "##0.0\"%\"",
                            dataPoints: picchart
                        }]
                    });

                    showDefaultText(chart, "No Data Available");
                    chart.render();
                }
                LoadpieChart();

                ////#REGION SUMMARY CAHARTS

                ////#end REGION SUMMARY CAHARTS

                function LoadCharts(id, height, data, color, lagendside, title) {
                    var chart = new CanvasJS.Chart(id, {
                        animationEnabled: false,
                        colorSet: color,
                        theme: "light2",
                        height: height,
                        exportEnabled: true,
                        title: {
                            text: title
                        },
                        width: "700",
                        legend: {
                            horizontalAlign: lagendside,// "right", // "center" , "right"
                            verticalAlign: "center",  // "top" , "bottom"
                            fontSize: 15
                        },
                        data: data
                    });

                    showDefaultText(chart, "No Data Available");
                    chart.render();

                }
                $('#Issue_By_Geo_btn').click(function () {
                    IssueViewName = 'Regional'
                    $('.national').hide();
                    $('#lstIssueMarkets').show();
                    $.ajax({
                        url: '/Project/Dashboard/GetMarkets?filter=' + 'Get_Region_Issue&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value=null',
                        //    url: '/Project/Dashboard/GetDashboardCharts?filter=Get_Region_Issue&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + $.cookie('ProjectTasks')
                        //+ '&LocationIds=' + $.cookie("ProjectMarkets") + '&FromDate=' + $.cookie("FromDate") + '&ToDate=' + $.cookie("ToDate") + '&SearchFilter=Daily',


                        type: 'get',
                        async: false,
                        success: function (data) {
                            //$('#Issue_By_Geo').empty();
                            //$('#Issue_By_Geo').html(data);
                            $('#Issue_By_pie').empty();
                            $('#Issue_By_pie').html(data);
                        }
                    });

                    //$('#backButton').show();
                    //$('#Issue_By_Geo').show();
                    //$('#Issue_By_pie').hide();
                });

                $.ajax({
                    url: '/Project/Dashboard/GetSummary?Filter=PROGRAM_SUMMARY&ProjectId=' + parseInt($("#pId").attr("data-ProjectId")) + '&Value1=' + '' + '&TaskIds=' + $.cookie(CookiesIdentifier + "ProjectTasks") + '&LocationIds=' + $.cookie(CookiesIdentifier + "ProjectMarkets")
                        + '&FromDate=' + $.cookie(CookiesIdentifier + "FromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "ToDate") + '&SearchFilter=',
                    type: 'Get',
                    async: false,
                    success: function (data) {
                        $('#Summary').html(data);
                    }
                });
                $('#todo').click(function () {
                    $('#calendar').hide();
                    $('#Todoview').show();
                    $('#widget-body-toolbar').hide();
                });
                $('#cv').click(function () {
                    $('#calendar').show();
                    $('#Todoview').hide();
                    $('#widget-body-toolbar').show();
                });

                var RegionId;
                var workLog;
                var ProjectSiteId;
                var MarketId = null;
                var stages;
                $('#market').hide();

                $('#Todoview').hide();
                $('#Issue_By_Geo').hide();
                $('#ProjectReadiness').hide();
                $('.issue-button').hide();
                pageSetUp();



                $(".dropdown-menu a").click(function () {
                    var selText = $(this).text();
                    var $this = $(this);
                    $this.parents('.text-dropdown').find('h2').html(selText + ' <span class="caret"></span>');
                    $this.parents('.dropdown-menu').find('li').removeClass('active');
                    $this.parent().addClass('active');
                    //return false;
                });

                /*
                * TODO: add a way to add more todo's to list
                */

                //// initialize sortable

                // check and uncheck
                $('.todo .checkbox > input[type="checkbox"]').click(function () {
                    var $this = $(this).parent().parent().parent();

                    if ($(this).prop('checked')) {
                        $this.addClass("complete");

                        // remove this if you want to undo a check list once checked
                        //$(this).attr("disabled", true);
                        $(this).parent().hide();

                        // once clicked - add class, copy to memory then remove and add to sortable3
                        $this.slideUp(500, function () {
                            $this.clone().prependTo("#sortable3").effect("highlight", {}, 800);
                            $this.remove();
                            countTasks();
                        });
                    } else {
                        // insert undo code here...
                    }

                })
                // count tasks
                function countTasks() {

                    $('.todo-group-title').each(function () {
                        var $this = $(this);
                        $this.find(".num-of-tasks").text($this.next().find("li").size());
                    });

                }

                /*
                * RUN PAGE GRAPHS
                */

                /* TAB 1: UPDATING CHART */
                // For the demo we use generated data, but normally it would be coming from the server

                var data = [], totalPoints = 200, $UpdatingChartColors = $("#updating-chart").css('color');

                function getRandomData() {
                    if (data.length > 0)
                        data = data.slice(1);

                    // do a random walk
                    while (data.length < totalPoints) {
                        var prev = data.length > 0 ? data[data.length - 1] : 50;
                        var y = prev + Math.random() * 10 - 5;
                        if (y < 0)
                            y = 0;
                        if (y > 100)
                            y = 100;
                        data.push(y);
                    }

                    // zip the generated y values with the x values
                    var res = [];
                    for (var i = 0; i < data.length; ++i)
                        res.push([i, data[i]])
                    return res;
                }

                // setup control widget
                var updateInterval = 1500;
                $("#updating-chart").val(updateInterval).change(function () {

                    var v = $(this).val();
                    if (v && !isNaN(+v)) {
                        updateInterval = +v;
                        $(this).val("" + updateInterval);
                    }

                });

                // setup plot
                var options = {
                    yaxis: {
                        min: 0,
                        max: 100
                    },
                    xaxis: {
                        min: 0,
                        max: 100
                    },
                    colors: [$UpdatingChartColors],
                    series: {
                        lines: {
                            lineWidth: 1,
                            fill: true,
                            fillColor: {
                                colors: [{
                                    opacity: 0.4
                                }, {
                                    opacity: 0
                                }]
                            },
                            steps: false

                        }
                    }
                };

                var plot = $.plot($("#updating-chart"), [getRandomData()], options);

                /* live switch */
                $('input[type="checkbox"]#start_interval').click(function () {
                    if ($(this).prop('checked')) {
                        $on = true;
                        updateInterval = 1500;
                        update();
                    } else {
                        clearInterval(updateInterval);
                        $on = false;
                    }
                });

                function update() {
                    if ($on == true) {
                        plot.setData([getRandomData()]);
                        plot.draw();
                        setTimeout(update, updateInterval);

                    } else {
                        clearInterval(updateInterval)
                    }

                }

                var $on = false;

                var checkprojectId = 0;

                $('.task').click(function () {
                    var id = $(this).attr('data-ProjectId')
                    var eventdata = [];
                    if (id != checkprojectId) {
                        $.ajax({
                            url: '/Project/Dashboard/GetMilstonesBarchart?ProjectId=' + id + '&filter=' + 'Get_Calendar_WO',
                            type: 'Get',
                            async: false,
                            success: function (data) {
                                for (var i = 0; i < data.length; i++) {
                                    var date = new Date(parseInt(data[i].ActualDate.substr(6)));
                                    var obj = { title: data[i].Title, start: new Date(date), className: ["event", "bg-color-greenLight"], icon: 'fa-check' }
                                    $('#calendar').fullCalendar('renderEvent', obj, true);
                                    eventdata.push(obj);
                                }
                            }
                        });
                    }
                    checkprojectId = id;

                });

                if ($("#calendar").length) {
                    var date = new Date();
                    var d = date.getDate();
                    var m = date.getMonth();
                    var y = date.getFullYear();
                    var popTemplate = [
                        '<div class="popover" style="max-width:600px;" >',
                        '<div class="arrow"></div>',
                        '<div class="popover-header">',
                        '<button id="closepopover" type="button" class="close" aria-hidden="true"></button>',
                        '<h3 class="popover-title"></h3>',
                        '</div>',
                        '<div class="popover-content"></div>',
                        '</div>'].join('');
                    var calendar = $('#calendar').fullCalendar({

                        //editable : true,
                        //draggable : true,
                        selectable: false,
                        selectHelper: true,
                        unselectAuto: false,
                        disableResizing: true,
                        height: 530,
                        eventLimit: true,
                        views: {
                            month: {
                                eventLimit: 3
                            }
                        },

                        header: {
                            left: 'title', //,today
                            center: 'prev, next, today',
                            right: 'month, agendaWeek, agenDay' //month, agendaDay,
                        },

                        select: function (start, end, allDay) {
                            var title = prompt('Event Title:');
                            if (title) {
                                calendar.fullCalendar('renderEvent', {
                                    toDoTtitle: toDoTtitle,
                                    title: title,
                                    toDoDateTime: toDoDateTime,
                                    description: description,
                                    SiteName: SiteName,
                                    TaskName: TaskName,
                                    Resources: Resources,
                                    start: start,
                                    end: end,
                                    allDay: allDay
                                }, true // make the event "stick"
                                );
                            }
                            calendar.fullCalendar('unselect');
                        },

                        events: [

                        ],
                        select: function (start, end, jsEvent) {
                            closePopovers();
                            popoverElement = $(jsEvent.target);
                            $(jsEvent.target).popover({
                                title: 'the title',
                                content: function () {
                                    return $("#popoverContent").html();
                                },
                                template: popTemplate,
                                placement: 'left',
                                html: 'true',
                                trigger: 'click',
                                animation: 'true',
                                container: 'body'
                            }).popover('show');
                        },

                        eventClick: function (calEvent, jsEvent, view) {
                            //closePopovers();
                            popoverElement = $(jsEvent.currentTarget);
                        },

                        eventRender: function (event, element, icon) {
                            if (!event.description == "") {
                                element.find('.fc-event-title').append("<br /><span class='ultra-light'>" + '' + "</span>");
                            }
                            if (!event.icon == "") {
                                element.find('.fc-event-title').append("<i class='air air-top-right fa " + event.icon + " '></i>");
                            }
                            element.popover({
                                title: ' ' + event.toDoTtitle,
                                content: function () {
                                    // `<b>Site: </b>` + event.SiteName + `<br />`
                                    // `<b>Task: </b>` + event.TaskName + `<br />`
                                    var contents = `<b>Type: </b> ` + event.title + ` <br /> <b>Date Time: </b> ` + event.toDoDateTime + `<br /> <b>Description: </b><pre> ` + event.description + ` </pre>`;
                                    if (event.SiteName != "" && event.SiteName != "undefined" && event.SiteName != null) {
                                        contents += `<b>@Entity.Title: </b>` + event.SiteName + `<br />`;
                                    }
                                    if (event.TaskName != "" && event.TaskName != "undefined" && event.TaskName != null) {
                                        contents += `<b>Task: </b>` + event.TaskName + `<br />`;
                                    }
                                    if (event.Resources != "" && event.Resources != "undefined" && event.Resources != null) {
                                        contents += `<b>Resources: </b>` + event.Resources + `<br />`;
                                    }
                                    $("#popoverContent").html(contents);
                                    return $("#popoverContent").html();
                                },
                                template: popTemplate,
                                placement: 'left',
                                html: 'true',
                                trigger: 'hover',
                                animation: 'true',
                                container: 'body'
                            });
                            //element.popover({
                            //    animation: true,
                            //    delay: 300,
                            //    html: 'true',
                            //    content: '<b>Title:</b> ' + event.toDoTtitle + '<br /><b>Type:</b> ' + event.title + '<br /><b>Date Time:</b> ' + event.toDoDateTime,
                            //    trigger: 'hover'
                            //});
                        }
                    });

                };

                /* hide default buttons */
                $('.fc-header-right, .fc-header-center').hide();

                // calendar prev
                $('#calendar-buttons #btn-prev').click(function () {
                    $('.fc-button-prev').click();
                    return false;
                });

                // calendar next
                $('#calendar-buttons #btn-next').click(function () {
                    $('.fc-button-next').click();
                    return false;
                });

                // calendar today
                $('#calendar-buttons #btn-today').click(function () {
                    $('.fc-button-today').click();
                    return false;
                });

                // calendar month
                $('#mt').click(function () {
                    $('#calendar').show();
                    $('#Todoview').hide();
                    $('#calendar').fullCalendar('changeView', 'month');
                });

                // calendar agenda week
                $('#ag').click(function () {
                    $('#calendar').show();
                    $('#Todoview').hide();
                    $('#calendar').fullCalendar('changeView', 'agendaWeek');
                });

                // calendar agenda day
                $('#td').click(function () {
                    $('#calendar').show();
                    $('#Todoview').hide();
                    $('#calendar').fullCalendar('changeView', 'agendaDay');
                });

                /*
                 * CHAT
                 */

                $.filter_input = $('#filter-chat-list');
                $.chat_users_container = $('#chat-container > .chat-list-body')
                $.chat_users = $('#chat-users')
                $.chat_list_btn = $('#chat-container > .chat-list-open-close');
                $.chat_body = $('#chat-body');

                /*
                * LIST FILTER (CHAT)
                */

                // custom css expression for a case-insensitive contains()
                jQuery.expr[':'].Contains = function (a, i, m) {
                    return (a.textContent || a.innerText || "").toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
                };



                function LoadProgramChart(type) {
                    $("body").append(`<div id="ajaxLoading" style="position: fixed; top: 0px; bottom: 0px; left: 0px; right: 0px; margin: auto; padding: 8px; text-align: center; vertical-align: middle; width: 140px; height: 95px; z-index: 2000; border-radius: 4px; display: block;"><img src="/Content/Images/Application/Logo_Loading.gif" style="margin-bottom:8px;width:100px;height:100px"><p style="margin:0;font-size:15px;color:#fff;background:#88887B">Please Wait...</p></div>`);

                    // $("#reportrange3").find(".changingSelector").html()
                    $.ajax({
                        //url: '/Project/Dashboard/GetMilstonesBarchart?ProjectId=' + $("#pId").attr("data-ProjectId") + '&filter=Get_Project_Timeline_Variance',
                        url: '/Project/Dashboard/GetDashboardCharts?filter=Get_Project_Timeline_Variance&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '&TaskIds=' + $.cookie(CookiesIdentifier + 'PTasksId')
                            + '&LocationIds=' + $.cookie(CookiesIdentifier + "ProjectMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "TrackingFromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "TrackingToDate") + '&SearchFilter=' + type + "&DateRange=" + '',

                        type: 'Get',
                        async: false,
                        success: function (data) {

                            array = data;
                            var sd = {};
                            Forecast = [];
                            Planned = [];
                            Actual = [];
                            Target = [];
                            RunRate = [];
                            CumActual = [];
                            CumForecast = [];
                            CumTarget = [];

                            for (var i = 0; i < data.length; i++) {

                                if (data[i].WoDate != null) {
                                    if (type == "Daily") {
                                        var date = new Date(parseInt(data[i].WoDate.substr(6)));
                                        sd = { label: ((date.getMonth() + 1) + '/' + date.getDate()), y: data[i].WoCount };
                                    }
                                    else {
                                        sd = { label: data[i].WoDate, y: data[i].WoCount, legendMarkerColor: data[i].ColorCode };
                                    }

                                    if (data[i].WoType == 'Forecast') {
                                        forecastcolor = data[i].ColorCode;
                                        Forecast.push(sd);
                                    }
                                    else if (data[i].WoType == 'CumForecast') {
                                        cumforecastcolor = data[i].ColorCode;
                                        CumForecast.push(sd);
                                    }
                                    else if (data[i].WoType == 'Actual') {
                                        actularcolor = data[i].ColorCode;
                                        Actual.push(sd);
                                    }
                                    else if (data[i].WoType == 'CumActual') {

                                        cumactualcolor = data[i].ColorCode;
                                        CumActual.push(sd);
                                    }
                                    else if (data[i].WoType == 'Target') {
                                        targetcolor = data[i].ColorCode;
                                        Target.push(sd);
                                    }
                                    else if (data[i].WoType == 'CumTarget') {
                                        cumtargetcolor = data[i].ColorCode;
                                        CumTarget.push(sd);
                                    }

                                    else if (data[i].WoType == 'RunRate') {
                                        runratecolor = data[i].ColorCode;
                                        RunRate.push(sd);
                                    }

                                }

                            }

                        }
                    });
                    var chart = new CanvasJS.Chart("chartContainer", {
                        animationEnabled: false,
                        //colorSet: "CustomColor",
                        theme: "light2",
                        exportEnabled: true,
                        height: "300",
                        title: {
                            text: ""
                        },
                        axisX: {
                            valueFormatString: "MMM",
                            interval: 1
                        },
                        axisY: {
                            labelFormatter: addSymbols,
                            //interval: 50
                        },
                        axisY2: {
                            interval: 500
                        },
                        toolTip: {
                            shared: true
                        },
                        legend: {
                            cursor: "pointer",
                            itemclick: toggleDataSeries
                        },
                        data: [
                            {
                                type: "column",
                                axisYType: "primary",
                                axisYindex: 0,
                                exportEnabled: true,
                                name: "Actual",
                                //color: "#0070c0",
                                color: actularcolor,
                                showInLegend: true,
                                xValueFormatString: "MMMM YYYY",
                                yValueFormatString: "#,##0",
                                dataPoints: Actual
                            },
                            {
                                type: "line",
                                axisYType: "secondary",
                                connectNullData: true,
                                axisYindex: 0,
                                //color: "#0070c0",
                                color: cumactualcolor,
                                name: "Cum. Actual",
                                exportEnabled: true,
                                markerBorderColor: "white",
                                markerBorderThickness: 2,
                                showInLegend: true,
                                yValueFormatString: "#,##0",
                                dataPoints: CumActual
                            }, {
                                type: "column",
                                axisYType: "primary",
                                axisYindex: 0,
                                exportEnabled: true,
                                name: "Forecast",
                                //color: "#70ad47",
                                color: forecastcolor,
                                markerBorderColor: "white",
                                markerBorderThickness: 2,
                                showInLegend: true,
                                yValueFormatString: "#,##0",
                                dataPoints: Forecast
                            },
                            {
                                type: "line",
                                axisYType: "secondary",
                                connectNullData: true,
                                axisYindex: 1,
                                //color: "#70ad47",
                                color: cumforecastcolor,
                                exportEnabled: true,
                                name: "Cum. Forecast",
                                showInLegend: true,
                                yValueFormatString: "#,##0",
                                dataPoints: CumForecast

                            }, {
                                type: "column",
                                axisYType: "primary",
                                axisYindex: 0,
                                exportEnabled: true,
                                name: "Target",
                                //color: "#70ad47",
                                color: targetcolor,
                                markerBorderColor: "white",
                                markerBorderThickness: 2,
                                showInLegend: true,
                                yValueFormatString: "#,##0",
                                dataPoints: Target
                            },
                            {
                                type: "line",
                                axisYType: "secondary",
                                connectNullData: true,
                                axisYindex: 1,
                                //color: "#70ad47",
                                color: cumtargetcolor,
                                exportEnabled: true,
                                name: "Cum. Target",
                                showInLegend: true,
                                yValueFormatString: "#,##0",
                                dataPoints: CumTarget

                            },
                            {
                                type: "line",
                                axisYType: "primary",
                                connectNullData: true,
                                axisYindex: 1,
                                //color: "#e51427",
                                color: runratecolor,
                                exportEnabled: true,
                                name: "Run Rate",
                                showInLegend: true,
                                yValueFormatString: "#,##0",
                                dataPoints: RunRate

                            }]
                    });

                    //showDefaultText(chart, "No Data Available");
                    chart.render();

                    function addSymbols(e) {
                        var suffixes = ["", "K", "M", "B"];
                        var order = Math.max(Math.floor(Math.log(e.value) / Math.log(1000)), 0);

                        if (order > suffixes.length - 1)
                            order = suffixes.length - 1;

                        var suffix = suffixes[order];
                        return CanvasJS.formatNumber(e.value / Math.pow(1000, order)) + suffix;
                    }

                    function toggleDataSeries(e) {
                        if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                            e.dataSeries.visible = false;
                        } else {
                            e.dataSeries.visible = true;
                        }

                        showDefaultText(chart, "No Data Available");
                        e.chart.render();
                    }

                    function toolTipFormatter(e) {
                        var str = "";
                        var total = 0;
                        var str3;
                        var str2;
                        for (var i = 0; i < e.entries.length; i++) {
                            var str1 = "<span style= \"color:" + e.entries[i].dataSeries.color + "\">" + e.entries[i].dataSeries.name + "</span>: <strong>" + e.entries[i].dataPoint.y + "</strong> <br />";
                            total = e.entries[i].dataPoint.y + total;
                            str = str.concat(str1);
                        }
                        str2 = "<strong>" + e.entries[0].dataPoint.label + "</strong> <br />";
                        str3 = "<span style = \"color:Tomato\">Total: </span><strong>" + total + "</strong><br />";
                        return (str2.concat(str)).concat(str3);
                    }

                    function toggleDataSeries(e) {
                        if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                            e.dataSeries.visible = false;
                        }
                        else {
                            e.dataSeries.visible = true;
                        }
                        showDefaultText(chart, "No Data Available");
                        chart.render();
                    }
                    $("#ajaxLoading").remove();
                }

                LoadProgramChart("Daily");

            });

        </script>
        <script>
            var latlong = [];
            var CLONE;
            var currentWeek = [];
            var IsAjax = false;
            var map;
            var mapCentre;
            var SendData = 0;
            function initMap() {

                /* == Dynatree selected value == */
                var Count = $("#dynatreemap").dynatree("getSelectedNodes").length;
                var DynaTaskId = "";
                if (SendData != 0) {
                    for (var dyna = 0; dyna < Count; dyna++) {
                        if ($("#dynatreemap").dynatree("getSelectedNodes")[dyna].data.key !== undefined) {
                            if (dyna == 0) {
                                DynaTaskId = DynaTaskId + $("#dynatreemap").dynatree("getSelectedNodes")[dyna].data.key;
                            }
                            else {
                                DynaTaskId = DynaTaskId + ", " + $("#dynatreemap").dynatree("getSelectedNodes")[dyna].data.key;
                            }
                            $.removeCookie(CookiesIdentifier + 'MVDynaTaskId');
                            $.cookie(CookiesIdentifier + "MVDynaTaskId", DynaTaskId, {
                                expires: 2000
                            });
                        }
                    }
                }
                SendData = 1;
                /* == Dynatree selected value == */

                /*
                 url: '/Project/Dashboard/GetDashboardCharts?filter=NEW_Get_Site_LatLong&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + $.cookie('MapTasks')
                        + '&LocationIds=' + $.cookie("MapMarkets") + '&FromDate=' + $.cookie("MapFromDate") + '&ToDate=' + $.cookie("MapToDate") + '&SearchFilter=Daily' + '&MapStatus=' + $.cookie('MapStatus') + '&MapType=' + $.cookie("MapType"),
                 */

                $.ajax({
                    //NEW_Get_Site_LatLong
                    //Get_Site_LatLong
                    //url: '/Project/Dashboard/GetSiteLatLong?ProjectId=' + $("#pId").attr("data-ProjectId"),
                    url: '/Project/Dashboard/GetDashboardCharts?filter=NEW_Get_Site_LatLong&ProjectId=' + $("#pId").attr("data-ProjectId") + '&Value1=' + '' + '&TaskIds=' + DynaTaskId
                        + '&LocationIds=' + $.cookie(CookiesIdentifier + "MapMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "MapFromDate") + '&ToDate=' + $.cookie(CookiesIdentifier + "MapToDate") + '&SearchFilter=Daily' + '&MapStatus=' + $.cookie(CookiesIdentifier + 'MapStatus') + '&MapType=' + $.cookie(CookiesIdentifier + "MapType"),

                    type: 'Get',
                    async: false,
                    success: function (data) {
                        latlong = data;
                    }
                });


                if (latlong.length > 0) {
                    var mapOptions;
                    if (localStorage.mapLat != null && localStorage.mapLng != null && localStorage.mapZoom != null) {
                        mapOptions = {
                            center: new google.maps.LatLng(localStorage.mapLat, localStorage.mapLng),
                            zoom: parseInt(localStorage.mapZoom),
                            scaleControl: true
                        };
                    } else {
                        //Choose some default options
                        mapOptions = {
                            center: new google.maps.LatLng(40.71427, -74.00597),
                            zoom: 11,
                            scaleControl: true
                        };
                    }

                    //MAP
                    map = new google.maps.Map(document.getElementById('map'), mapOptions);

                    //    {
                    //    zoom: 5,
                    //    //center: { lat: latlong[0].Latitude, lng: latlong[0].Longitude },
                    //    center: { lat: 40.709642, lng: -73.889764 },
                    //    mapTypeControl: false,
                    //    streetViewControl: false,
                    //    fullscreenControl: true,
                    //    fullscreenControlOptions: {
                    //        position: google.maps.ControlPosition.TOP_RIGHT
                    //    }
                    //});

                    setMarkers(map);
                    //--------------------------

                    mapCentre = map.getCenter();

                    //Set local storage variables.
                    localStorage.mapLat = mapCentre.lat();
                    localStorage.mapLng = mapCentre.lng();
                    localStorage.mapZoom = map.getZoom();

                    google.maps.event.addListener(map, "center_changed", function () {
                        //Set local storage variables.
                        mapCentre = map.getCenter();

                        localStorage.mapLat = mapCentre.lat();
                        localStorage.mapLng = mapCentre.lng();
                        localStorage.mapZoom = map.getZoom();
                    });

                    google.maps.event.addListener(map, "zoom_changed", function () {
                        //Set local storage variables.
                        mapCentre = map.getCenter();

                        localStorage.mapLat = mapCentre.lat();
                        localStorage.mapLng = mapCentre.lng();
                        localStorage.mapZoom = map.getZoom();
                    });
                    //--------------------------

                    map.addListener('bounds_changed', function () {
                        var container = $(".gm-style-pbc");
                        var Map = container.width();
                        var Window = $(window).width();
                        if (Map >= screen.width - 200) {
                            $("#legend").css({ "z-index": "2000000000000000000000" });
                            $(".map-filters").css({ "z-index": "2000000000000000000000" });
                        }
                        else {
                            $("#legend").css({ 'z-index': "200" });
                            $(".map-filters").css({ 'z-index': "20" });
                        }
                    });
                }
                else {
                    map = new google.maps.Map(document.getElementById('map'), {
                        zoom: 5,
                        center: { lat: 40.709642, lng: -73.889764 },
                        mapTypeControl: false,
                        streetViewControl: false,
                        fullscreenControl: true,
                        fullscreenControlOptions: {
                            position: google.maps.ControlPosition.TOP_RIGHT
                        }
                    });

                    map.addListener('bounds_changed', function () {
                        var container = $(".gm-style-pbc");
                        var Map = container.width();
                        var Window = $(window).width();
                        if (Map >= screen.width - 200) {
                            $(".map-filters").css({ "z-index": "2000000000000000000000" });

                            $("#legend").css({ "z-index": "2000000000000000000000" });
                            $(".map-filters").css({ "z-index": "2000000000000000000000" });
                        }
                        else {
                            $("#legend").css({ 'z-index': "200" });
                            $(".map-filters").css({ 'z-index': "20" });
                        }
                    });
                    setMarkers(map);
                }

                google.maps.event.addListenerOnce(map, 'tilesloaded', function () {
                    $('#container div.gm-style button[title="Toggle fullscreen view"]').trigger('click');
                    google.maps.event.addListenerOnce(map, 'tilesloaded', function () {
                        //this part runs when the mapobject shown for the first time
                    });
                });
            }

            //------End initMap Function-------------------------------

            function showDefaultText(chart, text) {

                var isEmpty = !(chart.options.data[0].dataPoints && chart.options.data[0].dataPoints.length > 0);

                if (!chart.options.subtitles)
                    (chart.options.subtitles = []);

                if (isEmpty)
                    chart.options.subtitles.push({
                        text: text,
                        verticalAlign: 'center',
                    });
                else
                    (chart.options.subtitles = []);
            }

            function setMarkers(map) {
                var isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;

                var legend = document.getElementById('legend');


                var shape = {
                    coords: [1, 1, 1, 20, 18, 20, 18, 1],
                    type: 'poly'
                };
                for (var i = 0; i < latlong.length; i++) {

                    var site = latlong[i];
                    //console.log("JSON:" + JSON.stringify(site));
                    var Image;
                    switch (site.Stage) {
                        case "TSS":
                            Image = "tss.png";
                            break;
                        case "PENDING":
                            Image = "pending.png";
                            break;
                        case "TSS_SSM":
                            Image = "tss_ssm.png";
                            break;
                        case "TSS_EPL":
                            Image = "tss_epl.png";
                            break;
                        case "TSS_SSM_EPL":
                            Image = "tss_ssm_epl.png";
                            break;
                        case "PREINSTALL":
                            Image = "preinstall.png";
                            break;
                            //case "ONGOING":
                            //    Image = "ongoing.png";
                            //    break;
                        case "MIGRATE":
                            Image = "migrated.png";
                            break;
                        case "COMPLETED":
                            Image = "completed.png";
                            break;
                        default:


                    }
                    var image = {
                        url: '/Content/Images/Markers/' + Image,
                        size: new google.maps.Size(20, 32),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(0, 32)
                    };
                    var pinColor = site.ColorId;
                    if (site.ColorId != "" && site.ColorId != null) {
                        pinColor = site.ColorId;
                        pinColor = pinColor.replace("#", "");
                    }
                    else {
                        pinColor = "00ffff";
                    }
                    var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=|" + pinColor+"|000000",
                        new google.maps.Size(21, 34),
                        new google.maps.Point(0, 0),
                        new google.maps.Point(10, 34));
                    var pinShadow = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_shadow",
                        new google.maps.Size(40, 37),
                        new google.maps.Point(0, 0),
                        new google.maps.Point(12, 35));

                    var marker = new google.maps.Marker({
                        position: { lat: latlong[i].Latitude, lng: latlong[i].Longitude },
                        map: map,
                        icon: pinImage,
                        shape: shape,
                        animation: google.maps.Animation.DROP,
                        //title: beach[0],
                        //zIndex: beach[3]
                    });
                    /*var pinColor;
                    if (site.ColorId != "" && site.ColorId != null) {
                        pinColor = site.ColorId;
                    }
                    else {
                        pinColor = "#ff0000";
                    }*/

                    /* == Placing Circle on Map Start == */
                    /* var circ = new google.maps.Circle({
                         center: { lat: latlong[i].Latitude, lng: latlong[i].Longitude },
                         clickable: false,
                         fillColor: pinColor,
                         fillOpacity: 0.7,
                         map: map,
                         radius: 10,
                         strokeColor: pinColor,
                         strokeOpacity: 1
                     });*/
                    /* == Placing Circle on Map End == */
                    //----- Start: Show info window on marker click -----------------
                    //var minDate = moment.utc("1900-01-01");
                    //var tssDate = '';
                    //var ssmDate = '';
                    //var eplDate = '';
                    //var pinstDate = '';
                    //var migDate = '';

                    //if (moment.utc(latlong[i].tssDate).isAfter(minDate)) {
                    //    tssDate = moment(latlong[i].tssDate).format('YYYY/MM/DD');
                    //}

                    //if (moment.utc(latlong[i].ssmDate).isAfter(minDate)) {
                    //    ssmDate = moment(latlong[i].ssmDate).format('YYYY/MM/DD')
                    //}

                    //if (moment.utc(latlong[i].eplDate).isAfter(minDate)) {
                    //    eplDate = moment(latlong[i].eplDate).format('YYYY/MM/DD')
                    //}

                    //if (moment.utc(latlong[i].pinstDate).isAfter(minDate)) {
                    //    pinstDate = moment(latlong[i].pinstDate).format('YYYY/MM/DD')
                    //}

                    //if (moment.utc(latlong[i].migDate).isAfter(minDate)) {
                    //    migDate = moment(latlong[i].migDate).format('YYYY/MM/DD')
                    //}

                    //var content = '<div id="content">' +
                    //    '<div id="bodyContent">' +
                    //    '<label><strong>FA Code: </strong></label><label for="FA Code:">' + latlong[i].FACode + '</label><br />' +
                    //    '<label><strong>TSS Date: </strong></label><label>' + tssDate + '</label><br />' +
                    //    '<label><strong>SSM Date: </strong></label><label>' + ssmDate + '</label><br />' +
                    //    '<label><strong>EPL Date: </strong></label><label>' + eplDate + '</label><br />' +
                    //    '<label><strong>Pinst Date: </strong></label><label>' + pinstDate + '</label><br />' +
                    //    '<label><strong>Mig Date: </strong></label><label>' + migDate + '</label><br />' +
                    //    '</div>' +
                    //    '</div>';


                    var content = '<table id="MapViewInfoWindow">' +
                        '<tbody>' +
                        '<tr>' +
                        '<td class="MVInfo MVInfoPadding"> <strong>Site:</strong> <span>' + site.FACode + '</span></td>' +
                        '<td class="MVInfo MVInfoPadding"> </td>' +
                        '</tr>' +
                        '<tr>' +
                        '<td class="MVInfo MVInfoPadding"> <strong>Task:</strong> <span>' + site.TaskName + '</span></td>' +
                        '<td class="MVInfo MVInfoPadding"> <strong>Status:</strong> <span>' + site.TaskStatus + '</span></td>' +
                        '</tr>' +
                        '<tr>' +
                        '<td class="MVInfo MVInfoPadding "> <strong>Plan:</strong> <span>' + ConvertData(site.PlannedDate) + '</span></td>' +
                        '<td class="MVInfo MVInfoPadding"> <strong>Target:</strong> <span>' + ConvertData(site.TargetDate) + '</span></td>' +
                        '</tr>' +
                        '<tr>' +
                        '<td class="MVInfo MVInfoPadding"> <strong>Forecast Start:</strong> <span>' + ConvertData(site.EstimatedStartDate) + '</span></td>' +
                            '<td class="MVInfo MVInfoPadding"> <strong>Forecast End:</strong> <span>' + ConvertData(site.EstimatedEndDate) + '</span></td>' +
                        '</tr>' +
                        '<tr>' +
                                '<td class="MVInfo MVInfoPadding "> <strong>Actual Start:</strong> <span>' + ConvertData(site.ActualStartDate) + '</span></td>' +
                                    '<td class="MVInfo MVInfoPadding"> <strong>Actual End:</strong> <span>' + ConvertData(site.ActualEndDate) + '</span></td>' +
                        '</tr>' +
                        '</tbody>' +
                        '</table>';

                    var infowindow = new google.maps.InfoWindow()

                    google.maps.event.addListener(marker, 'click', (function (marker, content, infowindow) {
                        return function () {
                            infowindow.setContent(content);
                            infowindow.open(map, marker);
                        };
                    })(marker, content, infowindow));

                    //--------- End: Show info window on marker click


                    //if (site.Stage == "MIGRATE") {
                    //marker.setAnimation(google.maps.Animation.BOUNCE);
                    //}
                    //setTimeout(function () { marker.setAnimation(null); }, 750);
                }

                if (latlong.length>0) {
                    map.setCenter(new google.maps.LatLng(latlong[0].Latitude, latlong[0].Longitude));
                }

                map.setZoom(10);
                $('.gmnoprint').hide();
            }



            //-----------------------------------------


            $("[data-toggle=popover]").popover({
                html: true,
                content: function () {
                    return $('#popover-content').html();
                }
            });

            $(document).on("change", ".multiselect-native-select", function () {
                var Id = $(this).children("select").attr("id");
                var Value = $("#" + Id).val();

                if (Value == null) {
                    switch (Id) {
                        case "example-xss-html_Map5":
                            //$("#example-xss-html_Map5").multiselect("enable");
                            $("#example-multiple-optgroups_Map").multiselect("enable");
                            $("#example-xss-html_Map7").multiselect("enable");
                            break;
                        case "example-multiple-optgroups_Map":
                            $("#example-xss-html_Map5").multiselect("enable");
                            //   $("#example-multiple-optgroups_Map").multiselect("enable");
                            $("#example-xss-html_Map7").multiselect("enable");
                            break;
                        case "example-xss-html_Map7":
                            $("#example-xss-html_Map5").multiselect("enable");
                            $("#example-multiple-optgroups_Map").multiselect("enable");
                            // $("#example-xss-html_Map7").multiselect("enable");
                            break;
                        default:
                    }
                }
                else {
                    switch (Id) {
                        case "example-xss-html_Map5":
                            //$("#example-xss-html_Map5").multiselect("enable");
                            $("#example-multiple-optgroups_Map").multiselect("disable");
                            $("#example-xss-html_Map7").multiselect("disable");
                            break;
                        case "example-multiple-optgroups_Map":
                            $("#example-xss-html_Map5").multiselect("disable");
                            //   $("#example-multiple-optgroups_Map").multiselect("enable");
                            $("#example-xss-html_Map7").multiselect("disable");
                            break;
                        case "example-xss-html_Map7":
                            $("#example-xss-html_Map5").multiselect("disable");
                            $("#example-multiple-optgroups_Map").multiselect("disable");
                            // $("#example-xss-html_Map7").multiselect("enable");
                            break;
                        default:
                    }
                }
            });



            $('#viewReport').click(function () {

                //NOTE: This work is done for REPORT, but it is incomplete (Button 'viewReport' is removed)

                //var selectedMarketIds = $("#example-xss-html_Issue option:selected").val();
                //var stringIds = "";
                //for (let x = 0; x < selectedMarketIds.length; x++) {
                //    stringIds += selectedMarketIds[x] + ","
                //}

                //stringIds = stringIds.slice(-1);
                var url;
                $.ajax({
                    url: '/Project/Dashboard/Pdf?ProjectId=' + $("#pId").attr("data-ProjectId") + '&TaskIds=' + $.cookie(CookiesIdentifier + 'ProjectTasks')
                        + '&LocationIds=' + $.cookie(CookiesIdentifier + "ProjectMarkets") + '&FromDate=' + $.cookie(CookiesIdentifier + "FromDate")
                        + '&ToDate=' + $.cookie(CookiesIdentifier + "ToDate"),
                    type: 'Post',
                    async: false,
                    success: function (data) {
                    }
                });
            });

        </script>

        <script src="https://maps.googleapis.com/maps/api/js?key=@(ViewBag.ApiMapKey)&callback=initMap" async defer></script>
    }


    <script>

        $(window).load(function () {
            $(".collapse-widget").on("click", function () {
                $(this).parent('header').next('div[role="content"]').slideToggle();
                if ($(this).find("i").hasClass("fa fa-minus")) {
                    $(this).find("i").attr("class", "fa fa-plus");
                }
                else if ($(this).find("i").hasClass("fa fa-plus")) {
                    $(this).find("i").attr("class", "fa fa-minus");
                }
                return false;
            });




            $(".filters-dropdown-wrapper > a").on("click", function () {
                $(this).toggleClass('dropdown-shown').next('.filters-dropdown').toggleClass('active');
                return false;
            });
            $("body").on("click", function () {
                if (!$(event.target).is('.filters-dropdown, .filters-dropdown *,.daterangepicker, .daterangepicker *')) {
                    $('.filters-dropdown').removeClass('active');
                    $(".filters-dropdown-wrapper > a").removeClass('dropdown-shown')
                }
            });



            $(".multiselect-selected-text").addClass("changingSelector").attr("data-id", "selector2");

            //$("body .select").addClass("changingSelector").attr("data-id", "selector3");

            $("body .dynatree-btn").attr("data-id", "selector3");

            $('.multiselect-selected-text.changingSelector').eq(5).attr('data-id', 'selector4');



            //$("body #ListMapStatus .multiselect").addClass("changingSelector").attr("data-id", "selector4");

            function changingSelector() {
                $('.changingSelector').each(function () {
                    var currentId = $(this).attr("data-id");
                    var currentDate = $(this).text();
                    $(this).parents('header').find('.selected-filters i[data-content="' + currentId + '"]').text(currentDate);
                });

                $('.changingSelector').bind("DOMSubtreeModified", function () {
                    var currentId = $(this).attr("data-id");
                    var currentDate = $(this).text();
                    $(this).parents('.jarviswidget').find('header .selected-filters i[data-content="' + currentId + '"]').text(currentDate);
                });
            }
            changingSelector();

            //$('.comboTreeInputBox').bind("DOMSubtreeModified", function () {
            //    var currentId = $(this).attr("data-id");
            //    $(this).parents('.jarviswidget').find('header .selected-filters i[data-content="' + currentId + '"]').text(currentDate);
            //});



            var myVar = setInterval(function () { myTimer() }, 100);
            function myTimer() {
                if ($("body #ListMapStatus .multiselect").length > 0 && $("body #ListMapType .multiselect").length > 0) {
                    $("body #ListMapStatus .multiselect").addClass("changingSelector").attr("data-id", "selector4");
                    $("body #ListMapType .multiselect").addClass("changingSelector").attr("data-id", "selector5");
                    changingSelector();
                    clearInterval(myVar);
                }
            }


            /* ================= Work Log Start ===================== */
            $("body").on("click", "#select-day button", function () {
                $("#select-day").find("button").removeClass("active");
                $(this).addClass('active');
            });

        });


        $('#datepicker').datetimepicker({
            defaultDate: new Date(),
        });
        $('#Editdatepicker').datetimepicker({
            defaultDate: new Date(),
        });
        $('.close').click(function () {
            $(".test").css("display", "none");
        });


        $("body").on("click", ".btn-toggle .btn", function () {
            $(this).addClass('active');
            $(this).siblings().removeClass('active');
        });


        $(".apply-filter-btn").on("click", function () {
            $(this).parents('.filters-dropdown').removeClass('active');
        });


        /*$(document).ready(function () {
            if ($.cookie('MapViewTasks') == "Multiple Selected") {
                $('#mapfilters').find('button[data-id="selector4"]').attr('disabled', 'disabled');
            }
        });*/
        //$(".confirm").on("click", function () {
        //    if ($(".confirm").html() == "OK") {
        //        location.reload();
        //    }
        //});



        function FillLabel(facode, sitnme,comid, sts, updatedby, updateddate, _Entity) {
            var lblfacode = '', lblsite = '', lblstatus = '', lblupdateby = '', lblentityname = '';
            //if ($(this).attr('data-FACode') != "") {
            lblfacode = '<label style="margin-left:22px;">@Entity.Title Code: </label><label style="margin-left:3px;">' + facode + '</label>'
            lblstatus = '<label  style="margin-left:20px;">Last Status: </label><label style="margin-left:3px;">' + sts + '</label>'
            lblsite = '<label  style="margin-left:20px;">@Entity.Title: </label><label style="margin-left:3px;">' + sitnme + '</label>'

            lbltsk = '<label  style="margin-left:20px;">Task Name: </label><label style="margin-left:3px;">' + comid + '</label>'

            if (_Entity != undefined) {
                lblsite = '<label  style="margin-left:20px;">' + _Entity + ' Name : </label><label style="margin-left:3px;">' + sitnme + '</label>'
                lblstatus = '';
                // lblentityname = '<label style="margin-left:22px;">' + _Entity + ' &nbsp Name </label>'
                lblfacode = '<label style="margin-left:22px;">' + _Entity + ' Code: </label><label style="margin-left:3px;">' + facode + '</label>'
            }

            //}
            //if ($(this).attr('data-CommonId') != "") {

            //}
            //if ($(this).attr('data-Status') != "") {
            // lblstatus = '<label  style="margin-left:20px;">Last Status: </label><label style="margin-left:3px;">' + sts + '</label>'
            //}
            //if ($(this).attr('data-UpdatedBy') != "") {
            lblupdateby = '<label  style="margin-left:20px;">Updated By: </label><label style="margin-left:3px;">' + updatedby + '</label>'
            //}
            lblupdatedate = '<label  style="margin-left:20px;">Updated Date: </label><label style="margin-left:3px;">' + updateddate + '</label>'
            var labelText ='';
            if(comid == null){
                labelText =  lblentityname + lblfacode + lblsite + lblstatus + lblupdateby + lblupdatedate;
            }else{
                labelText =  lblentityname + lblfacode + lblsite + lbltsk + lblstatus + lblupdateby + lblupdatedate;
            }

            $('.labelFacode').empty();

            //$('.labelFacode').html($(this).attr('data-FACode'));
            $('.labelFacode').html(labelText);
        }

        function FillLabel2(facode,sitnme, comid, sts, updatedby, updateddate) {
            var lblfacode = '', lblsite = '', lblstatus = '', lblupdateby = '';
            lblfacode = '<label style="margin-left: 33px;">@Entity.Title Code: </label><label style="margin-left:3px;">' + facode + '</label>'
            lblsite = '<label  style="margin-left: 33px;">@Entity.Title: </label><label style="margin-left:3px;">' + sitnme + '</label>'
            lbltsk = '<label  style="margin-left:20px;">Task Name: </label><label style="margin-left:3px;">' + comid + '</label>'
            var labelText = lblfacode + lblsite + lbltsk;
            $('.labelFacode').empty();
            $('.labelFacode').html(labelText);
        }
        function openWorkLog(a,b,c,d){
            angular.element(document.getElementById('widget-grid')).scope().openWorkLogTab(a, b,c,d );
        }
    </script>



    @*<script>
            var url_string = window.location.href;
            var url = new URL(url_string);
            var PID = url.searchParams.get("Id");
            siteProjectURL = "/ProjectSites/all/" + PID;
        </script>*@

